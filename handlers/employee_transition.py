"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (Task 7).
–í–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Ä–æ–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, change_trainee_to_employee, check_user_permission,
    get_employee_tests_from_recruiter, get_user_test_result
)
from handlers.auth import check_auth
from keyboards.keyboards import get_keyboard_by_role
from utils.logger import log_user_action, log_user_error

router = Router()


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Task 7: –ü–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# ===============================

@router.callback_query(F.data == "become_employee")
async def callback_become_employee(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º' –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 12-5)"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç–∞–∂–µ—Ä
        user_roles = [role.name for role in user.roles]
        if "–°—Ç–∞–∂–µ—Ä" not in user_roles:
            await callback.message.edit_text("‚ùå –¢–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.")
            return
            
        # –ú–µ–Ω—è–µ–º —Ä–æ–ª—å —Å—Ç–∞–∂–µ—Ä–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        success = await change_trainee_to_employee(session, user.id, None)  # attestation_result_id –Ω–µ –Ω—É–∂–µ–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        
        if not success:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
            
        await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –õ–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 12-8)
        await show_employee_profile(callback, session, show_congratulation=True)
        
        log_user_action(callback.from_user.id, "became_employee", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —Å—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        log_user_error(callback.from_user.id, "become_employee_error", str(e))


async def show_employee_profile(callback: CallbackQuery, session: AsyncSession, show_congratulation: bool = False):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 12-8)
    show_congratulation - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        from handlers.common import format_profile_text
        profile_text = await format_profile_text(user, session)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –õ–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="knowledge_base")]
        ])
        
        await callback.message.edit_text(
            profile_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if show_congratulation:
            # –û–±–Ω–æ–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee_keyboard = get_keyboard_by_role(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"])

            await callback.message.answer(
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!",
                parse_mode="HTML",
                reply_markup=employee_keyboard
            )
        
        log_user_action(callback.from_user.id, "employee_profile_shown", "–ü–æ–∫–∞–∑–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        log_user_error(callback.from_user.id, "show_employee_profile_error", str(e))


# –£–î–ê–õ–ï–ù–û: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ handlers/knowledge_base.py


@router.callback_query(F.data == "back_to_employee_profile")
async def callback_back_to_employee_profile(callback: CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        await show_employee_profile(callback, session, show_congratulation=False)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é")
        log_user_error(callback.from_user.id, "back_to_profile_error", str(e))


@router.message(F.text.in_(["–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è"]))
async def cmd_employee_profile(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ common.py
    from handlers.common import cmd_profile
    await cmd_profile(message, state, session)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã" –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ handlers/test_taking.py
# –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏
