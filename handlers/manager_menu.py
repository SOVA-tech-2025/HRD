"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
–í–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è–º–∏ –∏ —Å—Ç–∞–∂–µ—Ä–∞–º–∏.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, get_manager_trainees, get_attestation_results,
    check_user_permission
)
from handlers.auth import check_auth
from keyboards.keyboards import get_main_menu_keyboard
from utils.logger import log_user_action, log_user_error

router = Router()


@router.message(F.text == "üéØ –ú–æ–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
async def cmd_my_attestations(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        has_permission = await check_user_permission(session, user.id, "conduct_attestations")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        trainees = await get_manager_trainees(session, user.id)

        if not trainees:
            await message.answer(
                "üéØ <b>–ú–û–ò –ê–¢–¢–ï–°–¢–ê–¶–ò–ò</b>\n\n"
                "‚ùå <b>–°—Ç–∞–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            log_user_action(user.tg_id, "no_trainees_for_manager", "–£ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        attestation_menu = (
            "üéØ <b>–ú–û–ò –ê–¢–¢–ï–°–¢–ê–¶–ò–ò</b>\n\n"
            f"üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {user.full_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤:</b> {len(trainees)}\n\n"
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:</b>"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for trainee_manager in trainees:
            trainee = trainee_manager.trainee

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å—Ç–∞–∂–µ—Ä–∞
            results = await get_attestation_results(session, trainee.id)
            last_result = results[0] if results else None

            status_text = "–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å"
            if last_result:
                status_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if last_result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞"

            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{trainee.full_name} ({status_text})",
                    callback_data=f"select_trainee_for_attestation:{trainee.id}"
                )
            ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

        await message.answer(
            attestation_menu,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(user.tg_id, "my_attestations_opened", f"–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å {len(trainees)} —Å—Ç–∞–∂–µ—Ä–∞–º–∏")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
        log_user_error(message.from_user.id, "my_attestations_error", str(e))


@router.callback_query(F.data.startswith("select_trainee_for_attestation:"))
async def callback_select_trainee_for_attestation(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞
        trainee_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        from database.db import get_user_by_id
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        results = await get_attestation_results(session, trainee_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ
        trainee_info = (
            "üéØ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–ê–ñ–ï–†–ï</b>\n\n"
            f"üë§ <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"üóÇÔ∏è <b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )

        if results:
            trainee_info += "üìä <b>–ò–°–¢–û–†–ò–Ø –ê–¢–¢–ï–°–¢–ê–¶–ò–ô:</b>\n\n"
            for result in results[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
                status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
                trainee_info += (
                    f"üìÖ <b>{result.completed_date.strftime('%d.%m.%Y')}</b>\n"
                    f"üìã <b>{result.attestation.name}</b>\n"
                    f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result.total_score}/{result.max_score}\n"
                    f"üéØ <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                )
        else:
            trainee_info += "üìä <b>–ê–¢–¢–ï–°–¢–ê–¶–ò–ò:</b> –ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å\n\n"

        trainee_info += "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é", callback_data=f"conduct_attestation:{trainee_id}")
            ],
            [
                InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"view_attestation_results:{trainee_id}")
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_my_attestations")
            ]
        ])

        await callback.message.edit_text(
            trainee_info,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(callback.from_user.id, "trainee_selected_for_attestation", f"–í—ã–±—Ä–∞–Ω —Å—Ç–∞–∂–µ—Ä {trainee.full_name} –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞–∂–µ—Ä–∞")
        log_user_error(callback.from_user.id, "select_trainee_error", str(e))


@router.callback_query(F.data == "back_to_my_attestations")
async def callback_back_to_my_attestations(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        trainees = await get_manager_trainees(session, user.id)

        if not trainees:
            await callback.message.edit_text(
                "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        attestation_menu = (
            "üéØ <b>–ú–û–ò –ê–¢–¢–ï–°–¢–ê–¶–ò–ò</b>\n\n"
            f"üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {user.full_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤:</b> {len(trainees)}\n\n"
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:</b>"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for trainee_manager in trainees:
            trainee = trainee_manager.trainee

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å—Ç–∞–∂–µ—Ä–∞
            results = await get_attestation_results(session, trainee.id)
            last_result = results[0] if results else None

            status_text = "–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å"
            if last_result:
                status_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if last_result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞"

            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{trainee.full_name} ({status_text})",
                    callback_data=f"select_trainee_for_attestation:{trainee.id}"
                )
            ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

        await callback.message.edit_text(
            attestation_menu,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
        log_user_error(callback.from_user.id, "back_to_attestations_error", str(e))


@router.message(F.text == "üë®‚Äçüè´ –ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã")
async def cmd_my_trainees(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã" –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        has_permission = await check_user_permission(session, user.id, "conduct_attestations")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        trainees = await get_manager_trainees(session, user.id)

        if not trainees:
            await message.answer(
                "üë®‚Äçüè´ <b>–ú–û–ò –°–¢–ê–ñ–ï–†–´</b>\n\n"
                "‚ùå <b>–°—Ç–∞–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤
        trainees_list = (
            "üë®‚Äçüè´ <b>–ú–û–ò –°–¢–ê–ñ–ï–†–´</b>\n\n"
            f"üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {user.full_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤:</b> {len(trainees)}\n\n"
            "üìã <b>–°–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤:</b>\n\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for trainee_manager in trainees:
            trainee = trainee_manager.trainee

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å—Ç–∞–∂–µ—Ä–∞
            results = await get_attestation_results(session, trainee.id)
            last_result = results[0] if results else None

            status_text = "–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å"
            if last_result:
                status_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if last_result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞"

            trainees_list += (
                f"üë§ <b>{trainee.full_name}</b>\n"
                f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {status_text}\n"
                f"üìÖ <b>–ù–∞–∑–Ω–∞—á–µ–Ω:</b> {trainee_manager.assigned_date.strftime('%d.%m.%Y')}\n\n"
            )

            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üéØ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è: {trainee.full_name}",
                    callback_data=f"select_trainee_for_attestation:{trainee.id}"
                )
            ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

        await message.answer(
            trainees_list,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(user.tg_id, "my_trainees_opened", f"–û—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤ ({len(trainees)} —á–µ–ª–æ–≤–µ–∫)")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤")
        log_user_error(message.from_user.id, "my_trainees_error", str(e))
