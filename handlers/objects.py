"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏.
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞–º–∏.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    create_object, get_all_objects, get_object_by_id, 
    update_object_name, get_object_users, get_user_roles,
    check_user_permission, get_user_by_tg_id
)
from handlers.auth import check_auth
from states.states import ObjectManagementStates
from keyboards.keyboards import (
    get_object_management_keyboard, get_object_selection_keyboard,
    get_object_rename_confirmation_keyboard, get_main_menu_keyboard,
    get_keyboard_by_role
)
from utils.logger import log_user_action, log_user_error
from utils.validators import validate_name

router = Router()


@router.message(F.text == "–û–±—ä–µ–∫—Ç—ã")
async def cmd_objects(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–û–±—ä–µ–∫—Ç—ã'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        has_permission = await check_user_permission(session, user.id, "manage_objects")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏.",
                parse_mode="HTML"
            )
            return
        
        await message.answer(
            "üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n\n"
            "–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã\n"
            "2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã\n"
            "3. –ú–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º",
            reply_markup=get_object_management_keyboard(),
            parse_mode="HTML"
        )
        log_user_action(user.tg_id, "objects_menu_opened", "–û—Ç–∫—Ä—ã–ª –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –æ–±—ä–µ–∫—Ç–æ–≤")
        log_user_error(message.from_user.id, "objects_menu_error", str(e))


@router.callback_query(F.data == "create_object")
async def callback_create_object(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        has_permission = await check_user_permission(session, user.id, "manage_objects")
        if not has_permission:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
            "‚ûï<b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>‚ûï\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            parse_mode="HTML"
        )
        await state.set_state(ObjectManagementStates.waiting_for_object_name)
        await callback.answer()
        log_user_action(user.tg_id, "object_creation_started", "–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞")
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "object_creation_start_error", str(e))


@router.message(ObjectManagementStates.waiting_for_object_name)
async def process_object_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await state.clear()
            return
        
        object_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(object_name):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
        obj = await create_object(session, object_name, user.id)
        if obj:
            await message.answer(
                f"üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
                f"‚úÖ<b>–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: <b>{object_name}</b>",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            log_user_action(user.tg_id, "object_created", f"–°–æ–∑–¥–∞–ª –æ–±—ä–µ–∫—Ç: {object_name}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            )
            return
        
        await state.clear()
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞")
        log_user_error(message.from_user.id, "object_creation_error", str(e))
        await state.clear()


@router.callback_query(F.data == "edit_object")
async def callback_edit_object(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        has_permission = await check_user_permission(session, user.id, "manage_objects")
        if not has_permission:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        objects = await get_all_objects(session)
        
        if not objects:
            await callback.message.edit_text(
                "üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
                "‚ùå –û–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç.",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
            "üëá<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",
            reply_markup=get_object_selection_keyboard(objects, page=0),
            parse_mode="HTML"
        )
        await state.update_data(objects=objects, current_page=0)
        await state.set_state(ObjectManagementStates.waiting_for_object_selection)
        await callback.answer()
        log_user_action(user.tg_id, "object_edit_started", "–ù–∞—á–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞")
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "object_edit_start_error", str(e))


@router.callback_query(F.data.startswith("select_object:"), ObjectManagementStates.waiting_for_object_selection)
async def callback_select_object(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await callback.answer()
            await state.clear()
            return
        
        object_id = int(callback.data.split(":")[1])
        obj = await get_object_by_id(session, object_id)
        
        if not obj:
            await callback.message.edit_text("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—ä–µ–∫—Ç–∞
        object_users = await get_object_users(session, object_id)
        user_list = ""
        if object_users:
            for object_user in object_users:
                user_roles = await get_user_roles(session, object_user.id)
                role_names = ", ".join([role.name for role in user_roles])
                user_list += f"{object_user.full_name} ({role_names})\n"
        else:
            user_list = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç"
        
        await callback.message.edit_text(
            f"üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
            f"üëâ–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—ä–µ–∫—Ç: <b>{obj.name}</b>\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ: <b>{len(object_users)}</b>\n\n"
            f"<b>–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
            f"{user_list}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Ç-–±–æ—Ç—É",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(object_id=object_id, old_name=obj.name)
        await state.set_state(ObjectManagementStates.waiting_for_new_object_name)
        await callback.answer()
        
        log_user_action(user.tg_id, "object_selected", f"–í—ã–±—Ä–∞–ª –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {obj.name}")
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "object_selection_error", str(e))
        await state.clear()


@router.callback_query(F.data.startswith("objects_page:"), ObjectManagementStates.waiting_for_object_selection)
async def callback_objects_pagination(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        page = int(callback.data.split(":")[1])
        data = await state.get_data()
        objects = data.get("objects", [])
        
        await callback.message.edit_text(
            "üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
            "üëá<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>",
            reply_markup=get_object_selection_keyboard(objects, page=page),
            parse_mode="HTML"
        )
        await state.update_data(current_page=page)
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        log_user_error(callback.from_user.id, "objects_pagination_error", str(e))


@router.message(ObjectManagementStates.waiting_for_new_object_name)
async def process_new_object_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await state.clear()
            return
        
        new_name = message.text.strip()
        data = await state.get_data()
        object_id = data.get("object_id")
        old_name = data.get("old_name")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(new_name):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
        if new_name == old_name:
            await message.answer(
                "‚ùå –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º.\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            )
            return
        
        await message.answer(
            f"üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ?\n\n"
            f"–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{old_name}</b>\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{new_name}</b>",
            reply_markup=get_object_rename_confirmation_keyboard(object_id),
            parse_mode="HTML"
        )
        
        await state.update_data(new_name=new_name)
        await state.set_state(ObjectManagementStates.waiting_for_object_rename_confirmation)
        log_user_action(user.tg_id, "object_rename_confirmation", f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {old_name} -> {new_name}")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è")
        log_user_error(message.from_user.id, "object_rename_process_error", str(e))
        await state.clear()


@router.callback_query(F.data.startswith("confirm_object_rename:"), ObjectManagementStates.waiting_for_object_rename_confirmation)
async def callback_confirm_object_rename(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await callback.answer()
            await state.clear()
            return
        
        object_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        new_name = data.get("new_name")
        old_name = data.get("old_name")
        
        if await update_object_name(session, object_id, new_name):
            await callback.message.edit_text(
                f"üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
                f"‚úÖ<b>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:</b>\n"
                f"<b>{new_name}</b>",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            log_user_action(user.tg_id, "object_renamed", f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –æ–±—ä–µ–∫—Ç: {old_name} -> {new_name}")
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.clear()
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏")
        log_user_error(callback.from_user.id, "object_rename_confirm_error", str(e))
        await state.clear()


@router.callback_query(F.data == "cancel_object_rename", ObjectManagementStates.waiting_for_object_rename_confirmation)
async def callback_cancel_object_rename(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    try:
        await callback.message.edit_text(
            "üìç<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê–ú–ò</b>üìç\n"
            "‚ùå<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</b>",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()
        log_user_action(callback.from_user.id, "object_rename_cancelled", "–û—Ç–º–µ–Ω–∏–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞")
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "object_rename_cancel_error", str(e))
        await state.clear()


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await callback.answer()
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user_roles = await get_user_roles(session, user.id)
        role_names = [role.name for role in user_roles]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_keyboard_by_role(role_names)
        
        await callback.message.answer(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        await state.clear()
        await callback.answer()
        log_user_action(user.tg_id, "returned_to_main_menu", "–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "main_menu_error", str(e))
        await state.clear()
