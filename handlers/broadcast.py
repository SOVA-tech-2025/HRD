"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º (Task 8).
–í–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞, –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaDocument
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, check_user_permission, get_all_active_tests,
    get_test_by_id, get_all_groups, get_group_by_id, broadcast_test_to_groups,
    get_employees_in_group, get_all_knowledge_folders, get_knowledge_folder_by_id,
    get_knowledge_material_by_id
)
from states.states import BroadcastStates
from keyboards.keyboards import (
    get_broadcast_test_selection_keyboard, get_broadcast_groups_selection_keyboard,
    get_broadcast_success_keyboard, get_main_menu_keyboard, get_keyboard_by_role,
    get_broadcast_photos_keyboard, get_broadcast_folders_keyboard,
    get_broadcast_materials_keyboard, get_broadcast_tests_keyboard,
    get_broadcast_notification_keyboard, get_broadcast_main_menu_keyboard,
    get_broadcast_roles_selection_keyboard
)
from utils.logger import log_user_action, log_user_error

router = Router()


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Task 8: –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤
# ===============================

@router.message(F.text.in_(["–†–∞—Å—Å—ã–ª–∫–∞ ‚úàÔ∏è", "–†–∞—Å—Å—ã–ª–∫–∞"]))
async def cmd_broadcast(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—Å—ã–ª–∫–∞ ‚úàÔ∏è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã)
        has_permission = await check_user_permission(session, user.id, "create_tests")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(
            "‚úâÔ∏è <b>–†–ê–°–°–´–õ–ö–ê</b> ‚úâÔ∏è\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_broadcast_main_menu_keyboard()
        )
        
        log_user_action(user.tg_id, "broadcast_menu_opened", "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(message.from_user.id, "broadcast_start_error", str(e))


@router.callback_query(F.data == "create_broadcast")
async def callback_create_broadcast(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'"""
    try:
        await callback.answer()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 1 –∏–∑ 6: –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "üü° –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥—è—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üí° <i>–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ, –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</i>\n\n"
            "üìè –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.",
            parse_mode="HTML"
        )
        
        await state.set_state(BroadcastStates.waiting_for_script)
        await state.update_data(broadcast_photos=[], broadcast_docs=[], broadcast_material_id=None, selected_test_id=None)
        log_user_action(callback.from_user.id, "broadcast_creation_started", "–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(callback.from_user.id, "create_broadcast_error", str(e))


@router.message(StateFilter(BroadcastStates.waiting_for_script))
async def process_broadcast_script(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        script_text = message.text.strip() if message.text else ""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        if len(script_text) < 10:
            await message.answer(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!\n\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            )
            return
        
        if len(script_text) > 4000:
            await message.answer(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                f"–¢–≤–æ–π —Ç–µ–∫—Å—Ç: {len(script_text)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "–°–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        await state.update_data(broadcast_script=script_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
        await message.answer(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 2 –∏–∑ 6: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>\n\n"
            "üü° –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É).\n\n"
            "üí° <i>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π.</i>\n\n"
            "–¢—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
            "‚Ä¢ –ù–∞–∂–∞—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å\n"
            "‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥",
            parse_mode="HTML",
            reply_markup=get_broadcast_photos_keyboard(has_photos=False)
        )
        
        await state.set_state(BroadcastStates.waiting_for_photos)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await state.update_data(broadcast_photos=[], broadcast_docs=[])
        log_user_action(message.from_user.id, "broadcast_script_set", f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({len(script_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")
        log_user_error(message.from_user.id, "process_broadcast_script_error", str(e))


@router.message(F.photo, StateFilter(BroadcastStates.waiting_for_photos))
async def process_broadcast_photos(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ
        data = await state.get_data()
        photos = data.get("broadcast_photos", [])
        docs = data.get("broadcast_docs", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(photos) + len(docs) >= 10:
            await message.answer(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç!\n\n"
                "Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
                "–ù–∞–∂–º–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                reply_markup=get_broadcast_photos_keyboard(has_photos=True)
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        photo_file_id = message.photo[-1].file_id
        photos.append(photo_file_id)
        
        await state.update_data(broadcast_photos=photos)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}\n\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.",
            reply_markup=get_broadcast_photos_keyboard(has_photos=True)
        )
        
        log_user_action(message.from_user.id, "broadcast_photo_added", f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ ({len(photos)} –≤—Å–µ–≥–æ)")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ")
        log_user_error(message.from_user.id, "process_broadcast_photos_error", str(e))


@router.message(F.document, StateFilter(BroadcastStates.waiting_for_photos))
async def process_broadcast_image_docs(message: Message, state: FSMContext, session: AsyncSession):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–±–µ–∑ —Å–∂–∞—Ç–∏—è) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if not message.document or not message.document.mime_type or not message.document.mime_type.startswith("image/"):
            await message.answer("‚ùå –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç (jpg/png) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ç–æ")
            return

        data = await state.get_data()
        docs = data.get("broadcast_docs", []) or []
        docs.append(message.document.file_id)

        await state.update_data(broadcast_docs=docs)

        total_photos = len(data.get("broadcast_photos", []))
        await message.answer(
            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ: —Ñ–æ—Ç–æ {total_photos}, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ {len(docs)}\n\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.",
            reply_markup=get_broadcast_photos_keyboard(has_photos=True)
        )

        log_user_action(message.from_user.id, "broadcast_image_doc_added", f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–∫–æ–≤: {len(docs)}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        log_user_error(message.from_user.id, "process_broadcast_image_docs_error", str(e))


@router.message(StateFilter(BroadcastStates.waiting_for_photos))
async def process_broadcast_wrong_content(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    await message.answer(
        "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç.",
        reply_markup=get_broadcast_photos_keyboard(has_photos=False)
    )


@router.callback_query(F.data == "broadcast_skip_photos", StateFilter(BroadcastStates.waiting_for_photos))
async def callback_skip_photos(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        folders = await get_all_knowledge_folders(session)
        
        if not folders:
            await callback.message.edit_text(
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "üìù <b>–®–∞–≥ 3 –∏–∑ 6: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
                "üìö –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–∞–ø–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'.\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞...",
                parse_mode="HTML"
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
            await show_test_selection(callback, state, session)
            return
        
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 3 –∏–∑ 6: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
            "üü° –í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üí° <i>–ú–∞—Ç–µ—Ä–∏–∞–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'.</i>",
            parse_mode="HTML",
            reply_markup=get_broadcast_folders_keyboard(folders)
        )
        
        await state.set_state(BroadcastStates.selecting_material)
        log_user_action(callback.from_user.id, "broadcast_photos_skipped", "–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "skip_photos_error", str(e))


@router.callback_query(F.data == "broadcast_finish_photos", StateFilter(BroadcastStates.waiting_for_photos))
async def callback_finish_photos(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        photos = data.get("broadcast_photos", [])
        docs = data.get("broadcast_docs", [])
        total = len(photos) + len(docs)
        
        if total == 0:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        folders = await get_all_knowledge_folders(session)
        
        if not folders:
            await callback.message.edit_text(
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "üìù <b>–®–∞–≥ 3 –∏–∑ 6: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
                "üìö –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–∞–ø–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'.\n\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞...",
                parse_mode="HTML"
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
            await show_test_selection(callback, state, session)
            return
        
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 3 –∏–∑ 6: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: —Ñ–æ—Ç–æ {len(photos)}, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ {len(docs)}\n\n"
            "üü° –í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üí° <i>–ú–∞—Ç–µ—Ä–∏–∞–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'.</i>",
            parse_mode="HTML",
            reply_markup=get_broadcast_folders_keyboard(folders)
        )
        
        await state.set_state(BroadcastStates.selecting_material)
        log_user_action(callback.from_user.id, "broadcast_photos_finished", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "finish_photos_error", str(e))


async def show_test_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    tests = await get_all_active_tests(session)
    
    if not tests:
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 4 –∏–∑ 6: –¢–µ—Å—Ç</b>\n\n"
            "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–µ–π...",
            parse_mode="HTML"
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–µ–π
        await show_roles_selection(callback, state, session)
        return
    
    await callback.message.edit_text(
        "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
        "üìù <b>–®–∞–≥ 4 –∏–∑ 6: –¢–µ—Å—Ç</b>\n\n"
        "üü° –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n\n"
        "üí° <i>–ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å —Ç–µ—Å—Ç, –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–º—É –ø–æ –∫–Ω–æ–ø–∫–µ.</i>",
        parse_mode="HTML",
        reply_markup=get_broadcast_tests_keyboard(tests)
    )
    
    await state.set_state(BroadcastStates.selecting_test)


async def show_roles_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π"""
    await callback.message.edit_text(
        "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
        "üìù <b>–®–∞–≥ 5 –∏–∑ 6: –í—ã–±–æ—Ä —Ä–æ–ª–µ–π</b>\n\n"
        "üü° –í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
        "üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º</i>",
        parse_mode="HTML",
        reply_markup=get_broadcast_roles_selection_keyboard([])
    )
    await state.update_data(selected_roles=[])
    await state.set_state(BroadcastStates.selecting_roles)


async def show_groups_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø"""
    data = await state.get_data()
    selected_test_id = data.get("selected_test_id")
    broadcast_material_id = data.get("broadcast_material_id")
    selected_roles = data.get("selected_roles", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    groups = await get_all_groups(session)
    
    if not groups:
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    info_lines = ["‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n", "üìù <b>–®–∞–≥ 6 –∏–∑ 6: –í—ã–±–æ—Ä –≥—Ä—É–ø–ø</b>\n\n"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if selected_test_id:
        test = await get_test_by_id(session, selected_test_id)
        if test:
            info_lines.append(f"üü¢ <b>–¢–µ—Å—Ç:</b> {test.name}\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if broadcast_material_id:
        material = await get_knowledge_material_by_id(session, broadcast_material_id)
        if material:
            info_lines.append(f"üü¢ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {material.name}\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö
    if selected_roles:
        role_names = {
            "trainee": "–°—Ç–∞–∂–µ—Ä",
            "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
            "mentor": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
            "recruiter": "–†–µ–∫—Ä—É—Ç–µ—Ä",
            "manager": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
        }
        selected_display = [role_names.get(r, r) for r in selected_roles]
        info_lines.append(f"üü¢ <b>–†–æ–ª–∏:</b> {', '.join(selected_display)}\n")
    
    info_lines.append("\nüü° <b>–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏üëá</b>")
    
    await callback.message.edit_text(
        "".join(info_lines),
        parse_mode="HTML",
        reply_markup=get_broadcast_groups_selection_keyboard(groups, [])
    )
    
    await state.update_data(selected_groups=[])
    await state.set_state(BroadcastStates.selecting_groups)


@router.callback_query(F.data.startswith("broadcast_folder:"), StateFilter(BroadcastStates.selecting_material))
async def callback_show_folder_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        folder = await get_knowledge_folder_by_id(session, folder_id)
        
        if not folder:
            await callback.answer("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        active_materials = [m for m in folder.materials if m.is_active]
        
        if not active_materials:
            await callback.answer(
                "–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —à–∞–≥.",
                show_alert=True
            )
            return
        
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 3 –∏–∑ 5: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
            f"üìÅ <b>–ü–∞–ø–∫–∞:</b> {folder.name}\n\n"
            "üü° –í—ã–±–µ—Ä–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            parse_mode="HTML",
            reply_markup=get_broadcast_materials_keyboard(folder.name, active_materials)
        )
        
        log_user_action(callback.from_user.id, "broadcast_folder_selected", f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "show_folder_materials_error", str(e))


@router.callback_query(F.data == "broadcast_back_to_folders", StateFilter(BroadcastStates.selecting_material))
async def callback_back_to_folders(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫"""
    try:
        await callback.answer()
        
        folders = await get_all_knowledge_folders(session)
        
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 3 –∏–∑ 5: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
            "üü° –í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            parse_mode="HTML",
            reply_markup=get_broadcast_folders_keyboard(folders)
        )
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_folders_error", str(e))


@router.callback_query(F.data.startswith("broadcast_select_material:"), StateFilter(BroadcastStates.selecting_material))
async def callback_broadcast_material_selected(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        material_id = int(callback.data.split(":")[1])
        material = await get_knowledge_material_by_id(session, material_id)
        
        if not material or not material.is_active:
            await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        await state.update_data(broadcast_material_id=material_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
        await show_test_selection(callback, state, session)
        
        log_user_action(callback.from_user.id, "broadcast_material_selected", f"–í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "material_selected_error", str(e))


@router.callback_query(F.data == "broadcast_skip_material", StateFilter(BroadcastStates.selecting_material))
async def callback_skip_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
        await show_test_selection(callback, state, session)
        
        log_user_action(callback.from_user.id, "broadcast_material_skipped", "–ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "skip_material_error", str(e))


@router.callback_query(F.data == "test_filter:broadcast")
async def callback_start_broadcast(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–®–∞–≥ 3 –¢–ó: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã)
        has_permission = await check_user_permission(session, user.id, "create_tests")
        if not has_permission:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await get_all_active_tests(session)
        
        if not tests:
            await callback.message.edit_text(
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –®–∞–≥ 4 –¢–ó: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üü°<b>–ö–∞–∫–æ–π —Ç–µ—Å—Ç —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>\n\n"
            "üìù <b>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, —Å—Ç–∞–∂–µ—Ä–∞–º –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞üëá",
            parse_mode="HTML",
            reply_markup=get_broadcast_test_selection_keyboard(tests)
        )
        
        await state.set_state(BroadcastStates.selecting_test)
        log_user_action(user.tg_id, "broadcast_started", "–ù–∞—á–∞—Ç–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(callback.from_user.id, "broadcast_start_error", str(e))


@router.callback_query(F.data.startswith("broadcast_test:"), BroadcastStates.selecting_test)
async def callback_select_broadcast_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        test_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        test = await get_test_by_id(session, test_id)
        if not test:
            await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        await state.update_data(selected_test_id=test_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–µ–π
        await show_roles_selection(callback, state, session)
        
        log_user_action(callback.from_user.id, "broadcast_test_selected", f"–í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {test.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Å—Ç–∞")
        log_user_error(callback.from_user.id, "broadcast_test_select_error", str(e))


@router.callback_query(F.data == "broadcast_skip_test", StateFilter(BroadcastStates.selecting_test))
async def callback_skip_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    try:
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–µ–π
        await show_roles_selection(callback, state, session)
        
        log_user_action(callback.from_user.id, "broadcast_test_skipped", "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "skip_test_error", str(e))


@router.callback_query(F.data.startswith("broadcast_role:"), BroadcastStates.selecting_roles)
async def callback_toggle_broadcast_role(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ —Ä–æ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        role_key = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        data = await state.get_data()
        selected_roles = data.get("selected_roles", [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–æ–ª—å
        if role_key in selected_roles:
            selected_roles.remove(role_key)
        else:
            selected_roles.append(role_key)
        
        await state.update_data(selected_roles=selected_roles)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        role_names = {
            "trainee": "–°—Ç–∞–∂–µ—Ä",
            "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", 
            "mentor": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
            "recruiter": "–†–µ–∫—Ä—É—Ç–µ—Ä",
            "manager": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
        }
        selected_display = [role_names[r] for r in selected_roles]
        
        info_text = (
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üìù <b>–®–∞–≥ 5 –∏–∑ 6: –í—ã–±–æ—Ä —Ä–æ–ª–µ–π</b>\n\n"
            "üü° –í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
        )
        
        if selected_roles:
            info_text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_display)}\n\n"
        else:
            info_text += "‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏\n\n"
        
        info_text += "üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º</i>"
        
        await callback.message.edit_text(
            info_text,
            parse_mode="HTML",
            reply_markup=get_broadcast_roles_selection_keyboard(selected_roles)
        )
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏")
        log_user_error(callback.from_user.id, "broadcast_role_toggle_error", str(e))


@router.callback_query(F.data == "broadcast_roles_all", BroadcastStates.selecting_roles)
async def callback_select_all_roles(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ (–≤—ã–±—Ä–∞—Ç—å –≤—Å–µ / —Å–Ω—è—Ç—å –≤—Å–µ)"""
    try:
        data = await state.get_data()
        current_roles = data.get("selected_roles", [])
        all_roles = ["trainee", "employee", "mentor", "recruiter", "manager"]
        
        # TOGGLE: –ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã ‚Üí —Å–Ω—è—Ç—å –≤—Å–µ, –∏–Ω–∞—á–µ ‚Üí –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ
        if set(current_roles) == set(all_roles):
            # –°–Ω—è—Ç—å –≤—Å–µ
            await callback.answer("–°–Ω—è—Ç—ã –≤—Å–µ —Ä–æ–ª–∏")
            await state.update_data(selected_roles=[])
            
            info_text = (
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "üìù <b>–®–∞–≥ 5 –∏–∑ 6: –í—ã–±–æ—Ä —Ä–æ–ª–µ–π</b>\n\n"
                "üü° –í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
                "‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏\n\n"
                "üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º</i>"
            )
            
            await callback.message.edit_text(
                info_text,
                parse_mode="HTML",
                reply_markup=get_broadcast_roles_selection_keyboard([])
            )
        else:
            # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
            await callback.answer("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ä–æ–ª–∏")
            await state.update_data(selected_roles=all_roles)
            
            info_text = (
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "üìù <b>–®–∞–≥ 5 –∏–∑ 6: –í—ã–±–æ—Ä —Ä–æ–ª–µ–π</b>\n\n"
                "‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ä–æ–ª–∏: –°—Ç–∞–∂–µ—Ä, –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, –†–µ–∫—Ä—É—Ç–µ—Ä, –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å\n\n"
                "üí° <i>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø</i>"
            )
            
            await callback.message.edit_text(
                info_text,
                parse_mode="HTML",
                reply_markup=get_broadcast_roles_selection_keyboard(all_roles)
            )
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "broadcast_roles_all_error", str(e))


@router.callback_query(F.data == "broadcast_roles_next", BroadcastStates.selecting_roles)
async def callback_proceed_to_groups(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π"""
    try:
        data = await state.get_data()
        selected_roles = data.get("selected_roles", [])
        
        if not selected_roles:
            await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", show_alert=True)
            return
        
        await callback.answer()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø
        await show_groups_selection(callback, state, session)
        
        log_user_action(callback.from_user.id, "broadcast_roles_selected", f"–í—ã–±—Ä–∞–Ω—ã —Ä–æ–ª–∏: {', '.join(selected_roles)}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "broadcast_proceed_groups_error", str(e))


@router.callback_query(F.data.startswith("broadcast_group:"), BroadcastStates.selecting_groups)
async def callback_toggle_broadcast_group(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–®–∞–≥ 7-10 –¢–ó: –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        group_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        selected_test_id = data.get("selected_test_id")
        selected_groups = data.get("selected_groups", [])
        broadcast_docs = data.get("broadcast_docs", [])
        broadcast_material_id = data.get("broadcast_material_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ –≥—Ä—É–ø–ø–µ
        test = None
        if selected_test_id:
            test = await get_test_by_id(session, selected_test_id)
        
        group = await get_group_by_id(session, group_id)
        
        if not group:
            await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        if group_id in selected_groups:
            selected_groups.remove(group_id)
        else:
            selected_groups.append(group_id)
        
        await state.update_data(selected_groups=selected_groups)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        selected_group_names = []
        for gid in selected_groups:
            g = await get_group_by_id(session, gid)
            if g:
                selected_group_names.append(g.name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        groups_text = "; ".join(selected_group_names) if selected_group_names else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        all_groups = await get_all_groups(session)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        info_lines = ["‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if test:
            info_lines.append(f"üü¢ <b>–¢–µ—Å—Ç:</b> {test.name}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if broadcast_material_id:
            material = await get_knowledge_material_by_id(session, broadcast_material_id)
            if material:
                info_lines.append(f"üü¢ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {material.name}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        if selected_group_names:
            info_lines.append(f"üü¢ <b>–ì—Ä—É–ø–ø—ã:</b> {groups_text}\n\n")
            info_lines.append("üü° <b>–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≥—Ä—É–ø–ø—É?</b>\n")
            info_lines.append("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µüëá")
        else:
            info_lines.append("üü° <b>–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏üëá</b>")
        
        message_text = "".join(info_lines)
        
        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=get_broadcast_groups_selection_keyboard(all_groups, selected_groups)
        )
        
        log_user_action(callback.from_user.id, "broadcast_group_toggled", 
                       f"–ì—Ä—É–ø–ø–∞ {group.name} {'–¥–æ–±–∞–≤–ª–µ–Ω–∞' if group_id in selected_groups else '—É–±—Ä–∞–Ω–∞'}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")
        log_user_error(callback.from_user.id, "broadcast_group_toggle_error", str(e))


@router.callback_query(F.data == "broadcast_send", BroadcastStates.selecting_groups)
async def callback_send_broadcast(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        data = await state.get_data()
        broadcast_script = data.get("broadcast_script")
        broadcast_photos = data.get("broadcast_photos", [])
        broadcast_material_id = data.get("broadcast_material_id")
        selected_test_id = data.get("selected_test_id")
        selected_groups = data.get("selected_groups", [])
        selected_roles = data.get("selected_roles", [])
        broadcast_docs = data.get("broadcast_docs", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not broadcast_script or not selected_groups:
            await callback.answer("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
        has_permission = await check_user_permission(session, user.id, "create_tests")
        if not has_permission:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ —Ä–æ–ª–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ë–î
        target_role_names = None
        if selected_roles:
            role_mapping = {
                "trainee": "–°—Ç–∞–∂–µ—Ä",
                "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
                "mentor": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
                "recruiter": "–†–µ–∫—Ä—É—Ç–µ—Ä",
                "manager": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
            }
            target_role_names = [role_mapping[r] for r in selected_roles]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = await broadcast_test_to_groups(
            session=session,
            test_id=selected_test_id,
            group_ids=selected_groups,
            sent_by_id=user.id,
            bot=bot,
            broadcast_script=broadcast_script,
            broadcast_photos=broadcast_photos,
            broadcast_material_id=broadcast_material_id,
            broadcast_docs=broadcast_docs,
            target_roles=target_role_names
        )
        
        if not result["success"]:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        groups_text = "; ".join(result["group_names"])
        
        success_parts = ["‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"]
        
        if selected_test_id:
            test = await get_test_by_id(session, selected_test_id)
            if test:
                success_parts.append(f"üü¢ <b>–¢–µ—Å—Ç:</b> {test.name}\n")
        
        if broadcast_material_id:
            material = await get_knowledge_material_by_id(session, broadcast_material_id)
            if material:
                success_parts.append(f"üü¢ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {material.name}\n")
        
        if broadcast_photos:
            success_parts.append(f"üü¢ <b>–§–æ—Ç–æ:</b> {len(broadcast_photos)} —à—Ç.\n")
        if broadcast_docs:
            success_parts.append(f"üü¢ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {len(broadcast_docs)} —à—Ç.\n")
        
        success_parts.append(f"üü¢ <b>–ì—Ä—É–ø–ø—ã:</b> {groups_text}\n\n")
        success_parts.append("‚úÖ <b>–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É!</b>\n\n")
        success_parts.append(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö: {result['total_users']}\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['total_sent']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['failed_sends']}"
        )
        
        await callback.message.edit_text(
            "".join(success_parts),
            parse_mode="HTML",
            reply_markup=get_broadcast_success_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        log_user_action(callback.from_user.id, "broadcast_completed", 
                       f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –≥—Ä—É–ø–ø—ã {groups_text}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['total_sent']}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(callback.from_user.id, "broadcast_send_error", str(e))


@router.callback_query(F.data.startswith("broadcast_material:"))
async def callback_broadcast_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        material_id = int(callback.data.split(":")[1])
        material = await get_knowledge_material_by_id(session, material_id)
        
        if not material or not material.is_active:
            await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é/—Å–æ–æ–±—â–µ–Ω–∏—è
        is_link = material.material_type == "link"
        if is_link:
            message_text = f"üìö <b>{material.name}</b>\n\n"
            if material.description:
                message_text += f"{material.description}\n\n"
            message_text += f"üîó {material.content}"
        else:
            caption = f"üìÑ {material.name}"
            if material.description:
                caption += f"\n\n{material.description}"

        # –ü—Ä–µ–≤—å—é: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã-–ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if material.photos and len(material.photos) > 0:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo_ids = []
            doc_ids = []
            for item in material.photos:
                if isinstance(item, dict):
                    (doc_ids if item.get("kind") == "document" else photo_ids).append(item.get("id"))
                else:
                    photo_ids.append(item)

            # –§–æ—Ç–æ ‚Äî –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π, caption —É –ø–µ—Ä–≤–æ–≥–æ (–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º message_text –∫–∞–∫ caption)
            if photo_ids:
                if len(photo_ids) == 1:
                    # –û–¥–Ω–æ —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ send_photo
                    await callback.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo_ids[0],
                        caption=(message_text if is_link else None),
                        parse_mode="HTML" if is_link else None
                    )
                else:
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º media_group
                    media_group = []
                    for i, file_id in enumerate(photo_ids, 1):
                        if i == 1:
                            media_group.append(InputMediaPhoto(media=file_id, caption=(message_text if is_link else None), parse_mode="HTML" if is_link else None))
                        else:
                            media_group.append(InputMediaPhoto(media=file_id))
                    await callback.bot.send_media_group(chat_id=callback.message.chat.id, media=media_group)
            else:
                # –ù–µ—Ç —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –≥—Ä—É–ø–ø–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞
                if is_link:
                    await callback.message.answer(message_text, parse_mode="HTML")

            # –î–æ–∫—É–º–µ–Ω—Ç—ã-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ caption (—Ç–µ–∫—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω/–ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω)
            if doc_ids:
                if len(doc_ids) == 1:
                    # –û–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ send_document
                    await callback.bot.send_document(
                        chat_id=callback.message.chat.id,
                        document=doc_ids[0]
                    )
                else:
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º media_group
                    docs_group = [InputMediaDocument(media=fid) for fid in doc_ids]
                    await callback.bot.send_media_group(chat_id=callback.message.chat.id, media=docs_group)

        else:
            # –ü—Ä–µ–≤—å—é –Ω–µ—Ç
            if is_link:
                await callback.message.answer(message_text, parse_mode="HTML")

        # –ó–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
        if not is_link:
            if material.material_type == "video":
                await callback.bot.send_video(
                    chat_id=callback.message.chat.id,
                    video=material.content,
                    caption=caption[:1024] if len(caption) > 1024 else caption
                )
            elif material.material_type == "photo":
                try:
                    await callback.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=material.content,
                        caption=caption[:1024] if len(caption) > 1024 else caption
                    )
                except Exception as inner_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {inner_error}")
                    await callback.bot.send_document(
                        chat_id=callback.message.chat.id,
                        document=material.content,
                        caption=caption[:1024] if len(caption) > 1024 else caption
                    )
            else:
                # –î–æ–∫—É–º–µ–Ω—Ç—ã (pdf, doc, excel, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Ç.–¥.)
                await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=material.content,
                    caption=caption[:1024] if len(caption) > 1024 else caption
                )
        
        log_user_action(callback.from_user.id, "broadcast_material_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material.name}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", show_alert=True)
        log_user_error(callback.from_user.id, "broadcast_material_error", str(e))


