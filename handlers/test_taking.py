from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
import json
import random
from datetime import datetime

from database.db import (
    get_trainee_available_tests, get_user_test_results, check_user_permission,
    get_user_by_tg_id, get_test_by_id, check_test_access, get_user_test_result,
    get_test_questions, save_test_result, get_user_test_attempts_count, can_user_take_test
)
from database.models import InternshipStage, TestResult
from sqlalchemy import select
from keyboards.keyboards import get_test_selection_keyboard, get_test_start_keyboard, get_test_selection_for_taking_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.states import TestTakingStates
from utils.logger import log_user_action, log_user_error, logger
from handlers.auth import check_auth

router = Router()

@router.message(Command("my_tests"))
async def cmd_my_tests_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_tests"""
    await cmd_take_test(message, state, session)

@router.message(Command("all_tests"))
async def cmd_all_tests_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all_tests"""
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã all_tests –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é cmd_list_tests –∏–∑ tests.py
    # –ù–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ—ë —Ç—É–¥–∞, –≥–¥–µ –æ–Ω–∞ –Ω—É–∂–Ω–∞
    from handlers.tests import cmd_list_tests
    await cmd_list_tests(message, state, session)

@router.message(F.text == "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã")
async def cmd_take_test(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "take_tests")
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
        return
    
    available_tests = await get_trainee_available_tests(session, user.id)
    
    if not available_tests:
        await message.answer(
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.",
            parse_mode="HTML"
        )
        return
    
    tests_list = []
    for i, test in enumerate(available_tests, 1):
        stage_info = ""
        if test.stage_id:
            stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
            stage_obj = stage.scalar_one_or_none()
            if stage_obj:
                stage_info = f" | –≠—Ç–∞–ø: {stage_obj.name}"
        
        materials_info = " | üìö –ï—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if test.material_link else ""
        
        tests_list.append(
            f"<b>{i}. {test.name}</b>\n"
            f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤{stage_info}{materials_info}\n"
            f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
    
    tests_display = "\n\n".join(tests_list)
    
    await message.answer(
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>{len(available_tests)}</b> —Ç–µ—Å—Ç–∞–º:\n\n"
        f"{tests_display}\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
        parse_mode="HTML",
        reply_markup=get_test_selection_for_taking_keyboard(available_tests)
    )
    
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    
    log_user_action(message.from_user.id, message.from_user.username, "opened test taking")

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã")
async def cmd_view_scores(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤ —Å—Ç–∞–∂–µ—Ä–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "view_test_results")
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")
        return
    
    test_results = await get_user_test_results(session, user.id)
    
    if not test_results:
        await message.answer(
            "üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n\n"
            "–í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã' –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    results_list = []
    total_score = 0
    passed_count = 0
    total_tests_taken = len(test_results)
    
    for result in test_results:
        test = await get_test_by_id(session, result.test_id)
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        percentage = (result.score / result.max_possible_score * 100) if result.max_possible_score > 0 else 0
        
        results_list.append(
            f"üìã <b>{test.name if test else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç'}</b>\n"
            f"   üìä –ë–∞–ª–ª—ã: {result.score}/{result.max_possible_score} ({percentage:.1f}%)\n"
            f"   {status}\n"
            f"   üìÖ –î–∞—Ç–∞: {result.created_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"   ‚è±Ô∏è –í—Ä–µ–º—è: {(result.end_time - result.start_time).total_seconds():.0f} —Å–µ–∫"
        )
        
        total_score += result.score
        if result.is_passed:
            passed_count += 1
    
    results_text = "\n\n".join(results_list)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    success_rate = (passed_count / total_tests_taken * 100) if total_tests_taken > 0 else 0
    
    await message.answer(
        f"üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_count}/{total_tests_taken}\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n"
        f"‚Ä¢ –û–±—â–∏–π –Ω–∞–±—Ä–∞–Ω–Ω—ã–π –±–∞–ª–ª: {total_score}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {test_results[0].created_date.strftime('%d.%m.%Y') if test_results else '–ù–µ—Ç'}\n\n"
        f"üìã <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n{results_text}\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç:</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–∞–º!",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed test results")

@router.callback_query(TestTakingStates.waiting_for_test_selection, F.data.startswith("test:"))
async def process_test_selection_for_taking(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
    user = await get_user_by_tg_id(session, callback.from_user.id)
    has_access = await check_test_access(session, user.id, test_id)
    
    if not has_access:
        await callback.message.edit_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts_count = await get_user_test_attempts_count(session, user.id, test_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    existing_result = await get_user_test_result(session, user.id, test_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    questions = await get_test_questions(session, test_id)
    questions_count = len(questions)
    
    stage_info = ""
    if test.stage_id:
        stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
        stage_obj = stage.scalar_one_or_none()
        if stage_obj:
            stage_info = f"üéØ <b>–≠—Ç–∞–ø:</b> {stage_obj.name}\n"
    
    materials_info = ""
    if test.material_link:
        if test.material_file_path:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            materials_info = f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\nüîó {test.material_link}\n\n"
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
            materials_info = f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n{test.material_link}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
    attempts_info = ""
    if test.max_attempts > 0:
        attempts_info = f"üî¢ <b>–ü–æ–ø—ã—Ç–∫–∏:</b> {attempts_count}/{test.max_attempts}\n"
    else:
        attempts_info = f"‚ôæÔ∏è <b>–ü–æ–ø—ã—Ç–∫–∏:</b> –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (—Ç–µ–∫—É—â–∞—è: {attempts_count + 1})\n"
    
    previous_result_info = ""
    if existing_result:
        status = "–ø—Ä–æ–π–¥–µ–Ω" if existing_result.is_passed else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        previous_result_info = f"""
üîÑ <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
   ‚Ä¢ –ë–∞–ª–ª—ã: {existing_result.score}/{existing_result.max_possible_score}
   ‚Ä¢ –î–∞—Ç–∞: {existing_result.created_date.strftime('%d.%m.%Y %H:%M')}

"""
    
    test_info = f"""üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ</b>

üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {test.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {test.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
{stage_info}‚ùì <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {questions_count}
üéØ <b>–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> {test.threshold_score} –∏–∑ {test.max_score} –±–∞–ª–ª–æ–≤
{attempts_info}{materials_info}{previous_result_info}"""
    
    await callback.message.edit_text(
        test_info,
        parse_mode="HTML",
        reply_markup=get_test_start_keyboard(test_id, bool(existing_result))
    )
    
    await state.update_data(selected_test_id=test_id)
    await state.set_state(TestTakingStates.waiting_for_test_start)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "selected test for taking", 
        {"test_id": test_id}
    )

@router.callback_query(TestTakingStates.waiting_for_test_start, F.data.startswith("start_test:"))
async def process_start_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.edit_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (—Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–ø—ã—Ç–æ–∫)
    can_take, error_message = await can_user_take_test(session, user.id, test_id)
    if not can_take:
        attempts_count = await get_user_test_attempts_count(session, user.id, test_id)
        attempts_info = ""
        if test.max_attempts > 0:
            attempts_info = f"\nüî¢ <b>–ü–æ–ø—ã—Ç–∫–∏:</b> {attempts_count}/{test.max_attempts}"
        
        await callback.message.edit_text(
            f"üö´ <b>–¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n"
            f"‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}{attempts_info}\n\n"
            f"üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            f"{'‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫' if test.max_attempts > 0 else '‚Ä¢ –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑'}\n"
            f"‚Ä¢ –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
            ])
        )
        await state.clear()
        await callback.answer()
        return
    
    questions = await get_test_questions(session, test_id)
    if not questions:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.")
        await state.clear()
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
    questions_list = list(questions)
    if test.shuffle_questions:
        random.shuffle(questions_list)

    await state.update_data(
        test_id=test_id,
        questions=questions_list,
        current_question_index=0,
        user_answers={},
        answers_details=[],
        start_time=datetime.now(),
        shuffle_enabled=test.shuffle_questions,
        user_id=callback.from_user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )

    await show_question(callback.message, state)
    await callback.answer()

async def show_question(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    questions = data['questions']
    index = data['current_question_index']
    shuffle_enabled = data.get('shuffle_enabled', False)
    
    question = questions[index]
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(question_start_time=datetime.now())
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_options = None
    keyboard = []
    
    if question.question_type == 'single_choice':
        options = list(question.options)
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        if shuffle_enabled:
            random.shuffle(options)
        
        current_options = options
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        await state.update_data(current_options_order=options)
        
        for i, option in enumerate(options):
            keyboard.append([InlineKeyboardButton(text=option, callback_data=f"answer:{i}")])
    elif question.question_type == 'multiple_choice':
        options = list(question.options)
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        if shuffle_enabled:
            random.shuffle(options)
        
        current_options = options
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        await state.update_data(current_options_order=options)
        
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
        keyboard.append([InlineKeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", callback_data="info")])
    elif question.question_type == 'yes_no':
        keyboard.append([
            InlineKeyboardButton(text="üëç –î–∞", callback_data="answer:–î–∞"),
            InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="answer:–ù–µ—Ç")
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"cancel_test:{question.test_id}")])

    question_text = f"<b>–í–æ–ø—Ä–æ—Å {index + 1}/{len(questions)}:</b>\n\n{question.question_text}"
    
    if question.question_type == 'text' or question.question_type == 'number':
        question_text += "\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>"
    elif question.question_type == 'multiple_choice':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        options_text = "\n".join([f"{i+1}. {option}" for i, option in enumerate(current_options)])
        question_text += f"\n\n<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n{options_text}"
        question_text += "\n\n<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3)</i>"

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        sent_message = await message.edit_text(
            question_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(last_bot_message_id=sent_message.message_id)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await message.answer(
            question_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        await state.update_data(last_bot_message_id=sent_message.message_id)
    
    await state.set_state(TestTakingStates.taking_test)

@router.message(TestTakingStates.taking_test)
async def process_text_answer(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ, —á–∏—Å–ª–æ–≤–æ–≥–æ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    data = await state.get_data()
    questions = data['questions']
    index = data['current_question_index']
    question = questions[index]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    start_time = data.get('question_start_time', datetime.now())
    time_spent = (datetime.now() - start_time).total_seconds()

    user_answers = data.get('user_answers', {})
    answers_details = data.get('answers_details', [])
    
    user_answer = message.text.strip()
    
    if question.question_type == 'number':
        try:
            float(user_answer)
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
    elif question.question_type == 'multiple_choice':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        current_options = data.get('current_options_order', question.options)
        selected_answers = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞
            parts = [part.strip() for part in user_answer.split(',')]
            indices = [int(part) - 1 for part in parts]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            for idx in indices:
                if 0 <= idx < len(current_options):
                    selected_answers.append(current_options[idx])
            
            if len(selected_answers) != len(indices):
                raise ValueError("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–º–µ—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                
        except (ValueError, IndexError):
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            parts = [part.strip() for part in user_answer.split(',')]
            selected_answers = []
            
            for part in parts:
                # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                matching_option = None
                for option in current_options:
                    if part.lower() == option.lower():  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                        matching_option = option
                        break
                
                if matching_option:
                    selected_answers.append(matching_option)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if not selected_answers:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
                    "‚Ä¢ –ù–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3)\n"
                    "‚Ä¢ –ò–ª–∏ —Å–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                )
                return
        
        user_answer = selected_answers

    user_answers[index] = user_answer
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    is_correct = False
    if question.question_type == 'multiple_choice':
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
        try:
            correct_answers = json.loads(question.correct_answer) if isinstance(question.correct_answer, str) else question.correct_answer
            is_correct = set(user_answer) == set(correct_answers)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question.id}: {e}")
            is_correct = user_answer == question.correct_answer
    else:
        is_correct = user_answer == question.correct_answer
    
    answers_details.append({
        "question_id": question.id,
        "answer": user_answer,
        "is_correct": is_correct,
        "time_spent": time_spent
    })
    
    await state.update_data(user_answers=user_answers, answers_details=answers_details)
    
    await process_next_step(message, state, session)

@router.callback_query(TestTakingStates.taking_test, F.data.startswith("answer:"))
async def process_answer_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º"""
    data = await state.get_data()
    questions = data['questions']
    index = data['current_question_index']
    question = questions[index]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    start_time = data.get('question_start_time', datetime.now())
    time_spent = (datetime.now() - start_time).total_seconds()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user_answers = data.get('user_answers', {})
    answers_details = data.get('answers_details', [])
    
    if question.question_type == 'single_choice':
        selected_option_index = int(callback.data.split(':')[1])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        current_options = data.get('current_options_order', question.options)
        user_answers[index] = current_options[selected_option_index]
    elif question.question_type == 'yes_no':
        user_answers[index] = callback.data.split(':')[1]
    elif question.question_type == 'multiple_choice':
        # Multiple choice –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        await callback.answer("‚ùå –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (multiple_choice –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞)
    is_correct = user_answers[index] == question.correct_answer
    
    answers_details.append({
        "question_id": question.id,
        "answer": user_answers[index],
        "is_correct": is_correct,
        "time_spent": time_spent
    })

    await state.update_data(user_answers=user_answers, answers_details=answers_details)
    
    await process_next_step(callback.message, state, session)
    await callback.answer()

async def process_next_step(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç"""
    data = await state.get_data()
    index = data['current_question_index']
    questions = data['questions']

    new_index = index + 1
    if new_index < len(questions):
        await state.update_data(current_question_index=new_index)
        await show_question(message, state)
    else:
        await finish_test(message, state, session)

async def finish_test(message: Message, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    data = await state.get_data()
    questions = data['questions']
    user_answers = data['user_answers']
    test_id = data['test_id']
    
    score = 0
    wrong_answers_data = []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ answers_details –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    answers_details = data.get('answers_details', [])
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö answers_details
    for answer_detail in answers_details:
        question_id = answer_detail['question_id']
        is_correct = answer_detail['is_correct']
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = next((q for q in questions if q.id == question_id), None)
        if not question:
            continue
            
        if is_correct:
            score += question.points
        else:
            score -= question.penalty_points
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            correct_answer_display = question.correct_answer
            if question.question_type == 'multiple_choice':
                try:
                    correct_answers = json.loads(question.correct_answer) if isinstance(question.correct_answer, str) else question.correct_answer
                    if isinstance(correct_answers, list):
                        correct_answer_display = ', '.join(correct_answers)
                except Exception:
                    pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_answer_display = answer_detail['answer']
            if question.question_type == 'multiple_choice' and isinstance(user_answer_display, list):
                user_answer_display = ', '.join(user_answer_display)
            
            wrong_answers_data.append({
                "question": question.question_text,
                "user_answer": user_answer_display,
                "correct_answer": correct_answer_display
            })
    
    test = await get_test_by_id(session, test_id)
    score = max(0, score) # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
    is_passed = score >= test.threshold_score
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
    user_tg_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not user_tg_id:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
        user_tg_id = message.from_user.id if hasattr(message, 'from_user') and message.from_user else None
    
    if not user_tg_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    user = await get_user_by_tg_id(session, user_tg_id)
    if not user:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_data = {
        'user_id': user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        'test_id': test_id,
        'score': score,
        'max_possible_score': test.max_score,
        'is_passed': is_passed,
        'start_time': data['start_time'],
        'end_time': datetime.now(),
        'answers_details': data.get('answers_details', []),
        'wrong_answers': wrong_answers_data
    }
    result = await save_test_result(session, result_data)
    
    if not result:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    status_text = "‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!</b>" if is_passed else "‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>"
    
    keyboard = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ—à–∏–±–∫–∏" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    # –∏ —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥)
    if wrong_answers_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ—Å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        has_choice_questions = any(q.question_type in ['single_choice', 'multiple_choice', 'yes_no'] for q in questions)
        if has_choice_questions:
            keyboard.append([InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ—à–∏–±–∫–∏", callback_data=f"show_errors:{result.id}")])

    try:
        await message.edit_text(
            f"{status_text}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{test.max_score}</b> –±–∞–ª–ª–æ–≤.\n"
            f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.threshold_score}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã'.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"{status_text}\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{test.max_score}</b> –±–∞–ª–ª–æ–≤.\n"
            f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.threshold_score}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã'.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    await state.clear()

@router.callback_query(F.data.startswith("show_errors:"))
async def show_wrong_answers(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result_id = int(callback.data.split(':')[1])
    test_result = await session.get(TestResult, result_id)
    
    if not test_result or not test_result.wrong_answers:
        await callback.answer("‚úÖ –£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ!", show_alert=True)
        return
        
    errors_text = "<b>üîç –í–∞—à–∏ –æ—à–∏–±–∫–∏:</b>\n\n"
    for i, error in enumerate(test_result.wrong_answers, 1):
        errors_text += (
            f"<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {error['question']}\n"
            f"   - –í–∞—à –æ—Ç–≤–µ—Ç: <code>{error['user_answer']}</code>\n"
            f"   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{error['correct_answer']}</code>\n\n"
        )
        
    await callback.message.answer(errors_text, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("view_materials:"))
async def process_view_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫ —Ç–µ—Å—Ç—É"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    if not test or not test.material_link:
        await callback.message.edit_text(
            "üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
            "–ö —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
            ])
        )
        await callback.answer()
        return
    
    if test.material_file_path:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        try:
            await callback.message.answer_document(
                document=test.material_file_path,
                caption=f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
                       f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
                       f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
                parse_mode="HTML"
            )
            await callback.message.edit_text(
                f"‚úÖ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
                f"üìé –î–æ–∫—É–º–µ–Ω—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                    [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
                ])
            )
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.\n\n"
                f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                    [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
                ])
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        await callback.message.edit_text(
            f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
            f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n{test.material_link}\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
            ])
        )
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "viewed test materials", 
        {"test_id": test_id}
    )

@router.callback_query(F.data == "back_to_test_list")
async def process_back_to_test_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    available_tests = await get_trainee_available_tests(session, user.id)
    
    if not available_tests:
        await callback.message.edit_text(
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    tests_list = []
    for i, test in enumerate(available_tests, 1):
        stage_info = ""
        if test.stage_id:
            stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
            stage_obj = stage.scalar_one_or_none()
            if stage_obj:
                stage_info = f" | –≠—Ç–∞–ø: {stage_obj.name}"
        
        materials_info = " | üìö –ï—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if test.material_link else ""
        
        tests_list.append(
            f"<b>{i}. {test.name}</b>\n"
            f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤{stage_info}{materials_info}\n"
            f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
    
    tests_display = "\n\n".join(tests_list)
    
    await callback.message.edit_text(
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>{len(available_tests)}</b> —Ç–µ—Å—Ç–∞–º:\n\n"
        f"{tests_display}\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
        parse_mode="HTML",
        reply_markup=get_test_selection_for_taking_keyboard(available_tests)
    )
    
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_test:"))
async def process_cancel_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã/–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    test_name = test.name if test else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç"
    
    await callback.message.edit_text(
        f"‚ùå <b>–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω</b>\n\n"
        f"–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>¬´{test_name}¬ª</b> –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"take_test:{test_id}")],
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
        ])
    )
    
    await state.clear()
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled test", 
        {"test_id": test_id}
    )

@router.callback_query(F.data == "cancel")
async def process_general_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –æ—Ç–º–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

@router.callback_query(TestTakingStates.waiting_for_test_start, F.data.startswith("take_test:"))
async def process_back_to_test_details(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º —Ç–µ—Å—Ç–∞"""
    await process_test_selection_for_taking(callback, state, session)

@router.callback_query(F.data == "info")
async def process_info_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    await callback.answer(
        "üí° –î–ª—è –æ—Ç–≤–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 3 –∏–ª–∏ 2, 4, 5",
        show_alert=True
    )

@router.callback_query(F.data.startswith("take_test:"))
async def process_take_test_from_notification(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.edit_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
        
    has_access = await check_test_access(session, user.id, test_id)
    
    if not has_access:
        await callback.message.edit_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts_count = await get_user_test_attempts_count(session, user.id, test_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    existing_result = await get_user_test_result(session, user.id, test_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    questions = await get_test_questions(session, test_id)
    questions_count = len(questions)
    
    stage_info = ""
    if test.stage_id:
        stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
        stage_obj = stage.scalar_one_or_none()
        if stage_obj:
            stage_info = f"üéØ <b>–≠—Ç–∞–ø:</b> {stage_obj.name}\n"
    
    materials_info = ""
    if test.material_link:
        if test.material_file_path:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            materials_info = f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\nüîó {test.material_link}\n\n"
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
            materials_info = f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n{test.material_link}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
    attempts_info = ""
    if test.max_attempts > 0:
        attempts_info = f"üî¢ <b>–ü–æ–ø—ã—Ç–∫–∏:</b> {attempts_count}/{test.max_attempts}\n"
    else:
        attempts_info = f"‚ôæÔ∏è <b>–ü–æ–ø—ã—Ç–∫–∏:</b> –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (—Ç–µ–∫—É—â–∞—è: {attempts_count + 1})\n"
    
    previous_result_info = ""
    if existing_result:
        status = "–ø—Ä–æ–π–¥–µ–Ω" if existing_result.is_passed else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        previous_result_info = f"""
üîÑ <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
   ‚Ä¢ –ë–∞–ª–ª—ã: {existing_result.score}/{existing_result.max_possible_score}
   ‚Ä¢ –î–∞—Ç–∞: {existing_result.created_date.strftime('%d.%m.%Y %H:%M')}

"""
    
    test_info = f"""üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ</b>

üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {test.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {test.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
{stage_info}‚ùì <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {questions_count}
üéØ <b>–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> {test.threshold_score} –∏–∑ {test.max_score} –±–∞–ª–ª–æ–≤
{attempts_info}{materials_info}{previous_result_info}"""
    
    await callback.message.edit_text(
        test_info,
        parse_mode="HTML",
        reply_markup=get_test_start_keyboard(test_id, bool(existing_result))
    )
    
    await state.update_data(selected_test_id=test_id)
    await state.set_state(TestTakingStates.waiting_for_test_start)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "took test from notification", 
        {"test_id": test_id}
    )

@router.callback_query(F.data == "available_tests")
async def process_available_tests_shortcut(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–µ—Å—Ç–∞–º –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    has_permission = await check_user_permission(session, user.id, "take_tests")
    if not has_permission:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
        await callback.answer()
        return
    
    available_tests = await get_trainee_available_tests(session, user.id)
    
    if not available_tests:
        await callback.message.edit_text(
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    tests_list = []
    for i, test in enumerate(available_tests, 1):
        stage_info = ""
        if test.stage_id:
            stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
            stage_obj = stage.scalar_one_or_none()
            if stage_obj:
                stage_info = f" | –≠—Ç–∞–ø: {stage_obj.name}"
        
        materials_info = " | üìö –ï—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if test.material_link else ""
        
        tests_list.append(
            f"<b>{i}. {test.name}</b>\n"
            f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤{stage_info}{materials_info}\n"
            f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
    
    tests_display = "\n\n".join(tests_list)
    
    await callback.message.edit_text(
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>{len(available_tests)}</b> —Ç–µ—Å—Ç–∞–º:\n\n"
        f"{tests_display}\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
        parse_mode="HTML",
        reply_markup=get_test_selection_for_taking_keyboard(available_tests)
    )
    
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    await callback.answer()
    
    log_user_action(callback.from_user.id, callback.from_user.username, "opened tests from notification")