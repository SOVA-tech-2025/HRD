"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Å—Ç–∞–∂–µ—Ä–∞–º–∏.
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –≤—ã–±–æ—Ä —ç—Ç–∞–ø–æ–≤, —Å–µ—Å—Å–∏–π –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_trainee_learning_path, get_trainee_stage_progress,
    get_stage_session_progress, get_learning_path_stages,
    complete_stage_for_trainee, complete_session_for_trainee,
    get_user_test_result, get_user_by_tg_id, check_user_permission,
    get_trainee_attestation_status
)
from handlers.auth import check_auth
from keyboards.keyboards import get_main_menu_keyboard, get_mentor_contact_keyboard
from utils.logger import log_user_action, log_user_error

router = Router()


async def format_trajectory_info(user, trainee_path=None, header="–í–´–ë–û–† –≠–¢–ê–ü–ê") -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not trainee_path:
        return (
            "üó∫Ô∏è <b>–¢–†–ê–ï–ö–¢–û–†–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø</b> üó∫Ô∏è\n\n"
            "‚ùå <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\n\n"
            "–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞ –∫—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω"
        )
    
    return (
        f"üó∫Ô∏è<b>–¢–†–ê–ï–ö–¢–û–†–ò–Ø</b>üó∫Ô∏è\n"
        f"<b>{header}</b>\n"
        f"üßë <b>–§–ò–û:</b> {user.full_name}\n"
        f"üëë <b>–†–æ–ª–∏:</b> {', '.join([role.name for role in user.roles]) if user.roles else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in user.groups]) if user.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {user.internship_object.name if user.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {user.work_object.name if user.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üìö<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {trainee_path.learning_path.name if trainee_path.learning_path else '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}\n\n"
    )


@router.message(Command("trajectory"))
async def cmd_trajectory_slash(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trajectory –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    await cmd_trajectory(message, state, session)


@router.message(F.text.in_(["–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è", "üìñ –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è", "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è üìñ"]))
async def cmd_trajectory(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è' –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_tg_id
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¢–û–õ–¨–ö–û —Å—Ç–∞–∂–µ—Ä–∞–º
        user_roles = [role.name for role in user.roles]
        if "–°—Ç–∞–∂–µ—Ä" not in user_roles:
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä–∞–º.\n"
                "–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—ã–ª–∫—É.",
                parse_mode="HTML"
            )
            log_user_action(user.tg_id, "trajectory_access_denied", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é {user_roles} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)

        if not trainee_path:
            await message.answer(
                await format_trajectory_info(user, None),
                parse_mode="HTML",
                reply_markup=get_mentor_contact_keyboard()
            )
            log_user_action(user.tg_id, "trajectory_not_assigned", "–°—Ç–∞–∂–µ—Ä –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é, –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        trajectory_info = await format_trajectory_info(user, trainee_path)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        stages_info = ""

        for stage_progress in stages_progress:
            stage = stage_progress.stage
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
            sessions_progress_for_stage = await get_stage_session_progress(session, stage_progress.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = False
            if stage_progress.is_opened and sessions_progress_for_stage:
                all_sessions_completed = True
                for sp in sessions_progress_for_stage:
                    if hasattr(sp.session, 'tests') and sp.session.tests:
                        session_tests_passed = True
                        for test in sp.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                session_tests_passed = False
                                break
                        if not session_tests_passed:
                            all_sessions_completed = False
                            break
            
            if all_sessions_completed and sessions_progress_for_stage:
                status_icon = "‚úÖ"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            elif stage_progress.is_opened:
                status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            else:
                status_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç

            stages_info += f"{status_icon}<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            for session_progress in sessions_progress_for_stage:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
                    all_tests_passed = False
                    if stage_progress.is_opened:
                        all_tests_passed = True
                        for test in session_progress.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                all_tests_passed = False
                                break
                    
                    if all_tests_passed and stage_progress.is_opened:
                        session_status_icon = "‚úÖ"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                    elif stage_progress.is_opened:
                        session_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                    else:
                        session_status_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                else:
                    session_status_icon = "‚õîÔ∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                stages_info += f"{session_status_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                for test in session_progress.session.tests:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                    test_result = await get_user_test_result(session, user.id, test.id)
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    if test_result and test_result.is_passed and stage_progress.is_opened:
                        test_status_icon = "‚úÖ"  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                    elif stage_progress.is_opened:
                        test_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                    else:
                        test_status_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    stages_info += f"{test_status_icon}<b>–¢–µ—Å—Ç {len([t for t in session_progress.session.tests if t.id <= test.id])}:</b> {test.name}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
            stages_info += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        stages_info += await format_attestation_status(session, user.id, trainee_path)

        available_stages = [sp for sp in stages_progress if sp.is_opened and not sp.is_completed]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard_buttons = []

        if available_stages:
            stages_info += "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏üëá"
            for stage_progress in available_stages:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"–≠—Ç–∞–ø {stage_progress.stage.order_number}",
                        callback_data=f"select_stage:{stage_progress.stage.id}"
                    )
                ])
        else:
            stages_info += "‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer(
            trajectory_info + stages_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(user.tg_id, "trajectory_opened", f"–û—Ç–∫—Ä—ã—Ç–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {trainee_path.learning_path.name}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(message.from_user.id, "trajectory_error", str(e))


@router.callback_query(F.data == "trajectory_command")
async def callback_trajectory_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —ç—Ç–∞–ø–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_tg_id
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)

        if not trainee_path:
            await callback.message.edit_text(
                await format_trajectory_info(user, None),
                parse_mode="HTML",
                reply_markup=get_mentor_contact_keyboard()
            )
            log_user_action(user.tg_id, "trajectory_not_assigned", "–°—Ç–∞–∂–µ—Ä –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –Ω–æ –æ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        trajectory_info = await format_trajectory_info(user, trainee_path)

        stages_info = ""

        for stage_progress in stages_progress:
            stage = stage_progress.stage
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
            sessions_progress = await get_stage_session_progress(session, stage_progress.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = False
            if stage_progress.is_opened and sessions_progress:
                all_sessions_completed = True
                for sp in sessions_progress:
                    if hasattr(sp.session, 'tests') and sp.session.tests:
                        session_tests_passed = True
                        for test in sp.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                session_tests_passed = False
                                break
                        if not session_tests_passed:
                            all_sessions_completed = False
                            break
            
            if all_sessions_completed and sessions_progress:
                stage_status_icon = "‚úÖ"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            elif stage_progress.is_opened:
                stage_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            else:
                stage_status_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç

            stages_info += f"{stage_status_icon}<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö
            sessions_progress = await get_stage_session_progress(session, stage_progress.id)

            for session_progress in sessions_progress:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
                    all_tests_passed = False
                    if stage_progress.is_opened:
                        all_tests_passed = True
                        for test in session_progress.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                all_tests_passed = False
                                break
                    
                    if all_tests_passed and stage_progress.is_opened:
                        session_status_icon = "‚úÖ"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                    elif stage_progress.is_opened:
                        session_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                    else:
                        session_status_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                else:
                    session_status_icon = "‚õîÔ∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                stages_info += f"{session_status_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                for test in session_progress.session.tests:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                    test_result = await get_user_test_result(session, user.id, test.id)
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    if test_result and test_result.is_passed and stage_progress.is_opened:
                        test_status_icon = "‚úÖ"  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                    elif stage_progress.is_opened:
                        test_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                    else:
                        test_status_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    stages_info += f"{test_status_icon}<b>–¢–µ—Å—Ç {len([t for t in session_progress.session.tests if t.id <= test.id])}:</b> {test.name}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
            stages_info += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        stages_info += await format_attestation_status(session, user.id, trainee_path)

        available_stages = [sp for sp in stages_progress if sp.is_opened and not sp.is_completed]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard_buttons = []

        if available_stages:
            stages_info += "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏üëá"
            for stage_progress in available_stages:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"–≠—Ç–∞–ø {stage_progress.stage.order_number}",
                        callback_data=f"select_stage:{stage_progress.stage.id}"
                    )
                ])
        else:
            stages_info += "‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            trajectory_info + stages_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(user.tg_id, "trajectory_opened", f"–û—Ç–∫—Ä—ã—Ç–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {trainee_path.learning_path.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(callback.from_user.id, "trajectory_command_error", str(e))


@router.callback_query(F.data.startswith("select_stage:"))
async def callback_select_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        stage_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_tg_id
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–∞–ø—É
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
        stage_progress = next((sp for sp in stages_progress if sp.stage_id == stage_id), None)

        if not stage_progress or not stage_progress.is_opened:
            await callback.message.edit_text("–≠—Ç–∞–ø –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
        sessions_progress = await get_stage_session_progress(session, stage_progress.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        stage_info = await format_trajectory_info(user, trainee_path, "–í–´–ë–û–† –°–ï–°–°–ò–ò")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        full_trajectory_info = stage_info

        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø—ã –∏ —Å–µ—Å—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        for sp in stages_progress:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
            stage_sessions_progress = await get_stage_session_progress(session, sp.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = False
            if sp.is_opened and stage_sessions_progress:
                all_sessions_completed = True
                for session_prog in stage_sessions_progress:
                    if hasattr(session_prog.session, 'tests') and session_prog.session.tests:
                        session_tests_passed = True
                        for test in session_prog.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                session_tests_passed = False
                                break
                        if not session_tests_passed:
                            all_sessions_completed = False
                            break
            
            if all_sessions_completed and stage_sessions_progress:
                stage_icon = "‚úÖ"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            elif sp.is_opened:
                stage_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            else:
                stage_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                
            full_trajectory_info += f"{stage_icon}<b>–≠—Ç–∞–ø {sp.stage.order_number}:</b> {sp.stage.name}\n"

            for session_progress in stage_sessions_progress:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                    all_tests_passed = True
                    for test in session_progress.session.tests:
                        test_result = await get_user_test_result(session, user.id, test.id)
                        if not (test_result and test_result.is_passed):
                            all_tests_passed = False
                            break
                    
                    if all_tests_passed:
                        session_icon = "‚úÖ"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                    elif sp.is_opened:
                        session_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                    else:
                        session_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                else:
                    session_icon = "‚õîÔ∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                    
                full_trajectory_info += f"{session_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                for test in session_progress.session.tests:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                    test_result = await get_user_test_result(session, user.id, test.id)
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    if test_result and test_result.is_passed and sp.is_opened:
                        test_icon = "‚úÖ"  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                    elif sp.is_opened:
                        test_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                    else:
                        test_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    test_number = len([t for t in session_progress.session.tests if t.id <= test.id])
                    full_trajectory_info += f"{test_icon}<b>–¢–µ—Å—Ç {test_number}:</b> {test.name}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
            full_trajectory_info += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
        attestation = trainee_path.learning_path.attestation if trainee_path.learning_path else None
        full_trajectory_info += await format_attestation_status_simple(session, user.id, attestation)

        available_sessions = [sp for sp in sessions_progress if sp.is_opened and not sp.is_completed]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard_buttons = []

        full_trajectory_info += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –≤ —ç—Ç–∞–ø–µ\n\n"

        if available_sessions:
            for session_progress in available_sessions:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"–°–µ—Å—Å–∏—è {session_progress.session.order_number}",
                        callback_data=f"select_session:{session_progress.session.id}"
                    )
                ])
        else:
            full_trajectory_info += "‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤—ã–±–æ—Ä—É —ç—Ç–∞–ø–∞)",
                callback_data="trajectory_command"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            full_trajectory_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "stage_selected", f"–í—ã–±—Ä–∞–Ω —ç—Ç–∞–ø {stage_progress.stage.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç—Ç–∞–ø–∞")
        log_user_error(callback.from_user.id, "select_stage_error", str(e))


@router.callback_query(F.data.startswith("select_session:"))
async def callback_select_session(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞"""
    try:
        await callback.answer()

        session_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_tg_id
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–µ—Å—Ç–∞–º–∏
        from database.db import get_session_with_tests
        selected_session = await get_session_with_tests(session, session_id)

        if not selected_session:
            await callback.message.edit_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
        tests = selected_session.tests if hasattr(selected_session, 'tests') and selected_session.tests else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        session_info = await format_trajectory_info(user, trainee_path, "–í–´–ë–û–† –¢–ï–°–¢–ê")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        full_trajectory_info = session_info

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

        for sp in stages_progress:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
            stage_sessions_progress = await get_stage_session_progress(session, sp.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = False
            if sp.is_opened and stage_sessions_progress:
                all_sessions_completed = True
                for session_prog in stage_sessions_progress:
                    if hasattr(session_prog.session, 'tests') and session_prog.session.tests:
                        session_tests_passed = True
                        for test in session_prog.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                session_tests_passed = False
                                break
                        if not session_tests_passed:
                            all_sessions_completed = False
                            break
            
            if all_sessions_completed and stage_sessions_progress:
                stage_icon = "‚úÖ"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            elif sp.is_opened:
                stage_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            else:
                stage_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                
            full_trajectory_info += f"{stage_icon}<b>–≠—Ç–∞–ø {sp.stage.order_number}:</b> {sp.stage.name}\n"

            for session_progress in stage_sessions_progress:
                if session_progress.session:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
                        all_tests_passed = False
                        if sp.is_opened:
                            all_tests_passed = True
                            for test in session_progress.session.tests:
                                test_result = await get_user_test_result(session, user.id, test.id)
                                if not (test_result and test_result.is_passed):
                                    all_tests_passed = False
                                    break
                        
                        if all_tests_passed and sp.is_opened:
                            session_icon = "‚úÖ"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                        elif sp.is_opened:
                            session_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                        else:
                            session_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    else:
                        session_icon = "‚õîÔ∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                        
                    full_trajectory_info += f"{session_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                    if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                        for test in session_progress.session.tests:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if test_result and test_result.is_passed:
                                test_icon = "‚úÖ"  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                            elif sp.is_opened:
                                test_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                            else:
                                test_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                            test_number = len([t for t in session_progress.session.tests if t.id <= test.id])
                            full_trajectory_info += f"{test_icon}<b>–¢–µ—Å—Ç {test_number}:</b> {test.name}\n"
                    else:
                        full_trajectory_info += "   üìù –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                else:
                    full_trajectory_info += "‚õîÔ∏è<b>–°–µ—Å—Å–∏—è:</b> –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
            full_trajectory_info += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
        attestation = trainee_path.learning_path.attestation if trainee_path.learning_path else None
        full_trajectory_info += await format_attestation_status_simple(session, user.id, attestation)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Å—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard_buttons = []

        if tests:
            for i, test in enumerate(tests, 1):
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"–¢–µ—Å—Ç {i}",
                        callback_data=f"take_test:{session_id}:{test.id}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–µ—Å—Å–∏–π
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤—ã–±–æ—Ä—É —Å–µ—Å—Å–∏–∏)",
                callback_data=f"select_stage:{selected_session.stage_id}"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            full_trajectory_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "session_selected", f"–í—ã–±—Ä–∞–Ω–∞ —Å–µ—Å—Å–∏—è {selected_session.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Å—Å–∏–∏")
        log_user_error(callback.from_user.id, "select_session_error", str(e))


@router.callback_query(F.data.startswith("take_test:"))
async def callback_take_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        # –ü–∞—Ä—Å–∏–º callback_data: take_test:{session_id}:{test_id}
        parts = callback.data.split(":")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç —Å 3 —á–∞—Å—Ç—è–º–∏ (–∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏)
        # –§–æ—Ä–º–∞—Ç —Å 2 —á–∞—Å—Ç—è–º–∏ (–∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π) –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ test_taking.py
        if len(parts) != 3:
            return
            
        session_id = int(parts[1])
        test_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç
        from database.db import get_test_by_id
        test = await get_test_by_id(session, test_id)

        if not test:
            await callback.message.edit_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        test_info = (
            f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ</b>\n\n"
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {test.name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {test.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚ùì <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {len(test.questions) if test.questions else 0}\n"
            f"üéØ <b>–ü–æ—Ä–æ–≥:</b> {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤\n"
        )

        if test.material_link:
            material_display = test.material_link.replace("–§–∞–π–ª: ", "") if test.material_link else ""
            test_info += f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n{material_display}\n\n"
        else:
            test_info += "üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test:{test_id}"),
                InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"show_materials:{session_id}:{test_id}")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_session:{session_id}"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])

        await callback.message.edit_text(
            test_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "test_selected", f"–í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç {test.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞")
        log_user_error(callback.from_user.id, "take_test_error", str(e))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ start_test: –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ test_taking.py –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


@router.callback_query(F.data.startswith("back_to_session:"))
async def callback_back_to_session(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏"""
    try:
        await callback.answer()

        session_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_tg_id
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–µ—Å—Ç–∞–º–∏
        from database.db import get_session_with_tests
        selected_session = await get_session_with_tests(session, session_id)

        if not selected_session:
            await callback.message.edit_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
        tests = selected_session.tests if hasattr(selected_session, 'tests') and selected_session.tests else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        session_info = await format_trajectory_info(user, trainee_path, "–í–´–ë–û–† –¢–ï–°–¢–ê")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        full_trajectory_info = session_info

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã –∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

        for sp in stages_progress:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
            stage_sessions_progress = await get_stage_session_progress(session, sp.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = False
            if sp.is_opened and stage_sessions_progress:
                all_sessions_completed = True
                for session_prog in stage_sessions_progress:
                    if hasattr(session_prog.session, 'tests') and session_prog.session.tests:
                        session_tests_passed = True
                        for test in session_prog.session.tests:
                            test_result = await get_user_test_result(session, user.id, test.id)
                            if not (test_result and test_result.is_passed):
                                session_tests_passed = False
                                break
                        if not session_tests_passed:
                            all_sessions_completed = False
                            break
            
            if all_sessions_completed and stage_sessions_progress:
                stage_icon = "‚úÖ"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            elif sp.is_opened:
                stage_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            else:
                stage_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                
            full_trajectory_info += f"{stage_icon}<b>–≠—Ç–∞–ø {sp.stage.order_number}:</b> {sp.stage.name}\n"

            for session_progress in stage_sessions_progress:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                    all_tests_passed = True
                    for test in session_progress.session.tests:
                        test_result = await get_user_test_result(session, user.id, test.id)
                        if not (test_result and test_result.is_passed):
                            all_tests_passed = False
                            break
                    
                    if all_tests_passed:
                        session_icon = "‚úÖ"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                    elif sp.is_opened:
                        session_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                    else:
                        session_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                else:
                    session_icon = "‚õîÔ∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                    
                full_trajectory_info += f"{session_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                for test in session_progress.session.tests:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                    test_result = await get_user_test_result(session, user.id, test.id)
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    if test_result and test_result.is_passed and sp.is_opened:
                        test_icon = "‚úÖ"  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                    elif sp.is_opened:
                        test_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                    else:
                        test_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    test_number = len([t for t in session_progress.session.tests if t.id <= test.id])
                    full_trajectory_info += f"{test_icon}<b>–¢–µ—Å—Ç {test_number}:</b> {test.name}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
            full_trajectory_info += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
        attestation = trainee_path.learning_path.attestation if trainee_path.learning_path else None
        full_trajectory_info += await format_attestation_status_simple(session, user.id, attestation)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ—Å—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard_buttons = []

        if tests:
            for i, test in enumerate(tests, 1):
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"–¢–µ—Å—Ç {i}",
                        callback_data=f"take_test:{session_id}:{test.id}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–µ—Å—Å–∏–π
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤—ã–±–æ—Ä—É —Å–µ—Å—Å–∏–∏)",
                callback_data=f"select_stage:{selected_session.stage_id}"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            full_trajectory_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "back_to_session", f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–µ—Å—Å–∏–∏ {selected_session.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–µ—Å—Å–∏–∏")
        log_user_error(callback.from_user.id, "back_to_session_error", str(e))


@router.callback_query(F.data.startswith("show_materials:"))
async def callback_show_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    try:
        await callback.answer()

        # –ü–∞—Ä—Å–∏–º callback_data: show_materials:{session_id}:{test_id}
        parts = callback.data.split(":")
        session_id = int(parts[1])
        test_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç
        from database.db import get_test_by_id
        test = await get_test_by_id(session, test_id)

        if not test:
            await callback.message.edit_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        materials_info = (
            f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
            f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
        )

        if test.material_link:
            materials_info += f"üìé <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n{test.material_link}\n\n"
            materials_info += "üí° –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞"
        else:
            materials_info += "‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test:{test_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{session_id}:{test_id}")
            ]
        ])

        await callback.message.edit_text(
            materials_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "materials_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ {test.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        log_user_error(callback.from_user.id, "show_materials_error", str(e))


@router.callback_query(F.data.startswith("back_to_trajectory:"))
async def callback_back_to_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —ç—Ç–∞–ø–∞"""
    try:
        await callback.answer()

        user_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_id
        user = await get_user_by_id(session, user_id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        message = callback.message
        message.from_user = callback.from_user
        await cmd_trajectory(message, state, session)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(callback.from_user.id, "back_to_trajectory_error", str(e))


@router.callback_query(F.data.startswith("back_to_stage:"))
async def callback_back_to_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–µ—Å—Å–∏–∏"""
    try:
        await callback.answer()

        user_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.db import get_user_by_id
        user = await get_user_by_id(session, user_id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π —ç—Ç–∞–ø
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
        opened_stage = next((sp for sp in stages_progress if sp.is_opened and not sp.is_completed), None)

        if opened_stage:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —ç—Ç–∞–ø–∞
            callback.data = f"select_stage:{opened_stage.stage_id}"
            await callback_select_stage(callback, state, session)
        else:
            await callback.message.edit_text("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —ç—Ç–∞–ø—É")
        log_user_error(callback.from_user.id, "back_to_stage_error", str(e))


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (Task 7)

async def format_attestation_status(session, user_id, trainee_path):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
    try:
        if trainee_path and trainee_path.learning_path.attestation:
            attestation_status = await get_trainee_attestation_status(
                session, user_id, trainee_path.learning_path.attestation.id
            )
            return f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {trainee_path.learning_path.attestation.name} {attestation_status}\n\n"
        else:
            return f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚õîÔ∏è\n\n"
    except Exception as e:
        log_user_error(user_id, "format_attestation_status_error", str(e))
        return f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ‚õîÔ∏è\n\n"


async def format_attestation_status_simple(session, user_id, attestation):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        if attestation:
            attestation_status = await get_trainee_attestation_status(session, user_id, attestation.id)
            return f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} {attestation_status}\n\n"
        else:
            return f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚õîÔ∏è\n\n"
    except Exception as e:
        log_user_error(user_id, "format_attestation_status_simple_error", str(e))
        return f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ‚õîÔ∏è\n\n"


@router.callback_query(F.data == "contact_mentor")
async def callback_contact_mentor(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º'"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ —Å—Ç–∞–∂–µ—Ä–∞
        from database.db import get_user_mentor
        mentor = await get_user_mentor(session, user.id)
        
        if not mentor:
            await callback.message.edit_text(
                "‚ùå <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
                "–¢–µ–±–µ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        mentor_info = f"""üë®‚Äçüè´ <b>–¢–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫</b>

üßë <b>–ò–º—è:</b> {mentor.full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {mentor.phone_number}
üë§ <b>Username:</b> @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è</b>"""
        
        await callback.message.edit_text(
            mentor_info,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        log_user_action(user.tg_id, "mentor_contact_viewed", f"–°—Ç–∞–∂–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {mentor.full_name}")
        
    except Exception as e:
        log_user_error(callback.from_user.id, "contact_mentor_error", str(e))
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.")
