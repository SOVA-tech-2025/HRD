from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_unassigned_trainees, get_available_mentors, assign_mentor,
    get_mentor_trainees, get_trainee_mentor, check_user_permission,
    get_user_by_tg_id, get_user_by_id, get_user_test_results,
    get_test_by_id, get_all_active_tests, grant_test_access,
    get_trainee_available_tests
)
from keyboards.keyboards import (
    get_unassigned_trainees_keyboard, get_mentor_selection_keyboard,
    get_assignment_confirmation_keyboard, get_trainee_selection_keyboard,
    get_trainee_actions_keyboard, get_test_access_keyboard,
    get_tests_for_access_keyboard
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.states import MentorshipStates, TraineeManagementStates
from utils.logger import log_user_action, log_user_error
from handlers.auth import check_auth

router = Router()

@router.message(Command("assign_mentor"))
async def cmd_assign_mentor_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /assign_mentor"""
    await cmd_assign_mentor(message, state, session)

@router.message(Command("my_trainees"))
async def cmd_my_trainees_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_trainees"""
    await cmd_mentor_trainees(message, state, session)

@router.message(Command("my_mentor"))
async def cmd_my_mentor_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_mentor"""
    await cmd_my_mentor(message, state, session)

@router.message(F.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
async def cmd_assign_mentor(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "assign_mentors")
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.")
        return
    
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await message.answer(
            "‚úÖ <b>–í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ –°—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤\n\n"
        f"üéØ <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</b> –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞–∂–µ—Ä—É –¥–ª—è:\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–º–æ—â–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º\n\n"
        f"üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:</b>",
        parse_mode="HTML",
        reply_markup=get_unassigned_trainees_keyboard(unassigned_trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_selection)
    
    log_user_action(message.from_user.id, message.from_user.username, "opened mentor assignment")

@router.message(F.text == "–ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫")
async def cmd_my_mentor(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    mentor = await get_trainee_mentor(session, user.id)
    
    if not mentor:
        await message.answer(
            "üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üë®‚Äçüè´ <b>–í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫</b>\n\n"
        f"üë§ <b>–§–ò–û:</b> {mentor.full_name}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {mentor.phone_number}\n"
        f"üìß <b>Telegram:</b> @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏!",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed mentor info")

@router.message(F.text == "–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã")
async def cmd_mentor_trainees(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await message.answer(
            "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    trainees_list = "\n".join([
        f"{i+1}. <b>{trainee.full_name}</b>\n"
        f"   üìû {trainee.phone_number}\n"
        f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y')}"
        for i, trainee in enumerate(trainees)
    ])
    
    await message.answer(
        f"üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n{trainees_list}",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed mentor trainees")

@router.callback_query(MentorshipStates.waiting_for_trainee_selection, F.data.startswith("unassigned_trainee:"))
async def process_trainee_selection_for_assignment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    trainee_id = int(callback.data.split(':')[1])
    
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.message.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    available_mentors = await get_available_mentors(session)
    
    if not available_mentors:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' –∏–ª–∏ '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π', "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await state.update_data(selected_trainee_id=trainee_id)
    
    mentors_list = "\n".join([
        f"üë§ <b>{mentor.full_name}</b>\n"
        f"   üìû {mentor.phone_number}\n"
        f"   üìß @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        for mentor in available_mentors[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
    ])
    
    if len(available_mentors) > 5:
        mentors_list += f"\n... –∏ –µ—â–µ {len(available_mentors) - 5} –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"
    
    await callback.message.edit_text(
        f"üë§ <b>–í—ã–±—Ä–∞–Ω —Å—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y')}\n\n"
        f"üë®‚Äçüè´ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏:</b>\n\n{mentors_list}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_mentor_selection_keyboard(available_mentors)
    )
    
    await state.set_state(MentorshipStates.waiting_for_mentor_selection)
    await callback.answer()

@router.callback_query(MentorshipStates.waiting_for_mentor_selection, F.data.startswith("mentor:"))
async def process_mentor_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    mentor_id = int(callback.data.split(':')[1])
    
    data = await state.get_data()
    trainee_id = data.get('selected_trainee_id')
    
    trainee = await get_user_by_id(session, trainee_id)
    mentor = await get_user_by_id(session, mentor_id)
    
    if not trainee or not mentor:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–∂–µ—Ä–∞—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    current_trainees = await get_mentor_trainees(session, mentor_id)
    trainees_count = len(current_trainees)
    
    confirmation_text = f"""ü§ù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>

üë§ <b>–°—Ç–∞–∂–µ—Ä:</b>
   ‚Ä¢ –§–ò–û: {trainee.full_name}
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {trainee.phone_number}
   ‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {trainee.registration_date.strftime('%d.%m.%Y')}

üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b>
   ‚Ä¢ –§–ò–û: {mentor.full_name}
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {mentor.phone_number}
   ‚Ä¢ –¢–µ–∫—É—â–∏—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤: {trainees_count}

‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:"""
    
    await callback.message.edit_text(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=get_assignment_confirmation_keyboard(mentor_id, trainee_id)
    )
    
    await state.set_state(MentorshipStates.waiting_for_assignment_confirmation)
    await callback.answer()

@router.callback_query(MentorshipStates.waiting_for_assignment_confirmation, F.data.startswith("confirm_assignment:"))
async def process_assignment_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    parts = callback.data.split(':')
    mentor_id = int(parts[1])
    trainee_id = int(parts[2])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    
    mentorship = await assign_mentor(session, mentor_id, trainee_id, user.id, bot)
    
    if mentorship:
        trainee = await get_user_by_id(session, trainee_id)
        mentor = await get_user_by_id(session, mentor_id)
        
        success_text = f"""‚úÖ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>

üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}
üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {mentor.full_name}
üìÖ <b>–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {mentorship.assigned_date.strftime('%d.%m.%Y %H:%M')}
üë§ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> {user.full_name}

üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:</b>
‚Ä¢ ‚úÖ –°—Ç–∞–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
‚Ä¢ üìû –¢–µ–ª–µ—Ñ–æ–Ω: {mentor.phone_number}
‚Ä¢ üìß Telegram: @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üéØ –°—Ç–∞–∂–µ—Ä –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!"""
        
        await callback.message.edit_text(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_another_mentor")],
                [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "assigned mentor", 
            {"mentor_id": mentor_id, "trainee_id": trainee_id}
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –°—Ç–∞–∂–µ—Ä —É–∂–µ –∏–º–µ–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="assign_another_mentor")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        log_user_error(
            callback.from_user.id, 
            callback.from_user.username, 
            "failed to assign mentor", 
            {"mentor_id": mentor_id, "trainee_id": trainee_id}
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_assignment")
async def process_cancel_assignment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        "‚ùå <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_another_mentor")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "assign_another_mentor")
async def process_assign_another_mentor(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await callback.message.edit_text(
            "‚úÖ <b>–í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.\n"
            "–ù–æ–≤—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:",
        parse_mode="HTML",
        reply_markup=get_unassigned_trainees_keyboard(unassigned_trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_selection)
    await callback.answer()

@router.callback_query(F.data == "view_all_mentors")
async def process_view_all_mentors(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    mentors = await get_available_mentors(session)
    
    if not mentors:
        await callback.message.edit_text(
            "üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏.\n"
            "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' –∏–ª–∏ '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π'.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    mentors_info = []
    for mentor in mentors:
        trainees = await get_mentor_trainees(session, mentor.id)
        mentors_info.append(
            f"üë§ <b>{mentor.full_name}</b>\n"
            f"   üìû {mentor.phone_number}\n"
            f"   üìß @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üë• –°—Ç–∞–∂–µ—Ä–æ–≤: {len(trainees)}"
        )
    
    mentors_list = "\n\n".join(mentors_info)
    
    await callback.message.edit_text(
        f"üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{len(mentors)}</b>\n\n"
        f"{mentors_list}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_another_mentor")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def process_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

@router.message(F.text == "–°–ø–∏—Å–æ–∫ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤")
async def cmd_list_mentors(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "view_mentorship")
    if not has_permission:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ.")
        return
    
    mentors = await get_available_mentors(session)
    
    if not mentors:
        await message.answer(
            "üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏.\n"
            "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' –∏–ª–∏ '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π'.",
            parse_mode="HTML"
        )
        return
    
    mentors_info = []
    total_trainees = 0
    
    for mentor in mentors:
        trainees = await get_mentor_trainees(session, mentor.id)
        trainees_count = len(trainees)
        total_trainees += trainees_count
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if trainees:
            trainees_names = ", ".join([t.full_name for t in trainees[:3]])
            if trainees_count > 3:
                trainees_names += f" –∏ –µ—â–µ {trainees_count - 3}"
            trainees_info = f"–°—Ç–∞–∂–µ—Ä—ã: {trainees_names}"
        else:
            trainees_info = "–°—Ç–∞–∂–µ—Ä–æ–≤ –Ω–µ—Ç"
        
        mentors_info.append(
            f"üë§ <b>{mentor.full_name}</b>\n"
            f"   üìû {mentor.phone_number}\n"
            f"   üìß @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üë• {trainees_info}"
        )
    
    mentors_list = "\n\n".join(mentors_info)
    
    await message.answer(
        f"üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤: {len(mentors)}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤ –ø–æ–¥ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ–º: {total_trainees}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {total_trainees/len(mentors):.1f}\n\n"
        f"{mentors_list}",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed mentors list")

@router.message(F.text == "–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def cmd_list_new_users(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "view_trainee_list")
    if not has_permission:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–æ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è "–Ω–æ–≤—ã–º–∏")
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            "‚úÖ –í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!\n"
            "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        return
    
    users_info = []
    for i, trainee in enumerate(unassigned_trainees, 1):
        users_info.append(
            f"{i}. <b>{trainee.full_name}</b>\n"
            f"   üìû {trainee.phone_number}\n"
            f"   üìß @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}"
        )
    
    users_list = "\n\n".join(users_info)
    
    await message.answer(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n\n"
        f"{users_list}\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞' –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —ç—Ç–∏–º —Å—Ç–∞–∂–µ—Ä–∞–º.",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed new users list")

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

@router.callback_query(F.data == "my_trainees")
async def process_my_trainees_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    trainees_list = "\n\n".join([
        f"{i+1}. <b>{trainee.full_name}</b>\n"
        f"   üìû {trainee.phone_number}\n"
        f"   üìß @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y')}"
        for i, trainee in enumerate(trainees)
    ])
    
    await callback.message.edit_text(
        f"üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n{trainees_list}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º", callback_data="grant_test_access")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "grant_test_access")
async def process_grant_test_access_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_permission = await check_user_permission(session, user.id, "grant_test_access")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = await get_all_active_tests(session)
    
    if not tests:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    tests_info = "\n".join([
        f"üìã <b>{test.name}</b>"
        for test in tests[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–µ—Å—Ç–æ–≤
    ])
    
    if len(tests) > 5:
        tests_info += f"\n... –∏ –µ—â–µ {len(tests) - 5} —Ç–µ—Å—Ç–æ–≤"
    
    await callback.message.edit_text(
        f"üìä <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º</b>\n\n"
        f"üë• <b>–í–∞—à–∏—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤:</b> {len(trainees)}\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:</b> {len(tests)}\n\n"
        f"<b>–¢–µ—Å—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n{tests_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–∞–º:",
        parse_mode="HTML",
        reply_markup=get_tests_for_access_keyboard(tests)
    )
    await callback.answer()

@router.callback_query(F.data == "my_mentor_info")
async def process_my_mentor_info(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    mentor = await get_trainee_mentor(session, user.id)
    
    if not mentor:
        await callback.message.edit_text(
            "üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    mentor_info = f"""üë®‚Äçüè´ <b>–í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫</b>

üßë <b>–§–ò–û:</b> {mentor.full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {mentor.phone_number}
üìß <b>Telegram:</b> @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –û–±—Å—É–∂–¥–∞–π—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏  
‚Ä¢ –ü—Ä–æ—Å–∏—Ç–µ –ø–æ–º–æ—â—å —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å username)
    if mentor.username:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É", 
                url=f"https://t.me/{mentor.username}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã", callback_data="available_tests")
    ])
    
    await callback.message.edit_text(
        mentor_info,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("trainee_results:"))
async def process_trainee_results(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞"""
    trainee_id = int(callback.data.split(':')[1])
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    results = await get_user_test_results(session, trainee_id)
    
    if not results:
        await callback.message.edit_text(
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–∂–µ—Ä–∞: {trainee.full_name}</b>\n\n"
            "–≠—Ç–æ—Ç —Å—Ç–∞–∂–µ—Ä –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
        await callback.answer()
        return

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed_count = sum(1 for r in results if r.is_passed)
    avg_score = sum(r.score for r in results) / len(results)
    
    results_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–∂–µ—Ä–∞: {trainee.full_name}</b>\n\n"
    results_text += f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    results_text += f"  ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_count}/{len(results)}\n"
    results_text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}\n\n"
    
    results_text += "<b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
    for res in results:
        test = await get_test_by_id(session, res.test_id)
        status = "‚úÖ" if res.is_passed else "‚ùå"
        results_text += f"{status} <b>{test.name if test else '–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω'}:</b> {res.score}/{res.max_possible_score} –±–∞–ª–ª–æ–≤\n"

    await callback.message.edit_text(
        results_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(MentorshipStates.waiting_for_trainee_action, F.data.startswith("trainee:"))
async def process_trainee_action_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
    trainee_id = int(callback.data.split(':')[1])
    
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ
    mentor = await get_trainee_mentor(session, trainee_id)
    results = await get_user_test_results(session, trainee_id)
    passed_count = sum(1 for r in results if r.is_passed)
    avg_score = sum(r.score for r in results) / len(results) if results else 0
    
    trainee_info = f"""üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–∂–µ—Ä–∞</b>

üßë <b>–§–ò–û:</b> {trainee.full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}
üìß <b>Telegram:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}

üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:</b>
‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_count}/{len(results)}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(
        trainee_info,
        parse_mode="HTML",
        reply_markup=get_trainee_actions_keyboard(trainee_id)
    )
    
    await state.clear()
    await callback.answer()

# =================================
# –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –¢–ï–°–¢–û–í
# =================================

@router.callback_query(F.data.startswith("add_test_access:"))
async def process_add_test_access(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É —Å—Ç–∞–∂–µ—Ä—É"""
    trainee_id = int(callback.data.split(':')[1])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    has_permission = await check_user_permission(session, user.id, "grant_test_access")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = await get_all_active_tests(session)
    
    if not tests:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
        await callback.answer()
        return
    
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.message.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å—Ç–∞–∂–µ—Ä—É</b>\n\n"
        f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
        f"üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {len(tests)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
        parse_mode="HTML",
        reply_markup=get_test_access_keyboard(tests, trainee_id)
    )
    
    await state.set_state(TraineeManagementStates.waiting_for_test_access_grant)
    await callback.answer()

@router.callback_query(TraineeManagementStates.waiting_for_test_access_grant, F.data.startswith("grant_access:"))
async def process_grant_access_to_trainee(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ—Å—Ç—É"""
    parts = callback.data.split(':')
    trainee_id = int(parts[1])
    test_id = int(parts[2])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    test = await get_test_by_id(session, test_id)
    trainee = await get_user_by_id(session, trainee_id)
    
    if not all([user, test, trainee]):
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success = await grant_test_access(session, trainee_id, test_id, user.id, bot)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n"
            f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {test.threshold_score}/{test.max_score}\n\n"
            f"üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n"
            f"–°—Ç–∞–∂–µ—Ä {trainee.full_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–µ—Å—Ç", callback_data=f"add_test_access:{trainee_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "granted test access via trainee menu", 
            {"test_id": test_id, "trainee_id": trainee_id}
        )
    else:
        await callback.message.edit_text(
            f"‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
            f"–≠—Ç–æ—Ç —Å—Ç–∞–∂–µ—Ä —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data=f"add_test_access:{trainee_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("trainee_profile:"))
async def process_trainee_profile(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–∂–µ—Ä–∞"""
    trainee_id = int(callback.data.split(':')[1])
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    mentor = await get_trainee_mentor(session, trainee_id)
    results = await get_user_test_results(session, trainee_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    available_tests = await get_trainee_available_tests(session, trainee_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed_count = sum(1 for r in results if r.is_passed)
    failed_count = len(results) - passed_count
    avg_score = sum(r.score for r in results) / len(results) if results else 0
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç
    last_test_info = ""
    if results:
        last_result = results[0]  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ
        last_test = await get_test_by_id(session, last_result.test_id)
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if last_result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        last_test_info = f"""
üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç:</b>
   ‚Ä¢ {last_test.name if last_test else '–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω'}
   ‚Ä¢ {status} ({last_result.score}/{last_result.max_possible_score} –±–∞–ª–ª–æ–≤)
   ‚Ä¢ {last_result.created_date.strftime('%d.%m.%Y %H:%M')}"""
    
    profile_text = f"""üë§ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–∂–µ—Ä–∞</b>

üßë <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
   ‚Ä¢ –§–ò–û: {trainee.full_name}
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {trainee.phone_number}
   ‚Ä¢ Telegram: @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
   ‚Ä¢ ID: {trainee.tg_id}
   ‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}

üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ:</b>
   ‚Ä¢ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(available_tests)}
   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}
   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_count}
   ‚Ä¢ –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed_count}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}{last_test_info}

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {passed_count}/{len(available_tests)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"""

    await callback.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"trainee:{trainee_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_trainees")
async def process_back_to_trainees(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    trainees_list = "\n\n".join([
        f"üë§ <b>{trainee.full_name}</b>\n"
        f"   üìû {trainee.phone_number}\n"
        f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y')}"
        for trainee in trainees
    ])
    
    await callback.message.edit_text(
        f"üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
        f"–í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤: <b>{len(trainees)}</b>\n\n{trainees_list}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_trainee_selection_keyboard(trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_action)
    await callback.answer()

@router.callback_query(F.data == "assign_mentor")
async def process_assign_mentor_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    has_permission = await check_user_permission(session, user.id, "assign_mentors")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await callback.message.edit_text(
            "‚úÖ <b>–í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ –°—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤\n\n"
        f"üéØ <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</b> –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞–∂–µ—Ä—É –¥–ª—è:\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–º–æ—â–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º\n\n"
        f"üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:</b>",
        parse_mode="HTML",
        reply_markup=get_unassigned_trainees_keyboard(unassigned_trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_selection)
    await callback.answer()

@router.callback_query(F.data == "new_trainees_list")
async def process_new_trainees_list_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    has_permission = await check_user_permission(session, user.id, "view_trainee_list")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–∂—ë—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–æ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è "–Ω–æ–≤—ã–º–∏")
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤</b>\n\n"
            "‚úÖ –í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!\n"
            "–ù–æ–≤—ã–µ —Å—Ç–∞–∂—ë—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_mentor")],
                [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    users_info = []
    for i, trainee in enumerate(unassigned_trainees, 1):
        users_info.append(
            f"{i}. <b>{trainee.full_name}</b>\n"
            f"   üìû {trainee.phone_number}\n"
            f"   üìß @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}"
        )
    
    users_list = "\n\n".join(users_info)
    
    await callback.message.edit_text(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤</b>\n\n"
        f"–°—Ç–∞–∂—ë—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n\n"
        f"{users_list}\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —ç—Ç–∏–º —Å—Ç–∞–∂—ë—Ä–∞–º.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_mentor")],
            [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()