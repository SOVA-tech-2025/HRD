from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
import json
import random
from datetime import datetime



from database.db import (
    get_trainee_available_tests, get_user_available_tests, get_user_test_results, check_user_permission,
    get_user_by_tg_id, get_test_by_id, check_test_access, get_user_test_result,
    get_test_questions, save_test_result, get_user_test_attempts_count, can_user_take_test,
    get_trainee_learning_path, get_trainee_stage_progress, get_stage_session_progress,
    complete_session_for_trainee, complete_stage_for_trainee, get_user_by_id,
    get_trainee_attestation_status, get_user_roles, get_employee_tests_from_recruiter,
    get_user_mentor
)
from handlers.mentorship import get_days_word
from handlers.trainee_trajectory import format_trajectory_info
from database.models import InternshipStage, TestResult
from sqlalchemy import select
from keyboards.keyboards import get_simple_test_selection_keyboard, get_test_start_keyboard, get_test_selection_for_taking_keyboard, get_mentor_contact_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.states import TestTakingStates
from utils.logger import log_user_action, log_user_error, logger
from handlers.auth import check_auth

router = Router()

@router.message(Command("my_tests"))
async def cmd_my_tests_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_tests"""
    await cmd_trajectory_tests(message, state, session)

@router.message(Command("all_tests"))
async def cmd_all_tests_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all_tests"""
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã all_tests –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é cmd_list_tests –∏–∑ tests.py
    # –ù–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ—ë —Ç—É–¥–∞, –≥–¥–µ –æ–Ω–∞ –Ω—É–∂–Ω–∞
    from handlers.tests import cmd_list_tests
    await cmd_list_tests(message, state, session)

@router.message(F.text.in_(["–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã", "–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ üó∫Ô∏è"]))
async def cmd_trajectory_tests(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "take_tests")
    if not has_permission:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞), –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
    available_tests = await get_trainee_available_tests(session, user.id)
    
    if not available_tests:
        await message.answer(
            "üó∫Ô∏è <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n"
            "–û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.",
            parse_mode="HTML"
        )
        return
    
    tests_list = []
    for i, test in enumerate(available_tests, 1):
        stage_info = ""
        if test.stage_id:
            stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
            stage_obj = stage.scalar_one_or_none()
            if stage_obj:
                stage_info = f" | –≠—Ç–∞–ø: {stage_obj.name}"
        
        materials_info = " | üìö –ï—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if test.material_link else ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        test_result = await get_user_test_result(session, user.id, test.id)
        if test_result and test_result.is_passed:
            status_info = f" | ‚úÖ –ü—Ä–æ–π–¥–µ–Ω ({test_result.score}/{test_result.max_possible_score})"
        else:
            status_info = " | üìã –î–æ—Å—Ç—É–ø–µ–Ω"
        
        tests_list.append(
            f"<b>{i}. {test.name}</b>\n"
            f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤{stage_info}{materials_info}{status_info}\n"
            f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
    
    tests_display = "\n\n".join(tests_list)
    
    await message.answer(
        f"üó∫Ô∏è <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>{len(available_tests)}</b> —Ç–µ—Å—Ç–∞–º:\n\n"
        f"{tests_display}\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–¥–∞—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!",
        parse_mode="HTML",
        reply_markup=get_test_selection_for_taking_keyboard(available_tests)
    )
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç "taking" –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞
    await state.update_data(test_context='taking')
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    
    log_user_action(message.from_user.id, message.from_user.username, "opened trajectory tests")


async def format_my_tests_display(
    session: AsyncSession,
    user,
    available_tests: list
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ "–ú–æ–∏ —Ç–µ—Å—Ç—ã"
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        available_tests: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    
    Returns:
        tuple: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = await get_user_roles(session, user.id)
    role_names = [role.name for role in user_roles]
    is_trainee = "–°—Ç–∞–∂–µ—Ä" in role_names
    is_mentor = "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫" in role_names
    is_employee = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" in role_names
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests_list = []
    for i, test in enumerate(available_tests, 1):
        test_result = await get_user_test_result(session, user.id, test.id)
        if test_result and test_result.is_passed:
            status = f"–ü—Ä–æ–π–¥–µ–Ω ({test_result.score}/{test_result.max_possible_score} –±–∞–ª–ª–æ–≤) üèÜ"
        else:
            status = "–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è ‚úÖ"
        
        tests_list.append(
            f"<b>{i}. {test.name}</b>\n"
            f"   –ü–æ—Ä–æ–≥: {int(test.threshold_score)}/{int(test.max_score)} –±–∞–ª–ª–æ–≤\n"
            f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            f"   –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
    
    tests_display = "\n\n".join(tests_list)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–ª–∏
    if is_trainee:
        role_title = "üë§ <b>–°—Ç–∞–∂–µ—Ä:</b>"
    elif is_mentor:
        role_title = "üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b>"
    elif is_employee:
        role_title = "üë®‚Äçüíº <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b>"
    else:
        role_title = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üìã <b>–ú–æ–∏ —Ç–µ—Å—Ç—ã</b>\n\n"
        f"{role_title} {user.full_name}\n"
        f"üìä <b>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</b> {len(available_tests)}\n\n"
        f"{tests_display}\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
    )
    
    keyboard = get_test_selection_for_taking_keyboard(available_tests)
    
    return message_text, keyboard


@router.message(F.text.in_(["–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã"]))
async def cmd_trainee_broadcast_tests(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã' –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ - —Ç–µ—Å—Ç—ã –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ + –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã
        has_permission = await check_user_permission(session, user.id, "take_tests")
        if not has_permission:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –í–ú–ï–°–¢–ï: –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—ã–ª–∫—É + –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏)
        available_tests = await get_employee_tests_from_recruiter(session, user.id, exclude_completed=False)
        
        if not available_tests:
            no_tests_message = (
                "‚ùå –ü–æ–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç\n"
                "–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            )
            await message.answer(
                no_tests_message, 
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text, keyboard = await format_my_tests_display(session, user, available_tests)
        
        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç "taking" –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        await state.update_data(test_context='taking')
        await state.set_state(TestTakingStates.waiting_for_test_selection)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_user_action(user.tg_id, "my_tests_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –º–æ–∏ —Ç–µ—Å—Ç—ã: {len(available_tests)}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        log_user_error(message.from_user.id, "my_tests_error", str(e))

async def show_user_test_scores(message: Message, session: AsyncSession) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "view_test_results")
    if not has_permission:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_roles = [role.name for role in user.roles]
    if "–°—Ç–∞–∂–µ—Ä" in user_roles:
        user_role = "—Å—Ç–∞–∂–µ—Ä"
    elif "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫" in user_roles:
        user_role = "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
    else:
        user_role = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    test_results = await get_user_test_results(session, user.id)
    
    if not test_results:
        await message.answer(
            f"üìä <b>–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n\n"
            f"–¢—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç–æ–≤.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã' –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    results_list = []
    total_score = 0
    passed_count = 0
    total_tests_taken = len(test_results)
    
    for result in test_results:
        test = await get_test_by_id(session, result.test_id)
        status = "–ø—Ä–æ–π–¥–µ–Ω" if result.is_passed else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
        percentage = (result.score / result.max_possible_score * 100) if result.max_possible_score > 0 else 0
        
        results_list.append(
            f"<b>–¢–µ—Å—Ç:</b> {test.name if test else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç'}\n"
            f"‚Ä¢ –ë–∞–ª–ª—ã: {result.score}/{result.max_possible_score} ({percentage:.1f}%)\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚Ä¢ –î–∞—Ç–∞: {result.created_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {(result.end_time - result.start_time).total_seconds():.0f} —Å–µ–∫"
        )
        
        total_score += result.score
        if result.is_passed:
            passed_count += 1
    
    results_text = "\n\n".join(results_list)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    success_rate = (passed_count / total_tests_taken * 100) if total_tests_taken > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    keyboard = []
    if user_role == "—Å—Ç–∞–∂–µ—Ä":
        # –î–ª—è —Å—Ç–∞–∂–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
        mentor = await get_user_mentor(session, user.id)
        if mentor:
            keyboard.append([InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É", url=f"tg://user?id={mentor.tg_id}")])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    days_in_status = (datetime.now() - user.role_assigned_date).days
    days_text = get_days_word(days_in_status)
    
    if user_role == "—Å—Ç–∞–∂–µ—Ä":
        context_info = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è<b>–°—Ç–∞–∂–µ—Ä:</b> {user.full_name}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"<b>–í —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–∞–∂–µ—Ä–∞:</b> {days_in_status} {days_text}\n"
            f"<b>–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {user.internship_object.name if user.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {user.work_object.name if user.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        )
    else:
        context_info = (
            f"üë®‚Äçüè´<b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {user.full_name}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"<b>–í —Å—Ç–∞—Ç—É—Å–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:</b> {days_in_status} {days_text}\n"
            f"<b>–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {user.internship_object.name if user.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {user.work_object.name if user.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == "—Å—Ç–∞–∂–µ—Ä":
        message_text = (
            f"{context_info}"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_count}/{total_tests_taken}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n"
            f"üßæ <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n{results_text}\n\n"
            f"üí° <b>–°–æ–≤–µ—Ç:</b>\n–û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–∞–º!"
        )
    else:
        message_text = (
            f"{context_info}"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_count}/{total_tests_taken}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n"
            f"üßæ <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n{results_text}\n\n"
            f"üí° <b>–°–æ–≤–µ—Ç:</b>\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ —Å–≤–æ–∏–º —Å—Ç–∞–∂–µ—Ä–∞–º!"
        )
    
    await message.answer(
        message_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
    )
    
    log_user_action(message.from_user.id, message.from_user.username, f"viewed test results as {user_role}")


@router.message(F.text.in_(["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã", "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã üìä"]))
async def cmd_view_scores(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞)"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    await show_user_test_scores(message, session)

@router.callback_query(TestTakingStates.waiting_for_test_selection, F.data.startswith("test:"))
async def process_test_selection_for_taking(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
    user = await get_user_by_tg_id(session, callback.from_user.id)
    has_access = await check_test_access(session, user.id, test_id)
    
    if not has_access:
        await callback.message.edit_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É. –û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts_count = await get_user_test_attempts_count(session, user.id, test_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    existing_result = await get_user_test_result(session, user.id, test_id)
    
    test_info = f"""üìå <b>{test.name}</b>

<b>–ü–æ—Ä–æ–≥:</b> {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤

{test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ç–µ—Å—Ç—É"""
    
    await callback.message.edit_text(
        test_info,
        parse_mode="HTML",
        reply_markup=get_test_start_keyboard(test_id, bool(existing_result))
    )
    
    await state.update_data(selected_test_id=test_id)
    await state.set_state(TestTakingStates.waiting_for_test_start)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "selected test for taking", 
        {"test_id": test_id}
    )

async def start_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession, test_id: int):
    """–§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
    # –ü–µ—Ä–µ–¥–∞–µ–º test_id –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è callback.data
    await process_start_test(callback, state, session, test_id)


async def process_start_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession, test_id: int = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    if test_id is None:
        test_id = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.edit_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (—Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ–ø—ã—Ç–æ–∫)
    can_take, error_message = await can_user_take_test(session, user.id, test_id)
    if not can_take:
        attempts_count = await get_user_test_attempts_count(session, user.id, test_id)
        attempts_info = ""
        if test.max_attempts > 0:
            attempts_info = f"\nüî¢ <b>–ü–æ–ø—ã—Ç–∫–∏:</b> {attempts_count}/{test.max_attempts}"
        
        await callback.message.edit_text(
            f"üö´ <b>–¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n"
            f"‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}{attempts_info}\n\n"
            f"üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            f"{'‚Ä¢ –û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫' if test.max_attempts > 0 else '‚Ä¢ –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑'}\n"
            f"‚Ä¢ –ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
            ])
        )
        await state.clear()
        await callback.answer()
        return
    
    questions = await get_test_questions(session, test_id)
    if not questions:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.")
        await state.clear()
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
    questions_list = list(questions)
    if test.shuffle_questions:
        random.shuffle(questions_list)

    await state.update_data(
        test_id=test_id,
        questions=questions_list,
        current_question_index=0,
        user_answers={},
        answers_details=[],
        start_time=datetime.now(),
        shuffle_enabled=test.shuffle_questions,
        user_id=callback.from_user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    )

    await show_question(callback.message, state)
    await callback.answer()

async def show_question(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    questions = data['questions']
    index = data['current_question_index']
    shuffle_enabled = data.get('shuffle_enabled', False)
    
    question = questions[index]
    
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(question_start_time=datetime.now())
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_options = None
    keyboard = []
    
    if question.question_type == 'single_choice':
        options = list(question.options)
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        if shuffle_enabled:
            random.shuffle(options)
        
        current_options = options
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        await state.update_data(current_options_order=options)
        
        for i, option in enumerate(options):
            keyboard.append([InlineKeyboardButton(text=option, callback_data=f"answer:{i}")])
    elif question.question_type == 'multiple_choice':
        options = list(question.options)
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        if shuffle_enabled:
            random.shuffle(options)
        
        current_options = options
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        await state.update_data(current_options_order=options)
        
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
    elif question.question_type == 'yes_no':
        keyboard.append([
            InlineKeyboardButton(text="üëç –î–∞", callback_data="answer:–î–∞"),
            InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="answer:–ù–µ—Ç")
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"cancel_test:{question.test_id}")])

    question_text = f"<b>–í–æ–ø—Ä–æ—Å {index + 1}/{len(questions)}:</b>\n\n{question.question_text}"
    
    if question.question_type == 'text' or question.question_type == 'number':
        question_text += "\n\n<i>–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>"
    elif question.question_type == 'multiple_choice':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        options_text = "\n".join([f"{i+1}. {option}" for i, option in enumerate(current_options)])
        question_text += f"\n\n<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n{options_text}"
        question_text += "\n\n<i>–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3)</i>"

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        sent_message = await message.edit_text(
            question_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(last_bot_message_id=sent_message.message_id)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await message.answer(
            question_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        await state.update_data(last_bot_message_id=sent_message.message_id)
    
    await state.set_state(TestTakingStates.taking_test)

@router.message(TestTakingStates.taking_test)
async def process_text_answer(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ, —á–∏—Å–ª–æ–≤–æ–≥–æ –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    bot = message.bot  # –ü–æ–ª—É—á–∞–µ–º bot –∏–∑ message
    data = await state.get_data()
    questions = data['questions']
    index = data['current_question_index']
    question = questions[index]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    start_time = data.get('question_start_time', datetime.now())
    time_spent = (datetime.now() - start_time).total_seconds()

    user_answers = data.get('user_answers', {})
    answers_details = data.get('answers_details', [])
    
    user_answer = message.text.strip()
    
    if question.question_type == 'number':
        try:
            float(user_answer)
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
            return
    elif question.question_type == 'multiple_choice':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        current_options = data.get('current_options_order', question.options)
        selected_answers = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞
            parts = [part.strip() for part in user_answer.split(',')]
            indices = [int(part) - 1 for part in parts]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            for idx in indices:
                if 0 <= idx < len(current_options):
                    selected_answers.append(current_options[idx])
            
            if len(selected_answers) != len(indices):
                raise ValueError("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–º–µ—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                
        except (ValueError, IndexError):
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            parts = [part.strip() for part in user_answer.split(',')]
            selected_answers = []
            
            for part in parts:
                # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                matching_option = None
                for option in current_options:
                    if part.lower() == option.lower():  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                        matching_option = option
                        break
                
                if matching_option:
                    selected_answers.append(matching_option)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if not selected_answers:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏:\n"
                    "‚Ä¢ –ù–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3)\n"
                    "‚Ä¢ –ò–ª–∏ —Å–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                )
                return
        
        user_answer = selected_answers

    user_answers[index] = user_answer
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    is_correct = False
    if question.question_type == 'multiple_choice':
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
        try:
            correct_answers = json.loads(question.correct_answer) if isinstance(question.correct_answer, str) else question.correct_answer
            is_correct = set(user_answer) == set(correct_answers)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question.id}: {e}")
            is_correct = user_answer == question.correct_answer
    else:
        is_correct = user_answer == question.correct_answer
    
    answers_details.append({
        "question_id": question.id,
        "answer": user_answer,
        "is_correct": is_correct,
        "time_spent": time_spent
    })
    
    await state.update_data(user_answers=user_answers, answers_details=answers_details)
    
    await process_next_step(message, state, session, bot)

@router.callback_query(TestTakingStates.taking_test, F.data.startswith("answer:"))
async def process_answer_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –≤—ã–±–æ—Ä–æ–º"""
    bot = callback.message.bot  # –ü–æ–ª—É—á–∞–µ–º bot –∏–∑ callback
    data = await state.get_data()
    questions = data['questions']
    index = data['current_question_index']
    question = questions[index]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    start_time = data.get('question_start_time', datetime.now())
    time_spent = (datetime.now() - start_time).total_seconds()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user_answers = data.get('user_answers', {})
    answers_details = data.get('answers_details', [])
    
    if question.question_type == 'single_choice':
        selected_option_index = int(callback.data.split(':')[1])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        current_options = data.get('current_options_order', question.options)
        user_answers[index] = current_options[selected_option_index]
    elif question.question_type == 'yes_no':
        user_answers[index] = callback.data.split(':')[1]
    elif question.question_type == 'multiple_choice':
        # Multiple choice –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        await callback.answer("‚ùå –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ (multiple_choice –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞)
    is_correct = user_answers[index] == question.correct_answer
    
    answers_details.append({
        "question_id": question.id,
        "answer": user_answers[index],
        "is_correct": is_correct,
        "time_spent": time_spent
    })

    await state.update_data(user_answers=user_answers, answers_details=answers_details)
    
    await process_next_step(callback.message, state, session, bot)
    await callback.answer()

async def process_next_step(message: Message, state: FSMContext, session: AsyncSession, bot=None):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç"""
    data = await state.get_data()
    index = data['current_question_index']
    questions = data['questions']

    new_index = index + 1
    if new_index < len(questions):
        await state.update_data(current_question_index=new_index)
        await show_question(message, state)
    else:
        await finish_test(message, state, session, bot)

async def finish_test(message: Message, state: FSMContext, session: AsyncSession, bot=None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    data = await state.get_data()
    questions = data['questions']
    user_answers = data['user_answers']
    test_id = data['test_id']
    
    score = 0
    wrong_answers_data = []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ answers_details –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    answers_details = data.get('answers_details', [])
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö answers_details
    for answer_detail in answers_details:
        question_id = answer_detail['question_id']
        is_correct = answer_detail['is_correct']
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        question = next((q for q in questions if q.id == question_id), None)
        if not question:
            continue
            
        if is_correct:
            score += question.points
        else:
            score -= question.penalty_points
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            correct_answer_display = question.correct_answer
            if question.question_type == 'multiple_choice':
                try:
                    correct_answers = json.loads(question.correct_answer) if isinstance(question.correct_answer, str) else question.correct_answer
                    if isinstance(correct_answers, list):
                        correct_answer_display = ', '.join(correct_answers)
                except Exception:
                    pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_answer_display = answer_detail['answer']
            if question.question_type == 'multiple_choice' and isinstance(user_answer_display, list):
                user_answer_display = ', '.join(user_answer_display)
            
            wrong_answers_data.append({
                "question": question.question_text,
                "user_answer": user_answer_display,
                "correct_answer": correct_answer_display
            })
    
    test = await get_test_by_id(session, test_id)
    score = max(0, score) # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
    is_passed = score >= test.threshold_score
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
    user_tg_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not user_tg_id:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
        user_tg_id = message.from_user.id if hasattr(message, 'from_user') and message.from_user else None
    
    if not user_tg_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    user = await get_user_by_tg_id(session, user_tg_id)
    if not user:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_data = {
        'user_id': user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        'test_id': test_id,
        'score': score,
        'max_possible_score': test.max_score,
        'is_passed': is_passed,
        'start_time': data['start_time'],
        'end_time': datetime.now(),
        'answers_details': data.get('answers_details', []),
        'wrong_answers': wrong_answers_data
    }
    result = await save_test_result(session, result_data)

    if not result:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return

    # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
    stage_completion_message = ""
    if is_passed:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç —á–∞—Å—Ç—å—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–ª—é–±–æ–≥–æ —ç—Ç–∞–ø–∞)
        is_trajectory_test = await is_test_from_trajectory(session, user.id, test_id)
        if is_trajectory_test:
            logger.info(f"–¢–µ—Å—Ç {test_id} - —ç—Ç–æ —Ç–µ—Å—Ç –¢–†–ê–ï–ö–¢–û–†–ò–ò, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞")
            stage_completion_message = await check_and_notify_stage_completion(session, user.id, test_id, bot)
        else:
            logger.info(f"–¢–µ—Å—Ç {test_id} - —ç—Ç–æ —Ç–µ—Å—Ç –†–ê–°–°–´–õ–ö–ò, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")

    status_text = "‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!</b>" if is_passed else "‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>"
    
    keyboard = []

    # –í–ê–ñ–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏)
    progress_info = ""
    test_keyboard = keyboard.copy()

    if is_passed:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç —á–∞—Å—Ç—å—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        is_trajectory_test = await is_test_from_trajectory(session, user.id, test_id)
        if not is_trajectory_test:
            logger.info(f"–¢–µ—Å—Ç {test_id} - —Ä–∞—Å—Å—ã–ª–∫–∞, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
            # –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            trainee_path = None
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            trainee_path = await get_trainee_learning_path(session, result_data['user_id'])
        
        if trainee_path:
            stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

            progress_info = f"\n\nüèÜ<b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
            progress_info += f"üìö<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {trainee_path.learning_path.name}\n\n"

            for stage_progress in stages_progress:
                stage = stage_progress.stage
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞
                sessions_progress = await get_stage_session_progress(session, stage_progress.id)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
                all_sessions_completed = True
                for sp in sessions_progress:
                    if hasattr(sp.session, 'tests') and sp.session.tests:
                        session_tests_passed = True
                        for test_item in sp.session.tests:
                            test_result = await get_user_test_result(session, user.id, test_item.id)
                            if not (test_result and test_result.is_passed):
                                session_tests_passed = False
                                break
                        if not session_tests_passed:
                            all_sessions_completed = False
                            break
                
                if all_sessions_completed and sessions_progress:
                    stage_icon = "‚úÖ"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
                elif stage_progress.is_opened:
                    stage_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
                else:
                    stage_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    
                progress_info += f"{stage_icon}<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"

                for session_progress in sessions_progress:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                        all_tests_passed = True
                        for test_item in session_progress.session.tests:
                            test_result = await get_user_test_result(session, user.id, test_item.id)
                            if not (test_result and test_result.is_passed):
                                all_tests_passed = False
                                break
                        
                        if all_tests_passed:
                            session_icon = "‚úÖ"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                        elif stage_progress.is_opened:
                            session_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                        else:
                            session_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                    else:
                        session_icon = "‚õîÔ∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                        
                    progress_info += f"{session_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã
                    for test_item in session_progress.session.tests:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                        test_result = await get_user_test_result(session, user.id, test_item.id)
                        if test_result and test_result.is_passed:
                            test_icon = "‚úÖ"  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                        elif stage_progress.is_opened:
                            test_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                        else:
                            test_icon = "‚õîÔ∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                        test_number = len([t for t in session_progress.session.tests if t.id <= test_item.id])
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
                        percentage_text = ""
                        if test_result and test_result.is_passed:
                            percentage = (test_result.score / test_result.max_possible_score) * 100
                            percentage_text = f" - {percentage:.0f}%"
                        progress_info += f"{test_icon}<b>–¢–µ—Å—Ç {test_number}:</b> {test_item.name}{percentage_text}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
                progress_info += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            attestation = trainee_path.learning_path.attestation
            if attestation:
                attestation_status = await get_trainee_attestation_status(session, user.id, attestation.id)
                progress_info += f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} {attestation_status}\n\n"
            else:
                progress_info += f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚õîÔ∏è\n\n"

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ check_and_notify_stage_completion
            # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –µ–µ —Ç–µ—Å—Ç—ã
            current_session = None
            for stage_progress in stages_progress:
                # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ)
                from database.db import get_all_stage_sessions_progress
                stage_sessions_progress = await get_all_stage_sessions_progress(session, stage_progress.id)
                for session_progress in stage_sessions_progress:
                    if session_progress.session and hasattr(session_progress.session, 'tests'):
                        for test_item in session_progress.session.tests:
                            if test_item.id == test_id:
                                current_session = session_progress.session
                                break
                    if current_session:
                        break
                if current_session:
                    break

            if current_session:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
                for i, test_item in enumerate(current_session.tests, 1):
                    test_keyboard.append([
                        InlineKeyboardButton(
                            text=f"–¢–µ—Å—Ç {i}",
                            callback_data=f"take_test:{current_session.id}:{test_item.id}"
                        )
                    ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            test_keyboard.extend([
                [InlineKeyboardButton(text="üó∫Ô∏è –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è", callback_data="trajectory")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

    try:
        await message.edit_text(
            f"{status_text}\n"
            f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{test.max_score}</b> –±–∞–ª–ª–æ–≤.\n"
            f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.threshold_score}"
            f"{progress_info}"
            f"{stage_completion_message}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=test_keyboard)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"{status_text}\n"
            f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}</b> –∏–∑ <b>{test.max_score}</b> –±–∞–ª–ª–æ–≤.\n"
            f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.threshold_score}"
            f"{progress_info}"
            f"{stage_completion_message}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=test_keyboard)
        )
    await state.clear()


@router.callback_query(F.data.startswith("view_materials:"))
async def process_view_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫ —Ç–µ—Å—Ç—É"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    if not test or not test.material_link:
        await callback.message.edit_text(
            "üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
            "–ö —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
            ])
        )
        await callback.answer()
        return
    
    if test.material_file_path:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if test.material_type == "photo":
                sent_media = await callback.bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=test.material_file_path
                )
            elif test.material_type == "video":
                sent_media = await callback.bot.send_video(
                    chat_id=callback.message.chat.id,
                    video=test.material_file_path
                )
            else:
                sent_media = await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=test.material_file_path
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            await state.update_data(material_message_id=sent_media.message_id)
            
            sent_text = await callback.message.answer(
                "üìé –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                    [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
                ])
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(material_text_message_id=sent_text.message_id)
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n"
                f"–û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.\n\n"
                f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                    [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
                ])
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        await callback.message.edit_text(
            f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
            f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n{test.material_link}\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
            ])
        )
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "viewed test materials", 
        {"test_id": test_id}
    )

@router.callback_query(F.data == "back_to_test_list")
async def process_back_to_test_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–£–º–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª —Ç–µ—Å—Ç)"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å test_id
    state_data = await state.get_data()
    test_id = state_data.get('test_id')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±—ã–ª —Ç–µ—Å—Ç
    is_from_trajectory = False
    if test_id:
        is_from_trajectory = await is_test_from_trajectory(session, user.id, test_id)
    
    if is_from_trajectory:
        # –¢–ï–°–¢–´ –¢–†–ê–ï–ö–¢–û–†–ò–ò
        available_tests = await get_trainee_available_tests(session, user.id)
        
        if not available_tests:
            await callback.message.edit_text(
                "üó∫Ô∏è <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        tests_list = []
        for i, test in enumerate(available_tests, 1):
            stage_info = ""
            if test.stage_id:
                stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
                stage_obj = stage.scalar_one_or_none()
                if stage_obj:
                    stage_info = f" | –≠—Ç–∞–ø: {stage_obj.name}"
            
            materials_info = " | üìö –ï—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if test.material_link else ""
            
            tests_list.append(
                f"<b>{i}. {test.name}</b>\n"
                f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤{stage_info}{materials_info}\n"
                f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )
        
        tests_display = "\n\n".join(tests_list)
        
        await callback.message.edit_text(
            f"üó∫Ô∏è <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
            f"–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>{len(available_tests)}</b> —Ç–µ—Å—Ç–∞–º:\n\n"
            f"{tests_display}\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
            parse_mode="HTML",
            reply_markup=get_test_selection_for_taking_keyboard(available_tests)
        )
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç "taking" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        await state.update_data(test_context='taking')
    else:
        # –ú–û–ò –¢–ï–°–¢–´ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ) - –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
        available_tests = await get_employee_tests_from_recruiter(session, user.id, exclude_completed=False)
        
        if not available_tests:
            no_tests_message = (
                "‚ùå –ü–æ–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç\n"
                "–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            )
            await callback.message.edit_text(
                no_tests_message, 
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text, keyboard = await format_my_tests_display(session, user, available_tests)
        
        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç "taking" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await state.update_data(test_context='taking')
    
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_test:"))
async def process_cancel_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã/–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    test_name = test.name if test else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç"
    
    await callback.message.edit_text(
        f"‚ùå <b>–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω</b>\n\n"
        f"–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>¬´{test_name}¬ª</b> –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n"
        "–¢—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"take_test:{test_id}")],
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")]
        ])
    )
    
    await state.clear()
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled test", 
        {"test_id": test_id}
    )

@router.callback_query(F.data == "cancel")
async def process_general_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –æ—Ç–º–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

@router.callback_query(TestTakingStates.waiting_for_test_start, F.data.startswith("take_test:"))
async def process_back_to_test_details(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º —Ç–µ—Å—Ç–∞"""
    await process_test_selection_for_taking(callback, state, session)


@router.callback_query(TestTakingStates.waiting_for_test_start, F.data.startswith("start_test:"))
async def process_start_test_button(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
    test_id = int(callback.data.split(':')[1])
    await process_start_test(callback, state, session, test_id)

@router.callback_query(F.data.startswith("take_test:"))
async def process_take_test_from_notification(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    parts = callback.data.split(':')
    
    # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    data = await state.get_data()
    if 'material_message_id' in data:
        try:
            await callback.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=data['material_message_id']
            )
        except Exception:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ message_id
    await state.update_data(material_message_id=None, material_text_message_id=None)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
    # take_test:{test_id} - –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # take_test:{session_id}:{test_id} - –∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ trainee_trajectory.py)
    if len(parts) == 2:
        test_id = int(parts[1])
    elif len(parts) == 3:
        # –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ trainee_trajectory.py, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        test_id = int(parts[2])
    else:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.edit_text("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
        
    has_access = await check_test_access(session, user.id, test_id)
    
    if not has_access:
        await callback.message.edit_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É. –û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts_count = await get_user_test_attempts_count(session, user.id, test_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    existing_result = await get_user_test_result(session, user.id, test_id)
    
    test_info = f"""üìå <b>{test.name}</b>

<b>–ü–æ—Ä–æ–≥:</b> {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤

{test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ç–µ—Å—Ç—É"""
    
    await callback.message.edit_text(
        test_info,
        parse_mode="HTML",
        reply_markup=get_test_start_keyboard(test_id, bool(existing_result))
    )
    
    await state.update_data(selected_test_id=test_id)
    await state.set_state(TestTakingStates.waiting_for_test_start)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "took test from notification", 
        {"test_id": test_id}
    )

@router.callback_query(F.data == "trajectory_tests_shortcut")
async def process_trajectory_tests_shortcut(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ—Å—Ç–∞–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    has_permission = await check_user_permission(session, user.id, "take_tests")
    if not has_permission:
        await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
        await callback.answer()
        return
    
    available_tests = await get_trainee_available_tests(session, user.id)
    
    if not available_tests:
        await callback.message.edit_text(
            "üó∫Ô∏è <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.\n"
            "–û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    tests_list = []
    for i, test in enumerate(available_tests, 1):
        stage_info = ""
        if test.stage_id:
            stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
            stage_obj = stage.scalar_one_or_none()
            if stage_obj:
                stage_info = f" | –≠—Ç–∞–ø: {stage_obj.name}"
        
        materials_info = " | üìö –ï—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" if test.material_link else ""
        
        tests_list.append(
            f"<b>{i}. {test.name}</b>\n"
            f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤{stage_info}{materials_info}\n"
            f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
    
    tests_display = "\n\n".join(tests_list)
    
    await callback.message.edit_text(
        f"üó∫Ô∏è <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ <b>{len(available_tests)}</b> —Ç–µ—Å—Ç–∞–º:\n\n"
        f"{tests_display}\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!",
        parse_mode="HTML",
        reply_markup=get_test_selection_for_taking_keyboard(available_tests)
    )
    
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    await callback.answer()

    log_user_action(callback.from_user.id, callback.from_user.username, "opened trajectory tests from notification")

@router.callback_query(F.data == "my_broadcast_tests_shortcut")
async def process_my_broadcast_tests_shortcut(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–∞–º –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—ã–ª–∫—É + –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏)
    available_tests = await get_employee_tests_from_recruiter(session, user.id, exclude_completed=False)
    
    if not available_tests:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç\n"
            "–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è, —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    message_text, keyboard = await format_my_tests_display(session, user, available_tests)
    
    await callback.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(test_context='taking')
    await state.set_state(TestTakingStates.waiting_for_test_selection)
    
    await callback.answer()
    log_user_action(callback.from_user.id, callback.from_user.username, "opened broadcast tests from notification")


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–†–ê–ï–ö–¢–û–†–ò–ô =====

async def is_test_from_trajectory(session: AsyncSession, user_id: int, test_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç —á–∞—Å—Ç—å—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç –≤–Ω–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
    
    Returns:
        True - —Ç–µ—Å—Ç –∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ —ç—Ç–∞–ø—ã)
        False - —Ç–µ—Å—Ç –≤–Ω–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –ò–õ–ò –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞)
    """
    try:
        from database.models import Role, user_roles, TraineeTestAccess
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
        recruiter_role_result = await session.execute(
            select(Role).where(Role.name == "–†–µ–∫—Ä—É—Ç–µ—Ä")
        )
        recruiter_role = recruiter_role_result.scalar_one_or_none()
        if not recruiter_role:
            logger.error("–†–æ–ª—å '–†–µ–∫—Ä—É—Ç–µ—Ä' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É
        access_result = await session.execute(
            select(TraineeTestAccess).outerjoin(
                user_roles, TraineeTestAccess.granted_by_id == user_roles.c.user_id
            ).where(
                TraineeTestAccess.trainee_id == user_id,
                TraineeTestAccess.test_id == test_id,
                TraineeTestAccess.is_active == True
            )
        )
        access = access_result.scalar_one_or_none()
        
        if not access:
            logger.warning(f"–î–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É {test_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ—Å—Ç –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é (—á–µ—Ä–µ–∑ —ç—Ç–∞–ø—ã/—Å–µ—Å—Å–∏–∏)
        from database.models import LearningSession, TraineeSessionProgress, TraineeStageProgress, TraineeLearningPath, session_tests
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path_result = await session.execute(
            select(TraineeLearningPath)
            .where(
                TraineeLearningPath.trainee_id == user_id,
                TraineeLearningPath.is_active == True
            )
        )
        trainee_path = trainee_path_result.scalar_one_or_none()
        
        if not trainee_path:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ—Å—Ç –≤ —Å–µ—Å—Å–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–ª—é–±–æ–≥–æ —ç—Ç–∞–ø–∞)
        trajectory_test_result = await session.execute(
            select(session_tests.c.test_id).join(
                LearningSession, LearningSession.id == session_tests.c.session_id
            ).join(
                TraineeSessionProgress, TraineeSessionProgress.session_id == LearningSession.id
            ).join(
                TraineeStageProgress, TraineeSessionProgress.stage_progress_id == TraineeStageProgress.id
            ).where(
                TraineeStageProgress.trainee_path_id == trainee_path.id,
                session_tests.c.test_id == test_id
            )
        )
        trajectory_test = trajectory_test_result.first()
        
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        return trajectory_test is not None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞ {test_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def check_and_notify_stage_completion(session: AsyncSession, user_id: int, test_id: int, bot=None) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É
    –¢–û–õ–¨–ö–û –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤! –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –∏–º–µ—é—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.
    """
    try:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤
        user_roles = await get_user_roles(session, user_id)
        role_names = [role.name for role in user_roles]
        
        if "–°—Ç–∞–∂–µ—Ä" not in role_names:
            # –≠—Ç–æ –Ω–µ —Å—Ç–∞–∂–µ—Ä - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            return ""
        
        from database.models import LearningSession, LearningStage, session_tests, TestResult

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user_id)
        if not trainee_path:
            logger.warning(f"–°—Ç–∞–∂–µ—Ä {user_id} –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
            return ""  # –°—Ç–∞–∂–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏

        # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        session_result = await session.execute(
            select(LearningSession)
            .join(session_tests)
            .join(LearningStage, LearningSession.stage_id == LearningStage.id)
            .where(
                session_tests.c.test_id == test_id,
                LearningStage.learning_path_id == trainee_path.learning_path_id
            )
        )
        test_session = session_result.scalar_one_or_none()

        if not test_session:
            logger.warning(f"–¢–µ—Å—Ç {test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞ {user_id}")
            return ""  # –¢–µ—Å—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        session_tests_result = await session.execute(
            select(session_tests.c.test_id).where(
                session_tests.c.session_id == test_session.id
            )
        )
        session_test_ids = [row[0] for row in session_tests_result.all()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —Å—Ç–∞–∂–µ—Ä–æ–º
        completed_tests_count = 0
        for session_test_id in session_test_ids:
            test_result = await get_user_test_result(session, user_id, session_test_id)
            if test_result and test_result.is_passed:
                completed_tests_count += 1

        # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        if completed_tests_count == len(session_test_ids):
            session_completed = await complete_session_for_trainee(session, user_id, test_session.id)
            if session_completed:
                logger.info(f"–°–µ—Å—Å–∏—è {test_session.id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {user_id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–∞–ø–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                stage_progress = await get_trainee_stage_progress(session, trainee_path.id)
                current_stage_progress = next(
                    (sp for sp in stage_progress if sp.stage_id == test_session.stage_id),
                    None
                )

                if current_stage_progress:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
                    stage_sessions_progress = await get_stage_session_progress(session, current_stage_progress.id)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤)
                    all_sessions_completed = True
                    for sp in stage_sessions_progress:
                        if hasattr(sp.session, 'tests') and sp.session.tests:
                            session_tests_passed = True
                            for test_item in sp.session.tests:
                                test_result = await get_user_test_result(session, user_id, test_item.id)
                                if not (test_result and test_result.is_passed):
                                    session_tests_passed = False
                                    break
                            if not session_tests_passed:
                                all_sessions_completed = False
                                break

                    if all_sessions_completed:
                        # –û—Ç–º–µ—á–∞–µ–º —ç—Ç–∞–ø –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        stage_completed = await complete_stage_for_trainee(session, user_id, current_stage_progress.stage_id)
                        if stage_completed:
                            logger.info(f"–≠—Ç–∞–ø {current_stage_progress.stage_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {user_id}")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É
                            await send_stage_completion_notification(session, user_id, current_stage_progress.stage_id, bot)
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞
                            stage_name = current_stage_progress.stage.name if hasattr(current_stage_progress, 'stage') else f"–≠—Ç–∞–ø {current_stage_progress.stage_id}"
                            return f"\n\n‚úÖ <b>–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª {stage_name}!</b>\n–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"

        return ""  # –≠—Ç–∞–ø –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {user_id}: {e}")
        return ""


async def send_stage_completion_notification(session: AsyncSession, trainee_id: int, stage_id: int, bot=None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ —Å—Ç–∞–∂–µ—Ä–æ–º
    """
    try:
        from database.models import User, LearningStage, Mentorship

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø
        stage_result = await session.execute(
            select(LearningStage).where(LearningStage.id == stage_id)
        )
        stage = stage_result.scalar_one_or_none()
        if not stage:
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ —Å—Ç–∞–∂–µ—Ä–∞
        mentorship_result = await session.execute(
            select(Mentorship).where(
                Mentorship.trainee_id == trainee_id,
                Mentorship.is_active == True
            )
        )
        mentorship = mentorship_result.scalar_one_or_none()
        if not mentorship:
            return

        mentor = await get_user_by_id(session, mentorship.mentor_id)
        if not mentor:
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        notification_message = (
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üëë <b>–†–æ–ª–∏:</b> {', '.join([role.name for role in trainee.roles]) if trainee.roles else '–°—Ç–∞–∂—ë—Ä'}\n"
            f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            "‚úÖ<b>–¢–≤–æ–π —Å—Ç–∞–∂—ë—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏!</b>\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã", callback_data="my_trainees")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É
        if not bot:
            logger.warning("Bot instance not provided to send_stage_completion_notification")
            return
        try:
            await bot.send_message(
                mentor.tg_id,
                notification_message,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É {mentor.full_name} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ {stage.name} —Å—Ç–∞–∂–µ—Ä–æ–º {trainee.full_name}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É {mentor.tg_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞: {e}")


@router.callback_query(F.data == "trajectory")
async def callback_trajectory_from_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è' –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –≤—ã–±–æ—Ä—É —ç—Ç–∞–ø–∞"""
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, user.id)

        if not trainee_path:
            await callback.message.edit_text(
                "üó∫Ô∏è <b>–¢–†–ê–ï–ö–¢–û–†–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø</b> üó∫Ô∏è\n\n"
                "‚ùå <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\n\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞ –∫—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω",
                parse_mode="HTML",
                reply_markup=get_mentor_contact_keyboard()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_info = await format_trajectory_info(user, trainee_path)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–∞—Ö
        stages_info = ""
        for stage_progress in stages_progress:
            stage = stage_progress.stage
            status_icon = "‚úÖ" if stage_progress.is_completed else ("üü°" if stage_progress.is_opened else "‚õîÔ∏è")
            stages_info += f"{status_icon}<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö
            sessions_progress = await get_stage_session_progress(session, stage_progress.id)
            for session_progress in sessions_progress:
                session_status_icon = "‚úÖ" if session_progress.is_completed else ("üü°" if session_progress.is_opened else "‚õîÔ∏è")
                stages_info += f"{session_status_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
                for test in session_progress.session.tests:
                    test_result = await get_user_test_result(session, user.id, test.id)
                    if test_result and test_result.is_passed:
                        test_status_icon = "‚úÖ"
                    else:
                        test_status_icon = "‚õîÔ∏è"
                    stages_info += f"{test_status_icon}<b>–¢–µ—Å—Ç {len([t for t in session_progress.session.tests if t.id <= test.id])}:</b> {test.name}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞
            stages_info += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        if trainee_path.learning_path.attestation:
            attestation_status = await get_trainee_attestation_status(
                session, user.id, trainee_path.learning_path.attestation.id
            )
            stages_info += f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {trainee_path.learning_path.attestation.name} {attestation_status}\n\n"
        else:
            stages_info += f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚õîÔ∏è\n\n"

        available_stages = [sp for sp in stages_progress if sp.is_opened and not sp.is_completed]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏
        keyboard_buttons = []

        if available_stages:
            stages_info += "–í—ã–±–µ—Ä–∏ —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏üëá"
            for stage_progress in available_stages:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"–≠—Ç–∞–ø {stage_progress.stage.order_number}",
                        callback_data=f"select_stage:{stage_progress.stage.id}"
                    )
                ])
        else:
            stages_info += "‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            trajectory_info + stages_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(callback.from_user.id, "trajectory_from_test_error", str(e))
