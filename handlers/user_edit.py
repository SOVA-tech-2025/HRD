from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    check_user_permission, get_all_activated_users, get_users_by_group, get_users_by_object,
    get_user_with_details, get_user_by_id, get_user_by_tg_id, get_user_by_phone,
    update_user_full_name, update_user_phone_number, update_user_role,
    update_user_group, update_user_internship_object, update_user_work_object,
    get_all_groups, get_all_objects, get_object_by_id, get_group_by_id, get_user_roles,
    get_role_change_warnings, delete_user
)
from handlers.auth import check_auth
from states.states import UserEditStates
from keyboards.keyboards import (
    get_user_editor_keyboard, get_edit_confirmation_keyboard,
    get_role_selection_keyboard, get_group_selection_keyboard,
    get_object_selection_keyboard, get_users_filter_keyboard,
    get_group_filter_keyboard, get_object_filter_keyboard,
    get_users_list_keyboard, get_user_info_keyboard,
    get_user_deletion_confirmation_keyboard
)
from utils.logger import log_user_action, log_user_error
from utils.validators import validate_full_name, validate_phone_number

router = Router()


async def show_user_info_detail(callback: CallbackQuery, user_id: int, session: AsyncSession, filter_type: str = "all"):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = await get_user_with_details(session, user_id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    role_name = user.roles[0].name if user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
    group_name = user.groups[0].name if user.groups else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
    
    text = (
        f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}\n\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
        f"<b>Username:</b> @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–ù–æ–º–µ—Ä:</b> #{user.id}\n"
        f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}\n"
        f"<b>–†–æ–ª—å:</b> {role_name}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
    )
    
    if role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]:
        if user.internship_object:
            text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {user.internship_object.name}\n"
        else:
            text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
    
    if user.work_object:
        text += f"<b>–†–∞–±–æ—Ç—ã:</b> {user.work_object.name}\n"
    else:
        text += f"<b>–†–∞–±–æ—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
    
    keyboard = get_user_info_keyboard(user_id, filter_type)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    return True


@router.message(F.text.in_(["–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üö∏"]))
async def cmd_all_users(message: Message, session: AsyncSession, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if not await check_user_permission(session, user.id, "manage_groups"):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        log_user_error(message.from_user.id, "all_users_access_denied", "Insufficient permissions")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    groups = await get_all_groups(session)
    objects = await get_all_objects(session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ–æ–±—â–µ
    users = await get_all_activated_users(session)
    if not users:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
        
    text = (
        f"<b>üö∏ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(users)}</b>\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}\n"
        f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    )
    
    keyboard = get_users_filter_keyboard(groups, objects)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_filter_selection)
    
    log_user_action(message.from_user.id, "opened_user_filters", f"Available: {len(users)} users, {len(groups)} groups, {len(objects)} objects")


# ===================== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò =====================

@router.callback_query(F.data == "filter_all_users", UserEditStates.waiting_for_filter_selection)
async def callback_filter_all_users(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        users = await get_all_activated_users(session)
        
        if not users:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        text = (
            f"<b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        keyboard = get_users_list_keyboard(users, 0, 5, "all")
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserEditStates.waiting_for_user_selection)
        await state.update_data(current_users=users, filter_type="all", current_page=0)
        
        log_user_action(callback.from_user.id, "filter_all_users", f"Showing {len(users)} users")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "filter_all_users_error", str(e))


@router.callback_query(F.data == "filter_by_groups", UserEditStates.waiting_for_filter_selection)
async def callback_filter_by_groups(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    try:
        await callback.answer()
        
        groups = await get_all_groups(session)
        
        if not groups:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return
        
        text = (
            f"üóÇÔ∏è <b>–§–ò–õ–¨–¢–† –ü–û –ì–†–£–ü–ü–ê–ú</b> üóÇÔ∏è\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: <b>{len(groups)}</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
        )
        
        keyboard = get_group_filter_keyboard(groups, 0, 5)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.update_data(available_groups=groups, filter_page=0)
        
        log_user_action(callback.from_user.id, "opened_group_filter", f"Available {len(groups)} groups")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "filter_by_groups_error", str(e))


@router.callback_query(F.data == "filter_by_objects", UserEditStates.waiting_for_filter_selection)
async def callback_filter_by_objects(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"""
    try:
        await callback.answer()
        
        objects = await get_all_objects(session)
        
        if not objects:
            await callback.message.edit_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
            return
        
        text = (
            f"üìç <b>–§–ò–õ–¨–¢–† –ü–û –û–ë–™–ï–ö–¢–ê–ú</b> üìç\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: <b>{len(objects)}</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
        )
        
        keyboard = get_object_filter_keyboard(objects, 0, 5)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.update_data(available_objects=objects, filter_page=0)
        
        log_user_action(callback.from_user.id, "opened_object_filter", f"Available {len(objects)} objects")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "filter_by_objects_error", str(e))


@router.callback_query(F.data.startswith("filter_group:"), UserEditStates.waiting_for_filter_selection)
async def callback_filter_group(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        await callback.answer()
        
        group_id = int(callback.data.split(":")[1])
        group = await get_group_by_id(session, group_id)
        
        if not group:
            await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        users = await get_users_by_group(session, group_id)
        
        text = (
            f"üóÇÔ∏è <b>–ì–†–£–ü–ü–ê: {group.name}</b> üóÇÔ∏è\n\n"
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ: <b>{len(users)}</b>\n\n"
        )
        
        if users:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            keyboard = get_users_list_keyboard(users, 0, 5, f"group:{group_id}")
            await state.set_state(UserEditStates.waiting_for_user_selection)
            await state.update_data(current_users=users, filter_type=f"group:{group_id}", current_page=0)
        else:
            text += "–í –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            keyboard = get_users_filter_keyboard(await get_all_groups(session), await get_all_objects(session))
            await state.set_state(UserEditStates.waiting_for_filter_selection)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "filter_by_group", f"Group: {group.name}, Users: {len(users)}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "filter_group_error", str(e))


@router.callback_query(F.data.startswith("filter_object:"), UserEditStates.waiting_for_filter_selection)
async def callback_filter_object(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
    try:
        await callback.answer()
        
        object_id = int(callback.data.split(":")[1])
        obj = await get_object_by_id(session, object_id)
        
        if not obj:
            await callback.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        users = await get_users_by_object(session, object_id)
        
        text = (
            f"üìç <b>–û–ë–™–ï–ö–¢: {obj.name}</b> üìç\n\n"
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ: <b>{len(users)}</b>\n\n"
        )
        
        if users:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            keyboard = get_users_list_keyboard(users, 0, 5, f"object:{object_id}")
            await state.set_state(UserEditStates.waiting_for_user_selection)
            await state.update_data(current_users=users, filter_type=f"object:{object_id}", current_page=0)
        else:
            text += "–ö –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
            keyboard = get_users_filter_keyboard(await get_all_groups(session), await get_all_objects(session))
            await state.set_state(UserEditStates.waiting_for_filter_selection)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
        log_user_action(callback.from_user.id, "filter_by_object", f"Object: {obj.name}, Users: {len(users)}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "filter_object_error", str(e))


@router.callback_query(F.data.startswith("view_user:"), UserEditStates.waiting_for_user_selection)
async def callback_view_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        await callback.answer()
        
        user_id = int(callback.data.split(":")[1])
        
        data = await state.get_data()
        filter_type = data.get('filter_type', 'all')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        success = await show_user_info_detail(callback, user_id, session, filter_type)
        
        if success:
            await state.set_state(UserEditStates.viewing_user_info)
            await state.update_data(viewing_user_id=user_id)
            
            user = await get_user_by_id(session, user_id)
            log_user_action(callback.from_user.id, "view_user_info", f"User: {user.full_name if user else 'Unknown'} (ID: {user_id})")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "view_user_error", str(e))


@router.callback_query(F.data.startswith("edit_user:"), UserEditStates.viewing_user_info)
async def callback_edit_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        user_id = int(callback.data.split(":")[1])
        user = await get_user_with_details(session, user_id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        role_name = user.roles[0].name if user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
        group_name = user.groups[0].name if user.groups else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
        is_trainee = role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]
        
        text = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"<b>Username:</b> @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{user.id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}\n"
            f"<b>–†–æ–ª—å:</b> {role_name}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤
        if role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]:
            if user.internship_object:
                text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {user.internship_object.name}\n"
            else:
                text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
            
        # –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã
        if user.work_object:
            text += f"<b>–†–∞–±–æ—Ç—ã:</b> {user.work_object.name}\n"
        else:
            text += f"<b>–†–∞–±–æ—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>"
        
        keyboard = get_user_editor_keyboard(is_trainee)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.update_data(editing_user_id=user_id)
        
        log_user_action(callback.from_user.id, "start_edit_user", f"User: {user.full_name} (ID: {user_id})")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "edit_user_error", str(e))


@router.callback_query(F.data == "back_to_filters")
async def callback_back_to_filters(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        groups = await get_all_groups(session)
        objects = await get_all_objects(session)
        users = await get_all_activated_users(session)
        
        text = (
            "üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b> üë•\n\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{len(users)}</b>\n"
            f"üóÇÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø: <b>{len(groups)}</b>\n"
            f"üìç –î–æ—Å—Ç—É–ø–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: <b>{len(objects)}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
        )
        
        keyboard = get_users_filter_keyboard(groups, objects)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserEditStates.waiting_for_filter_selection)
        
        log_user_action(callback.from_user.id, "back_to_filters", "Returned to user filters")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_filters_error", str(e))


@router.callback_query(F.data.startswith("back_to_users:"))
async def callback_back_to_users(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await callback.answer()
        
        filter_type = callback.data.split(":", 1)[1]
        data = await state.get_data()
        users = data.get('current_users', [])
        current_page = data.get('current_page', 0)
        
        if filter_type == "all":
            text = f"üë• <b>–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b> üë•\n\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        elif filter_type.startswith("group:"):
            group_id = int(filter_type.split(":")[1])
            group = await get_group_by_id(session, group_id)
            text = f"üóÇÔ∏è <b>–ì–†–£–ü–ü–ê: {group.name if group else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}</b> üóÇÔ∏è\n\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        elif filter_type.startswith("object:"):
            object_id = int(filter_type.split(":")[1])
            obj = await get_object_by_id(session, object_id)
            text = f"üìç <b>–û–ë–™–ï–ö–¢: {obj.name if obj else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</b> üìç\n\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        else:
            text = f"üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b> üë•\n\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        keyboard = get_users_list_keyboard(users, current_page, 5, filter_type)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserEditStates.waiting_for_user_selection)
        
        log_user_action(callback.from_user.id, "back_to_users", f"Filter: {filter_type}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_users_error", str(e))


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ê–ì–ò–ù–ê–¶–ò–ò =====================

@router.callback_query(F.data.startswith("users_page:"))
async def callback_users_pagination(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await callback.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: users_page:{filter_type}:{page}
        # filter_type –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "group:1")
        parts = callback.data.split(":")
        if len(parts) == 3:
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π: users_page:all:0
            filter_type = parts[1]
            page = int(parts[2])
        else:
            # –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π: users_page:group:1:0 –∏–ª–∏ users_page:object:2:1
            filter_type = ":".join(parts[1:-1])  # –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            page = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        data = await state.get_data()
        users = data.get('current_users', [])
        
        if filter_type == "all":
            text = f"üë• <b>–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b> üë•\n\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        elif filter_type.startswith("group"):
            group_id = int(filter_type.split(":")[1]) if ":" in filter_type else 0
            group = await get_group_by_id(session, group_id) if group_id else None
            text = f"üóÇÔ∏è <b>–ì–†–£–ü–ü–ê: {group.name if group else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}</b> üóÇÔ∏è\n\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        elif filter_type.startswith("object"):
            object_id = int(filter_type.split(":")[1]) if ":" in filter_type else 0
            obj = await get_object_by_id(session, object_id) if object_id else None
            text = f"üìç <b>–û–ë–™–ï–ö–¢: {obj.name if obj else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</b> üìç\n\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        else:
            text = f"üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b> üë•\n\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        keyboard = get_users_list_keyboard(users, page, 5, filter_type)
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await state.update_data(current_page=page)
        
        log_user_action(callback.from_user.id, "users_pagination", f"Page: {page}, Filter: {filter_type}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "users_pagination_error", str(e))


@router.callback_query(F.data.startswith("group_filter_page:"))
async def callback_group_filter_pagination(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        page = int(callback.data.split(":")[1])
        data = await state.get_data()
        groups = data.get('available_groups', [])
        
        if not groups:
            groups = await get_all_groups(session)
        
        keyboard = get_group_filter_keyboard(groups, page, 5)
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await state.update_data(filter_page=page)
        
        log_user_action(callback.from_user.id, "group_filter_pagination", f"Page: {page}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "group_filter_pagination_error", str(e))


@router.callback_query(F.data.startswith("object_filter_page:"))
async def callback_object_filter_pagination(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        page = int(callback.data.split(":")[1])
        data = await state.get_data()
        objects = data.get('available_objects', [])
        
        if not objects:
            objects = await get_all_objects(session)
        
        keyboard = get_object_filter_keyboard(objects, page, 5)
        
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await state.update_data(filter_page=page)
        
        log_user_action(callback.from_user.id, "object_filter_pagination", f"Page: {page}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "object_filter_pagination_error", str(e))


# ===================== –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====================

@router.message(UserEditStates.waiting_for_user_number)
async def process_user_number(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    target_user = await get_user_with_details(session, user_id)
    
    if not target_user or not target_user.is_activated:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(editing_user_id=user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    await show_user_editor(message, session, target_user, state)
    

async def show_user_editor(message: Message, session: AsyncSession, 
                          target_user, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    role_name = target_user.roles[0].name if target_user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
    group_name = target_user.groups[0].name if target_user.groups else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
    
    user_info = f"""‚úèÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>‚úèÔ∏è

üßë –§–ò–û: {target_user.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {target_user.phone_number}
üÜî Telegram ID: {target_user.tg_id}
üë§ Username: @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {target_user.registration_date.strftime('%d.%m.%Y %H:%M') if target_user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üëë –†–æ–ª–∏: {role_name}
üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {group_name}"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤
    if role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"] and target_user.internship_object:
        user_info += f"\nüìç1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: {target_user.internship_object.name}"
        
    # –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã
    if target_user.work_object:
        user_info += f"\nüìç2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã: {target_user.work_object.name}"
        
    user_info += f"\nüé±–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user.id}"
    
    user_info += "\n\n–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µüëá"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    keyboard = get_user_editor_keyboard(role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"])
    
    await message.answer(user_info, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è


@router.callback_query(F.data == "edit_full_name")
async def process_edit_full_name(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    if not editing_user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    message_text = f"""–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ <b>–§–ê–ú–ò–õ–ò–Ø –ò –ò–ú–Ø</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üßë –§–ò–û: {target_user.full_name}"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")]
    ])
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_new_full_name)
    await state.update_data(edit_type="full_name")
    await callback.answer()


@router.message(UserEditStates.waiting_for_new_full_name)
async def process_new_full_name(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –§–ò–û"""
    new_full_name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_message = validate_full_name(new_full_name)
    if not is_valid:
        await message.answer(f"‚ùå {error_message}")
        return
        
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(new_value=new_full_name, old_value=target_user.full_name)
    
    confirmation_text = f"""‚ö†Ô∏è–ù–û–í–û–ï –§–ò–û:
‚ö†Ô∏è{new_full_name}

–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üßë –§–ò–û: {target_user.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {target_user.phone_number}
üÜî Telegram ID: {target_user.tg_id}
üë§ Username: @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}"""
    
    keyboard = get_edit_confirmation_keyboard()
    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(UserEditStates.waiting_for_change_confirmation)


@router.callback_query(F.data == "edit_phone")
async def process_edit_phone(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    if not editing_user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    message_text = f"""–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π <b>–¢–ï–õ–ï–§–û–ù</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üßë –§–ò–û: {target_user.full_name}"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")]
    ])
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_new_phone)
    await state.update_data(edit_type="phone")
    await callback.answer()


@router.message(UserEditStates.waiting_for_new_phone)
async def process_new_phone(message: Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    new_phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    is_valid, result = validate_phone_number(new_phone)
    if not is_valid:
        await message.answer(f"‚ùå {result}")
        return
        
    normalized_phone = result
    
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(new_value=normalized_phone, old_value=target_user.phone_number)
    
    confirmation_text = f"""‚ö†Ô∏è–ù–û–í–´–ô –¢–ï–õ–ï–§–û–ù:
‚ö†Ô∏è{normalized_phone}

–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üßë –§–ò–û: {target_user.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {target_user.phone_number}
üÜî Telegram ID: {target_user.tg_id}
üë§ Username: @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}"""
    
    keyboard = get_edit_confirmation_keyboard()
    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(UserEditStates.waiting_for_change_confirmation)


@router.callback_query(F.data == "edit_role")
async def process_edit_role(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    if not editing_user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    current_role = target_user.roles[0].name if target_user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
    
    message_text = f"""–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é <b>–†–û–õ–¨</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üßë –§–ò–û: {target_user.full_name}"""
    
    keyboard = get_role_selection_keyboard(is_editing=True)
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_new_role)
    await state.update_data(edit_type="role", old_value=current_role)
    await callback.answer()


@router.callback_query(UserEditStates.waiting_for_new_role, F.data == "cancel_edit")
async def cancel_edit_role(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É"""
    await callback_cancel_edit(callback, state, session)


@router.callback_query(UserEditStates.waiting_for_new_role, F.data.startswith("role:"))
async def process_new_role(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏"""
    new_role = callback.data.split(":")[1]
    
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    old_role = data.get('old_value')
    
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(new_value=new_role)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    current_role = target_user.roles[0].name if target_user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö —Å–º–µ–Ω—ã —Ä–æ–ª–∏
    warnings = await get_role_change_warnings(session, target_user.id, current_role, new_role)
    
    confirmation_text = f"""üö©üö©üö©<b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –†–û–õ–ò</b>üö©üö©üö©

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.full_name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {target_user.phone_number}

üèöÔ∏è <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {current_role}
üå±<b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {new_role}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

{warnings}"""
    
    keyboard = get_edit_confirmation_keyboard()
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
    await state.set_state(UserEditStates.waiting_for_change_confirmation)
    await callback.answer()


@router.callback_query(UserEditStates.waiting_for_new_role, F.data == "cancel_registration")
async def process_cancel_role_selection(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    await callback.message.edit_text("‚ùå –í–´ –û–¢–ú–ï–ù–ò–õ–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    await state.clear()
    await callback.answer()
    log_user_action(callback.from_user.id, "cancel_role_edit", "Cancelled role editing")


@router.callback_query(F.data == "edit_group")
async def process_edit_group(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    if not editing_user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    current_group = target_user.groups[0].name if target_user.groups else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
    
    message_text = f"""–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é <b>–ì–†–£–ü–ü–£</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üßë –§–ò–û: {target_user.full_name}"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    groups = await get_all_groups(session)
    
    if not groups:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø")
        await callback.answer()
        return
    
    keyboard = get_group_selection_keyboard(groups, 0)
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_new_group)
    await state.update_data(edit_type="group", old_value=current_group)
    await callback.answer()


@router.callback_query(UserEditStates.waiting_for_new_group)
async def process_new_group(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    if callback.data.startswith("select_group:"):
        group_id = int(callback.data.split(":")[1])
        
        data = await state.get_data()
        editing_user_id = data.get('editing_user_id')
        
        target_user = await get_user_with_details(session, editing_user_id)
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group = await get_group_by_id(session, group_id)
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(new_value=group_id, new_group_name=group.name)
        
        confirmation_text = f"""‚ö†Ô∏è–ù–û–í–ê–Ø –ì–†–£–ü–ü–ê:
‚ö†Ô∏è{group.name}

–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üßë –§–ò–û: {target_user.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {target_user.phone_number}
üÜî Telegram ID: {target_user.tg_id}
üë§ Username: @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}"""
        
        keyboard = get_edit_confirmation_keyboard()
        await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
        await state.set_state(UserEditStates.waiting_for_change_confirmation)
        await callback.answer()
        
    elif callback.data.startswith("groups_page:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = int(callback.data.split(":")[1])
        groups = await get_all_groups(session)
        keyboard = get_group_selection_keyboard(groups, page)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    
    elif callback.data == "cancel_edit":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        await callback_cancel_edit(callback, state, session)


@router.callback_query(F.data == "edit_internship_object")
async def process_edit_internship_object(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    if not editing_user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    current_object = target_user.internship_object.name if target_user.internship_object else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    
    message_text = f"""–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π <b>–û–ë–™–ï–ö–¢ –°–¢–ê–ñ–ò–†–û–í–ö–ò</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üßë –§–ò–û: {target_user.full_name}"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    objects = await get_all_objects(session)
    
    if not objects:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏")
        await callback.answer()
        return
    
    keyboard = get_object_selection_keyboard(objects, 0, 5, "internship")
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_new_internship_object)
    await state.update_data(edit_type="internship_object", old_value=current_object)
    await callback.answer()


@router.callback_query(UserEditStates.waiting_for_new_internship_object)
async def process_new_internship_object(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"""
    if callback.data.startswith("select_internship_object:"):
        object_id = int(callback.data.split(":")[1])
        
        data = await state.get_data()
        editing_user_id = data.get('editing_user_id')
        
        target_user = await get_user_with_details(session, editing_user_id)
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        obj = await get_object_by_id(session, object_id)
        if not obj:
            await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(new_value=object_id, new_object_name=obj.name)
        
        confirmation_text = f"""‚ö†Ô∏è–ù–û–í–´–ô –û–ë–™–ï–ö–¢ –°–¢–ê–ñ–ò–†–û–í–ö–ò:
‚ö†Ô∏è{obj.name}

–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üßë –§–ò–û: {target_user.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {target_user.phone_number}
üÜî Telegram ID: {target_user.tg_id}
üë§ Username: @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {target_user.registration_date.strftime('%d.%m.%Y %H:%M') if target_user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üëë –†–æ–ª–∏: {target_user.roles[0].name if target_user.roles else '–ù–µ—Ç —Ä–æ–ª–∏'}
üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {target_user.groups[0].name if target_user.groups else '–ù–µ—Ç –≥—Ä—É–ø–ø—ã'}
üìç1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: {target_user.internship_object.name if target_user.internship_object else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"""
        
        keyboard = get_edit_confirmation_keyboard()
        await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
        await state.set_state(UserEditStates.waiting_for_change_confirmation)
        await callback.answer()
        
    elif callback.data.startswith("internship_object_page:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = int(callback.data.split(":")[1])
        objects = await get_all_objects(session)
        keyboard = get_object_selection_keyboard(objects, page, 5, "internship")
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    
    elif callback.data == "cancel_edit":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        await callback_cancel_edit(callback, state, session)


@router.callback_query(F.data == "edit_work_object")
async def process_edit_work_object(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    
    if not editing_user_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    target_user = await get_user_with_details(session, editing_user_id)
    if not target_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    current_object = target_user.work_object.name if target_user.work_object else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    
    message_text = f"""–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π <b>–û–ë–™–ï–ö–¢ –†–ê–ë–û–¢–´</b> –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üßë –§–ò–û: {target_user.full_name}"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    objects = await get_all_objects(session)
    
    if not objects:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã")
        await callback.answer()
        return
    
    keyboard = get_object_selection_keyboard(objects, 0, 5, "work")
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(UserEditStates.waiting_for_new_work_object)
    await state.update_data(edit_type="work_object", old_value=current_object)
    await callback.answer()


@router.callback_query(UserEditStates.waiting_for_new_work_object)
async def process_new_work_object(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    if callback.data.startswith("select_work_object:"):
        object_id = int(callback.data.split(":")[1])
        
        data = await state.get_data()
        editing_user_id = data.get('editing_user_id')
        
        target_user = await get_user_with_details(session, editing_user_id)
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        obj = await get_object_by_id(session, object_id)
        if not obj:
            await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await state.update_data(new_value=object_id, new_object_name=obj.name)
        
        current_role = target_user.roles[0].name if target_user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
        
        confirmation_text = f"""‚ö†Ô∏è–ù–û–í–´–ô –û–ë–™–ï–ö–¢ –†–ê–ë–û–¢–´:
‚ö†Ô∏è{obj.name}

–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üßë –§–ò–û: {target_user.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {target_user.phone_number}
üÜî Telegram ID: {target_user.tg_id}
üë§ Username: @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {target_user.registration_date.strftime('%d.%m.%Y %H:%M') if target_user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üëë –†–æ–ª–∏: {current_role}
üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {target_user.groups[0].name if target_user.groups else '–ù–µ—Ç –≥—Ä—É–ø–ø—ã'}
üìç2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã: {target_user.work_object.name if target_user.work_object else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"""
        
        keyboard = get_edit_confirmation_keyboard()
        await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
        await state.set_state(UserEditStates.waiting_for_change_confirmation)
        await callback.answer()
        
    elif callback.data.startswith("work_object_page:"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = int(callback.data.split(":")[1])
        objects = await get_all_objects(session)
        keyboard = get_object_selection_keyboard(objects, page, 5, "work")
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()
    
    elif callback.data == "cancel_edit":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        await callback_cancel_edit(callback, state, session)


@router.callback_query(UserEditStates.waiting_for_change_confirmation, F.data == "confirm_change")
async def process_confirm_change(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    data = await state.get_data()
    editing_user_id = data.get('editing_user_id')
    edit_type = data.get('edit_type')
    new_value = data.get('new_value')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
    recruiter = await get_user_by_tg_id(session, callback.from_user.id)
    if not recruiter:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        await state.clear()
        return
        
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    success = False
    error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    bot = callback.bot
    
    if edit_type == "full_name":
        success = await update_user_full_name(session, editing_user_id, new_value, recruiter.id, bot)
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û"
    elif edit_type == "phone":
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_user = await get_user_by_phone(session, new_value)
        if existing_user and existing_user.id != editing_user_id:
            error_message = f"‚ùå –¢–µ–ª–µ—Ñ–æ–Ω {new_value} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            success = False
        else:
            success = await update_user_phone_number(session, editing_user_id, new_value, recruiter.id, bot)
            error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    elif edit_type == "role":
        success = await update_user_role(session, editing_user_id, new_value, recruiter.id, bot)
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏"
    elif edit_type == "group":
        success = await update_user_group(session, editing_user_id, new_value, recruiter.id, bot)
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã"
    elif edit_type == "internship_object":
        success = await update_user_internship_object(session, editing_user_id, new_value, recruiter.id, bot)
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"
    elif edit_type == "work_object":
        success = await update_user_work_object(session, editing_user_id, new_value, recruiter.id, bot)
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç—ã"
        
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–Ω–æ–≤–∞
        target_user = await get_user_with_details(session, editing_user_id)
        if target_user:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –¢–ó
            role_name = target_user.roles[0].name if target_user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
            group_name = target_user.groups[0].name if target_user.groups else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
            
            success_message = f"""‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã</b>

ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.full_name}

<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {target_user.phone_number}
<b>Username:</b> @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>–ù–æ–º–µ—Ä:</b> #{target_user.id}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {target_user.registration_date.strftime('%d.%m.%Y %H:%M') if target_user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>
<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}
<b>–†–æ–ª—å:</b> {role_name}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìç <b>–û–±—ä–µ–∫—Ç:</b>
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤
            if role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]:
                if target_user.internship_object:
                    success_message += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {target_user.internship_object.name}\n"
                else:
                    success_message += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
                
            # –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã
            if target_user.work_object:
                success_message += f"<b>–†–∞–±–æ—Ç—ã:</b> {target_user.work_object.name}\n"
            else:
                success_message += f"<b>–†–∞–±–æ—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
                
            success_message += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            keyboard = get_user_editor_keyboard(role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"])
            
            await callback.message.edit_text(success_message, reply_markup=keyboard, parse_mode="HTML")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            await state.set_state(UserEditStates.viewing_user_info)
            await state.update_data(editing_user_id=editing_user_id, viewing_user_id=editing_user_id)
            
            log_user_action(callback.from_user.id, f"edit_user_{edit_type}", 
                          f"Changed {edit_type} for user {editing_user_id}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É", callback_data=f"edit_user:{editing_user_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(error_message, reply_markup=keyboard, parse_mode="HTML")
        log_user_error(callback.from_user.id, f"edit_user_{edit_type}_failed", 
                      f"Failed to change {edit_type} for user {editing_user_id}")
        await state.set_state(UserEditStates.viewing_user_info)
        await state.update_data(viewing_user_id=editing_user_id)
        
    await callback.answer()


@router.callback_query(UserEditStates.waiting_for_change_confirmation, F.data == "cancel_change")
async def process_cancel_change(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É"""
    try:
        data = await state.get_data()
        editing_user_id = data.get('editing_user_id')
        
        if not editing_user_id:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_cancel_edit(callback, state, session)
        log_user_action(callback.from_user.id, "cancel_change", f"Returned to editor for user {editing_user_id}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_change_error", str(e))


@router.callback_query(F.data == "delete_user", UserEditStates.viewing_user_info)
async def callback_delete_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await state.get_data()
        user_id = data.get("viewing_user_id")
        
        user = await get_user_by_id(session, user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        warning_text = (
            f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b> ‚ö†Ô∏è\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–û–õ–ù–û–°–¢–¨–Æ –£–î–ê–õ–ò–¢–¨ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ <b>{user.full_name}</b>\n"
            f"üìû {user.phone_number}\n"
            f"üÜî #{user.id}\n\n"
            f"‚ö†Ô∏è <b>–ü–û–°–õ–ï–î–°–¢–í–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø:</b>\n\n"
            f"<b>–î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:</b>\n"
            f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –£–î–ê–õ–ï–ù –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            f"‚Ä¢ –ü—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            f"‚Ä¢ –í–°–ï –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ü–û–¢–ï–†–Ø–ù–´\n\n"
            f"<b>–î–õ–Ø –°–ò–°–¢–ï–ú–´:</b>\n"
            f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ - –£–î–ê–õ–ï–ù–´\n"
            f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π - –£–î–ê–õ–ï–ù–´\n"
            f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ - –£–î–ê–õ–ï–ù–´\n"
            f"‚Ä¢ –°–≤—è–∑–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏ - –£–î–ê–õ–ï–ù–´\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –£–î–ê–õ–ï–ù–ê\n\n"
            f"‚ÑπÔ∏è <b>–í–ê–ñ–ù–û:</b>\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º —Ç–µ—Å—Ç—ã, —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –≥—Ä—É–ø–ø—ã, –æ–±—ä–µ–∫—Ç—ã –û–°–¢–ê–ù–£–¢–°–Ø –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            f"‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û\n\n"
            f"<b>–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>"
        )
        
        await callback.message.edit_text(
            warning_text,
            reply_markup=get_user_deletion_confirmation_keyboard(user_id),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")
        log_user_error(callback.from_user.id, "delete_user_error", str(e))


@router.callback_query(F.data.startswith("confirm_delete_user:"))
async def callback_confirm_delete_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        user = await get_user_by_id(session, user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_name = user.full_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º filter_type –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        filter_type = data.get('filter_type', 'all')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        success = await delete_user(session, user_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"üë§ {user_name}\n"
                f"üÜî #{user_id}\n\n"
                f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            await state.clear()
            await state.set_state(UserEditStates.waiting_for_filter_selection)
            log_user_action(callback.from_user.id, "user_deleted", f"Deleted user {user_id}: {user_name}")
        else:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data=f"back_to_view_after_error:{user_id}")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            await state.set_state(UserEditStates.viewing_user_info)
            await state.update_data(viewing_user_id=user_id, filter_type=filter_type)
        
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        log_user_error(callback.from_user.id, "confirm_delete_user_error", f"Invalid data: {callback.data}")


@router.callback_query(F.data.startswith("cancel_delete_user:"))
async def callback_cancel_delete_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        user = await get_user_by_id(session, user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        roles = await get_user_roles(session, user.id)
        role_name = roles[0].name if roles else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        group_name = user.groups[0].name if user.groups else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        is_trainee = role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        text = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"<b>Username:</b> @{user.username if user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{user.id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}\n"
            f"<b>–†–æ–ª—å:</b> {role_name}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
        )
        
        if is_trainee:
            if user.internship_object:
                text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {user.internship_object.name}\n"
            else:
                text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        if user.work_object:
            text += f"<b>–†–∞–±–æ—Ç—ã:</b> {user.work_object.name}\n"
        else:
            text += f"<b>–†–∞–±–æ—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_user_editor_keyboard(is_trainee)
        )
        await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        log_user_error(callback.from_user.id, "cancel_delete_user_error", f"Invalid data: {callback.data}")


@router.callback_query(F.data == "back_to_view_user", UserEditStates.viewing_user_info)
async def callback_back_to_view_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    try:
        data = await state.get_data()
        user_id = data.get("viewing_user_id")
        
        if not user_id:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        filter_type = data.get('filter_type', 'all')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        success = await show_user_info_detail(callback, user_id, session, filter_type)
        if success:
            await callback.answer()
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_view_user_error", str(e))


@router.callback_query(F.data.startswith("back_to_view_after_error:"))
async def callback_back_to_view_after_error(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        data = await state.get_data()
        filter_type = data.get('filter_type', 'all')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        success = await show_user_info_detail(callback, user_id, session, filter_type)
        if success:
            await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_view_after_error_error", f"Invalid data: {callback.data}")


@router.callback_query(F.data == "cancel_edit")
async def callback_cancel_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await state.get_data()
        editing_user_id = data.get('editing_user_id')
        
        if not editing_user_id:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user = await get_user_with_details(session, editing_user_id)
        if not target_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        role_name = target_user.roles[0].name if target_user.roles else "–ù–µ—Ç —Ä–æ–ª–∏"
        group_name = target_user.groups[0].name if target_user.groups else "–ù–µ—Ç –≥—Ä—É–ø–ø—ã"
        
        text = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_user.full_name}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {target_user.phone_number}\n"
            f"<b>Username:</b> @{target_user.username if target_user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{target_user.id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {target_user.registration_date.strftime('%d.%m.%Y %H:%M') if target_user.registration_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}\n"
            f"<b>–†–æ–ª—å:</b> {role_name}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]:
            if target_user.internship_object:
                text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {target_user.internship_object.name}\n"
            else:
                text += f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        if target_user.work_object:
            text += f"<b>–†–∞–±–æ—Ç—ã:</b> {target_user.work_object.name}\n"
        else:
            text += f"<b>–†–∞–±–æ—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"
        
        text += "\n<b>–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>"
        
        is_trainee = role_name in ["–°—Ç–∞–∂–µ—Ä", "–°—Ç–∞–∂—ë—Ä"]
        
        await callback.message.edit_text(
            text,
            reply_markup=get_user_editor_keyboard(is_trainee),
            parse_mode="HTML"
        )
        
        await state.set_state(UserEditStates.viewing_user_info)
        await callback.answer()
        log_user_action(callback.from_user.id, "cancel_edit", f"User: {editing_user_id}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_edit_error", str(e))
