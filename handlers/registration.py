from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
import os

from database.db import get_user_by_tg_id, create_user, create_user_without_role, check_phone_exists, create_initial_admin_with_token, get_users_by_role, validate_admin_token
from keyboards.keyboards import get_contact_keyboard, get_role_selection_keyboard
from states.states import RegistrationStates
from utils.validators import validate_full_name, validate_phone_number
from utils.logger import log_user_action, log_user_error

router = Router()

async def get_admin_settings() -> tuple[int, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    max_admins = int(os.getenv("MAX_ADMINS", "5"))
    admin_tokens_str = os.getenv("ADMIN_INIT_TOKENS", os.getenv("ADMIN_INIT_TOKEN", ""))
    return max_admins, admin_tokens_str

async def show_admin_token_prompt(message: Message, state: FSMContext, max_admins: int, existing_managers: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if len(existing_managers) == 0:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ - —ç—Ç–æ –ø–µ—Ä–≤—ã–π
        await message.answer(
            "üîê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. "
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_token:skip")]
            ])
        )
    else:
        # –ï—Å—Ç—å –∞–¥–º–∏–Ω—ã, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ
        await message.answer(
            "üîê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"–í —Å–∏—Å—Ç–µ–º–µ —É–∂–µ –µ—Å—Ç—å {len(existing_managers)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä(–æ–≤).\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. "
            "–ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_token:skip")]
            ])
        )
    await state.set_state(RegistrationStates.waiting_for_admin_token)

@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext, session: AsyncSession):
    user = await get_user_by_tg_id(session, message.from_user.id)
    
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.")
        log_user_action(message.from_user.id, message.from_user.username, "attempted to register again")
        return
    
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é).")
    await state.set_state(RegistrationStates.waiting_for_full_name)
    log_user_action(message.from_user.id, message.from_user.username, "started registration")

@router.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    is_valid, formatted_name = validate_full_name(message.text)
    
    if not is_valid:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã."
        )
        log_user_error(message.from_user.id, message.from_user.username, f"invalid full name: {message.text}")
        return
    
    await state.update_data(full_name=formatted_name)
    log_user_action(message.from_user.id, message.from_user.username, "provided full name", {"full_name": formatted_name})
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.",
        reply_markup=get_contact_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_phone)

@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    phone_number = message.contact.phone_number
    
    is_valid, normalized_phone = validate_phone_number(phone_number)
    
    if not is_valid:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.",
            reply_markup=get_contact_keyboard()
        )
        log_user_error(message.from_user.id, message.from_user.username, f"invalid phone from contact: {phone_number}")
        return
    
    if await check_phone_exists(session, normalized_phone):
        await message.answer(
            "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram."
        )
        log_user_error(message.from_user.id, message.from_user.username, f"attempted to register with existing phone: {normalized_phone}")
        await state.clear()
        return
    
    await state.update_data(phone_number=normalized_phone)
    log_user_action(message.from_user.id, message.from_user.username, "provided phone via contact", {"phone": normalized_phone})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    max_admins, admin_tokens_str = await get_admin_settings()
    existing_managers = await get_users_by_role(session, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
    allow_auto_role = os.getenv("ALLOW_AUTO_ROLE_ASSIGNMENT", "false").lower() == "true"

    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
    if admin_tokens_str and len(existing_managers) < max_admins:
        await show_admin_token_prompt(message, state, max_admins, existing_managers)
        return
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if allow_auto_role:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_role = os.getenv("DEFAULT_ROLE", "–°—Ç–∞–∂–µ—Ä")
        user_data = await state.get_data()
        user_data['tg_id'] = message.from_user.id
        user_data['username'] = message.from_user.username
        
        try:
            await create_user(session, user_data, default_role, bot)
            
            auto_auth_allowed = os.getenv("ALLOW_AUTO_AUTH", "true").lower() == "true"
            if auto_auth_allowed:
                await message.answer(
                    f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{default_role}</b>.\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                    f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å.",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{default_role}</b>.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.\n\n"
                    f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å.",
                    parse_mode="HTML"
                )
            
            log_user_action(
                message.from_user.id, 
                message.from_user.username, 
                "auto registration completed", 
                {"role": default_role, "full_name": user_data['full_name']}
            )
            
            await state.clear()
            return
        except Exception as e:
            log_user_error(message.from_user.id, message.from_user.username, "auto registration error", e)
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
    user_data = await state.get_data()
    user_data['tg_id'] = message.from_user.id
    user_data['username'] = message.from_user.username
    
    try:
        await create_user_without_role(session, user_data, bot)
        
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç-–±–æ—Ç—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç."
        )
        
        log_user_action(
            message.from_user.id, 
            message.from_user.username, 
            "registration completed (waiting activation)", 
            {"full_name": user_data['full_name'], "phone": user_data['phone_number']}
        )
        
        await state.clear()
        
    except Exception as e:
        log_user_error(message.from_user.id, message.from_user.username, "registration error", str(e))
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone_manually(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    is_valid, normalized_phone = validate_phone_number(message.text)
    
    if not is_valid:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'.",
            reply_markup=get_contact_keyboard()
        )
        log_user_error(message.from_user.id, message.from_user.username, f"invalid phone manual entry: {message.text}")
        return
    
    if await check_phone_exists(session, normalized_phone):
        await message.answer(
            "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram."
        )
        log_user_error(message.from_user.id, message.from_user.username, f"attempted to register with existing phone: {normalized_phone}")
        await state.clear()
        return
    
    await state.update_data(phone_number=normalized_phone)
    log_user_action(message.from_user.id, message.from_user.username, "provided phone manually", {"phone": normalized_phone})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    max_admins, admin_tokens_str = await get_admin_settings()
    existing_managers = await get_users_by_role(session, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
    allow_auto_role = os.getenv("ALLOW_AUTO_ROLE_ASSIGNMENT", "false").lower() == "true"

    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
    if admin_tokens_str and len(existing_managers) < max_admins:
        await show_admin_token_prompt(message, state, max_admins, existing_managers)
        return
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if allow_auto_role:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_role = os.getenv("DEFAULT_ROLE", "–°—Ç–∞–∂–µ—Ä")
        user_data = await state.get_data()
        user_data['tg_id'] = message.from_user.id
        user_data['username'] = message.from_user.username
        
        try:
            await create_user(session, user_data, default_role, bot)
            
            auto_auth_allowed = os.getenv("ALLOW_AUTO_AUTH", "true").lower() == "true"
            if auto_auth_allowed:
                await message.answer(
                    f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{default_role}</b>.\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                    f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å.",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                    f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{default_role}</b>.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.\n\n"
                    f"–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å.",
                    parse_mode="HTML"
                )
            
            log_user_action(
                message.from_user.id, 
                message.from_user.username, 
                "auto registration completed", 
                {"role": default_role, "full_name": user_data['full_name']}
            )
            
            await state.clear()
            return
        except Exception as e:
            log_user_error(message.from_user.id, message.from_user.username, "auto registration error", e)
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
    user_data = await state.get_data()
    user_data['tg_id'] = message.from_user.id
    user_data['username'] = message.from_user.username
    
    try:
        await create_user_without_role(session, user_data, bot)
        
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç-–±–æ—Ç—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç."
        )
        
        log_user_action(
            message.from_user.id, 
            message.from_user.username, 
            "registration completed (waiting activation)", 
            {"full_name": user_data['full_name'], "phone": user_data['phone_number']}
        )
        
        await state.clear()
        
    except Exception as e:
        log_user_error(message.from_user.id, message.from_user.username, "registration error", str(e))
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()

@router.callback_query(RegistrationStates.waiting_for_admin_token, F.data == "admin_token:skip")
async def process_skip_admin_token(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
    user_data = await state.get_data()
    user_data['tg_id'] = callback.from_user.id
    user_data['username'] = callback.from_user.username
    
    try:
        await create_user_without_role(session, user_data, bot)
        
        await callback.message.edit_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç-–±–æ—Ç—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç."
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "registration completed (waiting activation, skipped admin token)", 
            {"full_name": user_data['full_name'], "phone": user_data['phone_number']}
        )
        
        await state.clear()
        
    except Exception as e:
        log_user_error(callback.from_user.id, callback.from_user.username, "registration error", str(e))
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear()
    
    await callback.answer()

@router.message(RegistrationStates.waiting_for_admin_token)
async def process_admin_token(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        user_data = await state.get_data()
        user_data['tg_id'] = message.from_user.id
        user_data['username'] = message.from_user.username
        
        try:
            await create_user_without_role(session, user_data, bot)
            
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç-–±–æ—Ç—É.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç."
            )
            
            log_user_action(
                message.from_user.id, 
                message.from_user.username, 
                "registration completed (waiting activation, skipped admin token)", 
                {"full_name": user_data['full_name'], "phone": user_data['phone_number']}
            )
            
            await state.clear()
            
        except Exception as e:
            log_user_error(message.from_user.id, message.from_user.username, "registration error", str(e))
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()
        return
    
    user_data = await state.get_data()
    user_data['tg_id'] = message.from_user.id
    user_data['username'] = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    from database.db import validate_admin_token
    if await validate_admin_token(session, message.text.strip()):
        # –¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
        await message.answer(
            "üéâ <b>–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data="select_admin_role:–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"),
                    InlineKeyboardButton(text="üë®‚Äçüíº –†–µ–∫—Ä—É—Ç–µ—Ä", callback_data="select_admin_role:–†–µ–∫—Ä—É—Ç–µ—Ä")
                ],
                [
                    InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_admin_role_selection")
                ]
            ])
        )
        await state.set_state(RegistrationStates.waiting_for_admin_role_selection)
        log_user_action(
            message.from_user.id,
            message.from_user.username,
            "admin_token_validated",
            {"full_name": user_data['full_name']}
        )
    else:
        # –¢–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º
        try:
            await create_user_without_role(session, user_data, bot)
            
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç</b>\n\n"
                "–¢–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç-–±–æ—Ç—É.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç.",
                parse_mode="HTML"
            )
            
            log_user_action(
                message.from_user.id, 
                message.from_user.username, 
                "registration completed (waiting activation, invalid admin token)", 
                {"full_name": user_data['full_name'], "phone": user_data['phone_number']}
            )
            
            await state.clear()
            
        except Exception as e:
            log_user_error(message.from_user.id, message.from_user.username, "registration error", str(e))
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await state.clear()

@router.callback_query(RegistrationStates.waiting_for_role, F.data.startswith("role:"))
async def process_role_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    selected_role = callback.data.split(':')[1]
    
    user_data = await state.get_data()
    
    user_data['tg_id'] = callback.from_user.id
    user_data['username'] = callback.from_user.username
    
    try:
        await create_user(session, user_data, selected_role, bot)
        
        auto_auth_allowed = os.getenv("ALLOW_AUTO_AUTH", "true").lower() == "true"
        if auto_auth_allowed:
            await callback.message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {selected_role}.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        else:
            await callback.message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {selected_role}.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.")
        
        await callback.message.edit_reply_markup(reply_markup=None)
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "completed registration", 
            {"role": selected_role, "full_name": user_data['full_name']}
        )
        
        await state.clear()
    except Exception as e:
        log_user_error(callback.from_user.id, callback.from_user.username, "registration error", e)
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.")
    
    await callback.answer()

@router.callback_query(RegistrationStates.waiting_for_role, F.data == "cancel_registration")
async def process_cancel_registration(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    
    await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    
    await callback.message.edit_reply_markup(reply_markup=None)
    
    log_user_action(callback.from_user.id, callback.from_user.username, "cancelled registration via button")
    
    await callback.answer()

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    log_user_action(message.from_user.id, message.from_user.username, "cancelled registration")

@router.message(RegistrationStates.waiting_for_role)
async def role_selection_error(message: Message, state: FSMContext, session: AsyncSession):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    max_admins, admin_tokens_str = await get_admin_settings()
    existing_managers = await get_users_by_role(session, "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    if admin_tokens_str:
        user_data = await state.get_data()
        user_data['tg_id'] = message.from_user.id
        user_data['username'] = message.from_user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        from database.db import validate_admin_token
        if await validate_admin_token(session, message.text.strip()):
            # –¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
            await message.answer(
                "üéâ <b>–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data="select_admin_role:–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"),
                        InlineKeyboardButton(text="üë®‚Äçüíº –†–µ–∫—Ä—É—Ç–µ—Ä", callback_data="select_admin_role:–†–µ–∫—Ä—É—Ç–µ—Ä")
                    ],
                    [
                        InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_admin_role_selection")
                    ]
                ])
            )
            await state.set_state(RegistrationStates.waiting_for_admin_role_selection)
            log_user_action(
                message.from_user.id,
                message.from_user.username,
                "admin_token_validated",
                {"full_name": user_data['full_name']}
            )
            return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

@router.message(RegistrationStates.waiting_for_phone)
async def phone_error(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.",
        reply_markup=get_contact_keyboard()
    )

@router.message(RegistrationStates.waiting_for_full_name)
async def full_name_error(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.")


@router.callback_query(F.data.startswith("select_admin_role:"), RegistrationStates.waiting_for_admin_role_selection)
async def callback_select_admin_role(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    role_name = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    user_data['tg_id'] = callback.from_user.id
    user_data['username'] = callback.from_user.username

    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
    from database.db import create_admin_with_role
    success = await create_admin_with_role(session, user_data, role_name)

    if success:
        role_display = "üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º" if role_name == "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" else "üë®‚Äçüíº –†–µ–∫—Ä—É—Ç–µ—Ä–æ–º"

        await callback.message.edit_text(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ {role_display} —Å–∏—Å—Ç–µ–º—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.",
            parse_mode="HTML"
        )
        log_user_action(
            callback.from_user.id,
            callback.from_user.username,
            f"admin_created_with_role_{role_name}",
            {"full_name": user_data['full_name'], "role": role_name}
        )
        await state.clear()
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "cancel_admin_role_selection", RegistrationStates.waiting_for_admin_role_selection)
async def callback_cancel_admin_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        "üö´ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer() 