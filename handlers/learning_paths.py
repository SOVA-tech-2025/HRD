import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_all_learning_paths, get_learning_path_by_id, save_trajectory_to_database,
    save_trajectory_with_attestation_and_group, delete_learning_path,
    create_attestation, add_attestation_question, get_all_attestations,
    get_attestation_by_id, check_attestation_in_use, delete_attestation, 
    get_all_active_tests, create_test, add_question_to_test,
    get_all_groups, check_user_permission, get_user_by_tg_id, get_user_roles,
    get_trajectories_using_attestation, get_trajectory_usage_info
)
from handlers.auth import check_auth
from states.states import LearningPathStates, AttestationStates
from keyboards.keyboards import (
    get_learning_paths_main_keyboard, get_trajectory_creation_start_keyboard,
    get_test_selection_keyboard, get_test_creation_cancel_keyboard,
    get_test_materials_choice_keyboard, get_test_materials_skip_keyboard,
    get_test_description_skip_keyboard, get_question_type_keyboard,
    get_more_questions_keyboard, get_session_management_keyboard,
    get_attestation_selection_keyboard, get_trajectory_save_confirmation_keyboard,
    get_trajectory_attestation_confirmation_keyboard, get_trajectory_final_confirmation_keyboard, 
    get_attestations_main_keyboard, get_attestation_creation_start_keyboard, 
    get_attestation_questions_keyboard, get_group_selection_keyboard, 
    get_main_menu_keyboard, get_keyboard_by_role, get_trajectory_selection_keyboard,
    get_trajectory_deletion_confirmation_keyboard
)
from utils.logger import log_user_action, log_user_error
from utils.validators import validate_name

router = Router()


@router.message(F.text.in_(["–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏", "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è üìñ"]))
async def cmd_learning_paths(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏'"""
    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ FSM –ø—Ä–∏ –≤—Ö–æ–¥–µ
        await state.clear()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        has_permission = await check_user_permission(session, user.id, "manage_groups")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            log_user_error(user.tg_id, "learning_paths_access_denied", "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø—Ä–∞–≤")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        text = ("üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n\n"
                "–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
                "1 ‚ûï–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
                "2 ‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
                "3 üóëÔ∏è–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è")
        
        await message.answer(
            text,
            reply_markup=get_learning_paths_main_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.main_menu)
        log_user_action(user.tg_id, "opened_learning_paths", "–û—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log_user_error(message.from_user.id, "learning_paths_error", str(e))


@router.callback_query(F.data == "create_trajectory", LearningPathStates.main_menu)
async def callback_create_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        instruction_text = (
            "üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            "üìà<b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø</b>\n\n"
            "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö:\n"
            "- –≠—Ç–∞–ø–æ–≤\n"
            "- –°–µ—Å—Å–∏–π\n"
            "- –¢–µ—Å—Ç–æ–≤\n\n"
            "–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É:\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è  —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, —ç—Ç–∞–ø—ã –≤ —ç—Ç–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–∞–ø–∞ –∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–º —ç—Ç–∞–ø–æ–º –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è - –æ–Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —ç–∫–∑–∞–º–µ–Ω—É –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≤ —à–∫–æ–ª–µ.\n\n"
            "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞–∂—ë—Ä—É –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏,—á—Ç–æ —Å—Ç–∞–∂—ë—Ä –ø—Ä–æ—à—ë–ª –≤—Å–µ —ç—Ç–∞–ø—ã –¥–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.\n\n"
            "–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —ç—Ç–∞–ø –¥–ª—è —Å—Ç–∞–∂—ë—Ä–∞\n\n"
            "–°—Ç–∞–∂—ë—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–µ—Å—Å–∏–∏ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–∞–ø–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º)\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞–∂—ë—Ä—É —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø (–ª–∏–±–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–∞–Ω—å—à–µ, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å)"
        )
        
        await callback.message.edit_text(
            instruction_text,
            reply_markup=get_trajectory_creation_start_keyboard(),
            parse_mode="HTML"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –≤ state
        await state.update_data(
            trajectory_data={
                'name': '',
                'stages': [],
                'created_by_id': None
            },
            current_stage_number=1,
            current_session_number=1,
            current_test_number=1
        )
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "trajectory_creation_start_error", str(e))


@router.callback_query(F.data == "start_trajectory_creation", LearningPathStates.main_menu)
async def callback_start_trajectory_creation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è creator_id
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º creator_id –≤ –¥–∞–Ω–Ω—ã—Ö
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_data['created_by_id'] = user.id
        await state.update_data(trajectory_data=trajectory_data)
        
        text = (
            "üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            "üü°<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.waiting_for_trajectory_name)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "start_trajectory_creation_error", str(e))


@router.message(LearningPathStates.waiting_for_trajectory_name)
async def process_trajectory_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_data['name'] = name
        await state.update_data(trajectory_data=trajectory_data)
        
        text = (
            "üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {name}\n"
            "üü°<b>–≠—Ç–∞–ø 1:</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≠—Ç–∞–ø–∞ 1"
        )
        
        await message.answer(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.waiting_for_stage_name)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
        log_user_error(message.from_user.id, "trajectory_name_error", str(e))


@router.message(LearningPathStates.waiting_for_stage_name)
async def process_stage_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞"""
    try:
        stage_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
        if not validate_name(stage_name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        current_stage_number = data.get('current_stage_number', 1)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–ø
        new_stage = {
            'name': stage_name,
            'order': current_stage_number,
            'sessions': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        if 'stages' not in trajectory_data:
            trajectory_data['stages'] = []
        trajectory_data['stages'].append(new_stage)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º state –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            trajectory_data=trajectory_data,
            current_session_number=1  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø—Ä–æ—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–µ—Å—Å–∏—è 1:</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ 1"
        )
        
        await message.answer(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.waiting_for_session_name)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞")
        log_user_error(message.from_user.id, "stage_name_error", str(e))


@router.message(LearningPathStates.waiting_for_session_name)
async def process_session_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    try:
        session_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        if not validate_name(session_name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        current_session_number = data.get('current_session_number', 1)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        new_session = {
            'name': session_name,
            'order': current_session_number,
            'tests': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç—Ç–∞–ø—É
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            last_stage['sessions'].append(new_session)
        
        await state.update_data(trajectory_data=trajectory_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await get_all_active_tests(session)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            f"üü°<b>–¢–µ—Å—Ç 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {current_session_number}"
        )
        
        await message.answer(
            text,
            reply_markup=get_test_selection_keyboard(tests, []),
            parse_mode="HTML"
        )
        await state.set_state(LearningPathStates.waiting_for_test_selection)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
        log_user_error(message.from_user.id, "session_name_error", str(e))


def generate_trajectory_progress(trajectory_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    progress = ""
    
    if trajectory_data.get('name'):
        progress += f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {trajectory_data['name']}\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç—Ç–∞–ø—ã
    for stage in trajectory_data.get('stages', []):
        progress += f"üü¢<b>–≠—Ç–∞–ø {stage['order']}:</b> {stage['name']}\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
        for session in stage.get('sessions', []):
            progress += f"üü¢<b>–°–µ—Å—Å–∏—è {session['order']}:</b> {session['name']}\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
            for i, test in enumerate(session.get('tests', []), 1):
                test_name = test.get('name', f'–¢–µ—Å—Ç {test.get("id", "?")}')
                progress += f"üü¢<b>–¢–µ—Å—Ç {i}:</b> {test_name}\n"
    
    return progress


@router.callback_query(F.data == "create_new_test", LearningPathStates.waiting_for_test_selection)
async def callback_create_new_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞\n"
            "üìù –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.\n"
            "1Ô∏è‚É£ –®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n"
            "üí° –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤\n"
            "üìã –ü—Ä–∏–º–µ—Ä: ¬´–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏¬ª –∏–ª–∏ ¬´–¢–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_test_creation_cancel_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.creating_test_name)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "create_new_test_error", str(e))


@router.message(LearningPathStates.creating_test_name)
async def process_new_test_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        test_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(test_name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        await state.update_data(new_test_name=test_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {test_name}\n"
            "2Ô∏è‚É£ –®–∞–≥ 2: –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
            "üìö –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–∑—É—á–∏—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞?\n"
            "üí° –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å:\n"
            "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            "‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∫—É—Ä—Å—ã\n"
            "‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —É—á–µ–±–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n"
            "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É?"
        )
        
        await message.answer(
            text,
            reply_markup=get_test_materials_choice_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.creating_test_materials_choice)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞")
        log_user_error(message.from_user.id, "new_test_name_error", str(e))


@router.callback_query(F.data == "add_materials", LearningPathStates.creating_test_materials_choice)
async def callback_add_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_test_materials_skip_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.creating_test_materials)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "add_materials_error", str(e))


@router.callback_query(F.data == "skip_materials", LearningPathStates.creating_test_materials_choice)
@router.callback_query(F.data == "skip_materials", LearningPathStates.creating_test_materials)
async def callback_skip_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é"""
    try:
        await callback.answer()
        await state.update_data(new_test_materials="")
        await show_test_description_step(callback.message, state)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "skip_materials_error", str(e))


@router.message(LearningPathStates.creating_test_materials)
async def process_test_materials(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–µ—Å—Ç–∞"""
    try:
        materials = message.text.strip()
        await state.update_data(new_test_materials=materials)
        await show_test_description_step(message, state)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        log_user_error(message.from_user.id, "test_materials_error", str(e))


async def show_test_description_step(message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "3Ô∏è‚É£ –®–∞–≥ 3: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞–∂–µ—Ä–∞–º –ø–æ–Ω—è—Ç—å:\n"
            "‚Ä¢ –û —á–µ–º —ç—Ç–æ—Ç —Ç–µ—Å—Ç\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è\n"
            "‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–∂–µ—Ä–∞\n"
            "üí° –ü—Ä–∏–º–µ—Ä: ¬´–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–º–µ–Ω–∏–µ —Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏¬ª\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
        )
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å message –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            text,
            reply_markup=get_test_description_skip_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.creating_test_description)
        
    except Exception as e:
        log_user_error(message.from_user.id if hasattr(message, 'from_user') else 0, "show_description_error", str(e))


@router.callback_query(F.data == "skip_description", LearningPathStates.creating_test_description)
async def callback_skip_description(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        await callback.answer()
        await state.update_data(new_test_description="")
        await show_question_type_step(callback.message, state)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "skip_description_error", str(e))


@router.message(LearningPathStates.creating_test_description)
async def process_test_description(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        description = message.text.strip()
        await state.update_data(new_test_description=description)
        await show_question_type_step(message, state)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è")
        log_user_error(message.from_user.id, "test_description_error", str(e))


async def show_question_type_step(message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"
        )
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å message –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            text,
            reply_markup=get_question_type_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.creating_test_question_type)
        
    except Exception as e:
        log_user_error(message.from_user.id if hasattr(message, 'from_user') else 0, "show_question_type_error", str(e))


@router.callback_query(F.data.startswith("q_type:"), LearningPathStates.creating_test_question_type)
async def callback_question_type(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        await callback.answer()
        
        question_type = callback.data.split(":")[1]
        await state.update_data(new_test_question_type=question_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.creating_test_question_text)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "question_type_error", str(e))


@router.message(LearningPathStates.creating_test_question_text)
async def process_question_text(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        question_text = message.text.strip()
        
        if not question_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(new_test_question_text=question_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        q_type = data.get('new_test_question_type')
        
        if q_type == 'text':
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É):"
            )
            await message.answer(text, parse_mode="HTML")
            await state.set_state(LearningPathStates.creating_test_question_answer)
        elif q_type in ['single_choice', 'multiple_choice']:
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ **–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç** –æ—Ç–≤–µ—Ç–∞:"
            )
            await message.answer(text, parse_mode="HTML")
            await state.update_data(new_test_current_options=[])
            await state.set_state(LearningPathStates.creating_test_question_options)
        elif q_type == 'yes_no':
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º:"
            )
            await message.answer(
                text, 
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üëç –î–∞", callback_data="answer_bool:–î–∞")],
                    [InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="answer_bool:–ù–µ—Ç")]
                ])
            )
            await state.set_state(LearningPathStates.creating_test_question_answer)
        elif q_type == 'number':
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (—á–∏—Å–ª–æ):"
            )
            await message.answer(text, parse_mode="HTML")
            await state.set_state(LearningPathStates.creating_test_question_answer)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞")
        log_user_error(message.from_user.id, "question_text_error", str(e))


@router.message(LearningPathStates.creating_test_question_options)
async def process_question_option(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ"""
    try:
        data = await state.get_data()
        options = data.get('new_test_current_options') or []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if message.text.strip() in options:
            await message.answer("‚ùå –¢–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

        options.append(message.text.strip())
        await state.update_data(new_test_current_options=options)
        
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        current_options_text = "\n".join([f"  <b>{i+1}.</b> {opt}" for i, opt in enumerate(options)])
        
        if len(options) < 2:
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n\n<b>–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{current_options_text}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ **—Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç** –æ—Ç–≤–µ—Ç–∞:"
            )
            await message.answer(text, parse_mode="HTML")
        else:
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n\n<b>–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{current_options_text}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ **—Å–ª–µ–¥—É—é—â–∏–π** –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'."
            )
            await message.answer(
                text, 
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", callback_data="finish_trajectory_options")]
                ])
            )
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
        log_user_error(message.from_user.id, "question_option_error", str(e))


@router.callback_query(LearningPathStates.creating_test_question_answer, F.data.startswith("answer_bool:"))
async def process_trajectory_bool_answer(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –î–∞/–ù–µ—Ç –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        answer = callback.data.split(':')[1]
        await state.update_data(new_test_question_answer=answer)
        
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "üî¢ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –∏–ª–∏ 1.5."
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.creating_test_question_points)
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "trajectory_bool_answer_error", str(e))


@router.callback_query(LearningPathStates.creating_test_question_options, F.data == "finish_trajectory_options")
async def finish_adding_trajectory_options(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ"""
    try:
        data = await state.get_data()
        options = data.get('new_test_current_options') or []
        q_type = data.get('new_test_question_type')
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        if q_type == 'single_choice':
            # –î–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–æ—Ç –æ–Ω–∏:\n\n{options_text}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä** –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2):"
            )
            await callback.message.edit_text(text, parse_mode="HTML")
            await state.set_state(LearningPathStates.creating_test_question_answer)
        elif q_type == 'multiple_choice':
            # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
            text = (
                f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
                "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
                f"{trajectory_progress}"
                "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
                f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–æ—Ç –æ–Ω–∏:\n\n{options_text}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä–∞** –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3):"
            )
            await callback.message.edit_text(text, parse_mode="HTML")
            await state.set_state(LearningPathStates.creating_test_question_answer)
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "finish_trajectory_options_error", str(e))


@router.message(LearningPathStates.creating_test_question_answer)
async def process_question_answer(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        data = await state.get_data()
        q_type = data.get('new_test_question_type')
        answer = message.text.strip()
        
        if not answer:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        if q_type == 'single_choice':
            try:
                index = int(answer) - 1
                options = data.get('new_test_current_options') or []
                if not (0 <= index < len(options)):
                    raise ValueError
                answer = options[index]
            except (ValueError, IndexError):
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2):")
                return
        elif q_type == 'multiple_choice':
            try:
                indices = [int(i.strip()) - 1 for i in answer.split(',')]
                options = data.get('new_test_current_options') or []
                correct_answers = [options[i] for i in indices if 0 <= i < len(options)]
                if not correct_answers:
                    raise ValueError
                answer = correct_answers
            except (ValueError, IndexError):
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3):")
                return
        
        await state.update_data(new_test_question_answer=answer)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "üî¢ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –∏–ª–∏ 1.5."
        )
        
        await message.answer(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.creating_test_question_points)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
        log_user_error(message.from_user.id, "question_answer_error", str(e))


@router.message(LearningPathStates.creating_test_question_points)
async def process_question_points(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å"""
    try:
        try:
            points = float(message.text.strip())
            if points <= 0:
                raise ValueError("–ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 1.5)")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
        data = await state.get_data()
        existing_questions = data.get('new_test_questions') or []

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        new_question = {
            'question_number': len(existing_questions) + 1,
            'question_type': data.get('new_test_question_type'),
            'question_text': data.get('new_test_question_text'),
            'correct_answer': data.get('new_test_question_answer'),
            'points': points,
            'options': data.get('new_test_current_options', [])
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º
        existing_questions.append(new_question)

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        total_score = sum(q['points'] for q in existing_questions)

        await state.update_data(
            new_test_question_points=points,
            new_test_questions=existing_questions,
            new_test_total_score=total_score
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{len(existing_questions)} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            "–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞:\n"
            f" ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(existing_questions)}\n"
            f" ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {total_score}\n"
            "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?"
        )
        
        await message.answer(
            text,
            reply_markup=get_more_questions_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.creating_test_more_questions)
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–ª–æ–≤")
        log_user_error(message.from_user.id, "question_points_error", str(e))


@router.callback_query(F.data == "add_more_questions", LearningPathStates.creating_test_more_questions)
async def callback_add_more_questions(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Ç–µ—Å—Ç—É –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        data = await state.get_data()
        await state.update_data(
            new_test_question_type=None,
            new_test_question_text=None,
            new_test_question_answer=None,
            new_test_current_options=[],
            new_test_question_points=None
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await show_question_type_step(callback.message, state)

        log_user_action(callback.from_user.id, "trajectory_test_add_more_questions", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Ç–µ—Å—Ç—É –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")

    except Exception as e:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")
        log_user_error(callback.from_user.id, "trajectory_add_more_questions_error", str(e))


@router.callback_query(F.data == "finish_questions", LearningPathStates.creating_test_more_questions)
async def callback_finish_questions(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ö–æ–¥–Ω–æ–º—É –±–∞–ª–ª—É"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        total_score = data.get('new_test_total_score', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
            "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç: {total_score}\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 0.5 –¥–æ {total_score}):"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.creating_test_threshold)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "finish_questions_error", str(e))


@router.message(LearningPathStates.creating_test_threshold)
async def process_test_threshold(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        try:
            threshold = float(message.text.strip())
            data = await state.get_data()
            total_score = data.get('new_test_total_score', 0)
            
            if threshold < 0.5 or threshold > total_score:
                raise ValueError(f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.5 –¥–æ {total_score}")
        except ValueError as e:
            await message.answer(f"‚ùå {str(e)}")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        test_data = {
            'name': data.get('new_test_name'),
            'description': data.get('new_test_description', ''),
            'threshold_score': threshold,
            'max_score': data.get('new_test_total_score'),
            'material_link': data.get('new_test_materials', ''),
            'creator_id': data.get('trajectory_data', {}).get('created_by_id'),
            'stage_id': None
        }
        
        test = await create_test(session, test_data)
        if not test:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É
        questions = data.get('new_test_questions') or []
        for question_data in questions:
            question_data['test_id'] = test.id
            await add_question_to_test(session, question_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        trajectory_data = data.get('trajectory_data', {})
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            if last_stage.get('sessions'):
                last_session = last_stage['sessions'][-1]
                last_session['tests'].append({
                    'id': test.id,
                    'name': test.name,
                    'order': len(last_session['tests']) + 1
                })
        
        await state.update_data(trajectory_data=trajectory_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        percentage = (threshold / data.get('new_test_total_score', 1)) * 100
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –∫ –°–µ—Å—Å–∏–∏?</b>\n\n"
            f"‚úÖ –¢–µ—Å—Ç ¬´{test.name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –°–µ—Å—Å–∏–∏!\n"
            f"üìù –í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(questions)}\n"
            f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {data.get('new_test_total_score')}\n"
            f"üéØ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {threshold} ({percentage:.1f}%)"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = await get_all_active_tests(session)
        current_session_tests = []
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            if last_stage.get('sessions'):
                last_session = last_stage['sessions'][-1]
                current_session_tests = last_session.get('tests', [])
        
        await message.answer(
            text,
            reply_markup=get_test_selection_keyboard(tests, current_session_tests),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_test_selection)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        await state.update_data(
            new_test_name=None,
            new_test_description=None,
            new_test_materials=None,
            new_test_question_type=None,
            new_test_question_text=None,
            new_test_question_answer=None,
            new_test_question_points=None,
            new_test_questions=[],
            new_test_total_score=None
        )
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
        log_user_error(message.from_user.id, "test_threshold_error", str(e))


@router.callback_query(F.data.startswith("select_test:"), LearningPathStates.waiting_for_test_selection)
async def callback_select_existing_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    try:
        await callback.answer()
        
        test_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        tests = await get_all_active_tests(session)
        selected_test = next((t for t in tests if t.id == test_id), None)
        
        if not selected_test:
            await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            if last_stage.get('sessions'):
                last_session = last_stage['sessions'][-1]
                last_session['tests'].append({
                    'id': test_id,
                    'name': selected_test.name,
                    'order': len(last_session['tests']) + 1
                })
        
        await state.update_data(trajectory_data=trajectory_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üü°<b>–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –∫ –°–µ—Å—Å–∏–∏?</b>"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        current_session_tests = []
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            if last_stage.get('sessions'):
                last_session = last_stage['sessions'][-1]
                current_session_tests = last_session.get('tests', [])
        
        await callback.message.edit_text(
            text,
            reply_markup=get_test_selection_keyboard(tests, current_session_tests),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "select_test_error", str(e))


@router.callback_query(F.data == "save_session", LearningPathStates.waiting_for_test_selection)
async def callback_save_session(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∞–ø–∞–º–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        current_stage_number = data.get('current_stage_number', 1)
        current_session_number = data.get('current_session_number', 1)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        sessions_count = 0
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            sessions_count = len(last_stage.get('sessions', []))
        
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}\n"
            f"‚úÖ–í—ã –°–æ–∑–¥–∞–ª–∏ {sessions_count} –°–µ—Å—Å–∏—é –¥–ª—è {current_stage_number} –≠—Ç–∞–ø–∞!\n\n"
            "üü°–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–µ—Å—Å–∏—é?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_session_management_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.adding_session_to_stage)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "save_session_error", str(e))


@router.callback_query(F.data == "add_session", LearningPathStates.adding_session_to_stage)
async def callback_add_session(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∫ —Ç–µ–∫—É—â–µ–º—É —ç—Ç–∞–ø—É"""
    try:
        await callback.answer()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏
        data = await state.get_data()
        current_session_number = data.get('current_session_number', 1) + 1
        await state.update_data(current_session_number=current_session_number)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            f"üü°<b>–°–µ—Å—Å–∏—è {current_session_number}:</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ {current_session_number}"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.waiting_for_session_name)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "add_session_error", str(e))


@router.callback_query(F.data == "add_stage", LearningPathStates.adding_session_to_stage)
async def callback_add_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞
        data = await state.get_data()
        current_stage_number = data.get('current_stage_number', 1) + 1
        await state.update_data(
            current_stage_number=current_stage_number,
            current_session_number=1  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            f"üü°<b>–≠—Ç–∞–ø {current_stage_number}:</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≠—Ç–∞–ø–∞ {current_stage_number}"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(LearningPathStates.waiting_for_stage_name)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "add_stage_error", str(e))


@router.callback_query(F.data == "save_trajectory", LearningPathStates.adding_session_to_stage)
async def callback_save_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_trajectory_save_confirmation_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_trajectory_save_confirmation)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "save_trajectory_error", str(e))


@router.callback_query(F.data == "confirm_trajectory_save", LearningPathStates.waiting_for_trajectory_save_confirmation)
async def callback_confirm_trajectory_save(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        attestations = await get_all_attestations(session)
        
        if not attestations:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üîçüü°<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–∫–∞–∫ —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≤ —à–∫–æ–ª–µ), –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_attestation_selection_keyboard(attestations),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_attestation_selection)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "confirm_trajectory_save_error", str(e))


@router.callback_query(F.data.startswith("select_attestation:"), LearningPathStates.waiting_for_attestation_selection)
async def callback_select_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        attestation_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
        attestation = await get_attestation_by_id(session, attestation_id)
        if not attestation:
            await callback.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await state.update_data(selected_attestation_id=attestation_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            f"üîçüü¢<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n\n"
            "üü°–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_trajectory_attestation_confirmation_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_attestation_confirmation)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "select_attestation_error", str(e))


@router.callback_query(F.data == "confirm_attestation_and_proceed", LearningPathStates.waiting_for_attestation_confirmation)
async def callback_confirm_attestation_and_proceed(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 50 –¢–ó: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–æ–π '–î–∞' –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
        groups = await get_all_groups(session)
        if not groups:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
            return
        
        # –ü–£–ù–ö–¢ 52 –¢–ó: –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_group_selection_keyboard(groups, page=0),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await state.update_data(finalizing_trajectory=True)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "confirm_attestation_and_proceed_error", str(e))


@router.callback_query(F.data.startswith("select_group:"))
async def callback_select_group_for_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        if not data.get('finalizing_trajectory'):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à callback
        
        await callback.answer()
        
        group_id = int(callback.data.split(":")[1])
        attestation_id = data.get('selected_attestation_id')
        trajectory_data = data.get('trajectory_data', {})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        groups = await get_all_groups(session)
        selected_group = next((g for g in groups if g.id == group_id), None)
        group_name = selected_group.name if selected_group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
        
        attestations = await get_all_attestations(session)
        selected_attestation = next((a for a in attestations if a.id == attestation_id), None)
        attestation_name = selected_attestation.name if selected_attestation else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        await state.update_data(
            selected_group_id=group_id,
            selected_group_name=group_name,
            selected_attestation_name=attestation_name
        )
        
        # –ü–û –¢–ó –ü–£–ù–ö–¢ 54: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –≥—Ä—É–ø–ø–æ–π + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            f"üîçüü¢<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation_name}\n"
            f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}\n\n"
            "üü°–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_trajectory_final_confirmation_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_final_save_confirmation)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "select_group_trajectory_error", str(e))


@router.callback_query(F.data == "final_confirm_save", LearningPathStates.waiting_for_final_save_confirmation)
async def callback_final_confirm_save(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 55 –¢–ó: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        attestation_id = data.get('selected_attestation_id')
        group_id = data.get('selected_group_id')
        
        # –§–∏–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        success = await save_trajectory_with_attestation_and_group(
            session, trajectory_data, attestation_id, group_id
        )
        
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏", show_alert=True)
            return
        
        # –ü–£–ù–ö–¢ 56 –¢–ó: –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        text = (
            "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {trajectory_data['name']}\n\n"
            "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –µ—ë –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        log_user_action(callback.from_user.id, "trajectory_created_final", f"–§–∏–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: {trajectory_data['name']}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "final_confirm_save_error", str(e))


@router.callback_query(F.data == "cancel_final_confirmation", LearningPathStates.waiting_for_final_save_confirmation)
async def callback_cancel_final_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø—É–Ω–∫—Ç 54 –¢–ó)"""
    try:
        await callback.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
        groups = await get_all_groups(session)
        if not groups:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", show_alert=True)
            return
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_group_selection_keyboard(groups, page=0),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_group_selection)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_final_confirmation_error", str(e))


@router.callback_query(F.data == "cancel_trajectory_save", LearningPathStates.waiting_for_trajectory_save_confirmation)
async def callback_cancel_trajectory_save(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ—Å—Å–∏—è–º–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        current_stage_number = data.get('current_stage_number', 1)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        sessions_count = 0
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            sessions_count = len(last_stage.get('sessions', []))
        
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}\n"
            f"‚úÖ–í—ã –°–æ–∑–¥–∞–ª–∏ {sessions_count} –°–µ—Å—Å–∏—é –¥–ª—è {current_stage_number} –≠—Ç–∞–ø–∞!\n\n"
            "üü°–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–µ—Å—Å–∏—é?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_session_management_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.adding_session_to_stage)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_trajectory_save_error", str(e))


@router.callback_query(F.data == "cancel_attestation_selection", LearningPathStates.waiting_for_attestation_selection)
async def callback_cancel_attestation_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_trajectory_save_confirmation_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_trajectory_save_confirmation)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_attestation_selection_error", str(e))


@router.callback_query(F.data == "cancel_attestation_confirmation", LearningPathStates.waiting_for_attestation_confirmation)
async def callback_cancel_attestation_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 49 –¢–ó: –û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏  
        attestations = await get_all_attestations(session)
        
        # –£ –Ω–∞—Å —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å mock –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            "üîçüü°<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–∫–∞–∫ —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≤ —à–∫–æ–ª–µ), –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_attestation_selection_keyboard(attestations),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_attestation_selection)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_attestation_confirmation_error", str(e))


@router.callback_query(F.data == "edit_trajectory", LearningPathStates.main_menu)
async def callback_edit_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        learning_paths = await get_all_learning_paths(session)
        
        if not learning_paths:
            await callback.answer("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", show_alert=True)
            return
        
        text = (
            "üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "üëÅÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏
        keyboard = []
        for path in learning_paths:
            keyboard.append([InlineKeyboardButton(
                text=f"{path.name} (–ì—Ä—É–ø–ø–∞: {path.group.name if path.group else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})",
                callback_data=f"edit_path:{path.id}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_trajectory_selection)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "edit_trajectory_error", str(e))


# –î—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º" –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
@router.callback_query(F.data == "edit_trajectory", LearningPathStates.editing_trajectory)
async def callback_back_to_trajectories(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    await callback_edit_trajectory(callback, state, session)


@router.callback_query(F.data.startswith("edit_path:"), LearningPathStates.waiting_for_trajectory_selection)
async def callback_edit_specific_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        path_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        learning_path = await get_learning_path_by_id(session, path_id)
        if not learning_path:
            await callback.answer("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏  
        trajectory_structure = ""
        if hasattr(learning_path, 'stages'):
            for stage in learning_path.stages:
                trajectory_structure += f"üü¢<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"
                if hasattr(stage, 'sessions'):
                    for session in stage.sessions:
                        trajectory_structure += f"üü¢<b>–°–µ—Å—Å–∏—è {session.order_number}:</b> {session.name}\n"
                        if hasattr(session, 'tests'):
                            for i, test in enumerate(session.tests, 1):
                                trajectory_structure += f"üü¢<b>–¢–µ—Å—Ç {i}:</b> {test.name}\n"
        
        attestation_info = ""
        if hasattr(learning_path, 'attestation') and learning_path.attestation:
            attestation_info = f"üîçüü¢<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {learning_path.attestation.name}\n"
        
        group_info = ""
        if hasattr(learning_path, 'group') and learning_path.group:
            group_info = f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {learning_path.group.name}\n"
        
        text = (
            "üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "üëÅÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {learning_path.name}\n"
            f"{trajectory_structure}"
            f"{attestation_info}"
            f"{group_info}\n"
            "üìã <b>–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
            "üí° <i>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏</i>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º", callback_data="edit_trajectory")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.editing_trajectory)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "edit_specific_trajectory_error", str(e))


# ================== –ê–¢–¢–ï–°–¢–ê–¶–ò–ò ==================

@router.callback_query(F.data == "manage_attestations", LearningPathStates.main_menu)
async def callback_manage_attestations(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è–º–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        attestations = await get_all_attestations(session)
        
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_attestations_main_keyboard(attestations),
            parse_mode="HTML"
        )
        
        await state.set_state(AttestationStates.main_menu)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "manage_attestations_error", str(e))


@router.callback_query(F.data == "create_attestation", AttestationStates.main_menu)
async def callback_create_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 5-6 –¢–ó: –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–£–ù–ö–¢ 6 –¢–ó: –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            "üìà<b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø</b>\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (–∫–∞–∫ —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –≤ —à–∫–æ–ª–µ)\n\n"
            "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –ø—Ä–æ–≤–æ–¥–∏—Ç –±—É–¥—É—â–∏–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ª–∏—á–Ω–æ —Å–æ —Å—Ç–∞–∂–µ—Ä–æ–º\n\n"
            "–°–≤—è–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ —Å—Ç–∞–∂—ë—Ä–∞ - –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫\n\n"
            "–ò–º–µ–Ω–Ω–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–∂—ë—Ä–æ–º –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –±—É–¥—É—â–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ —Å—Ç–∞–∂—ë—Ä–∞\n\n"
            "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø—Ä–æ—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å\n"
            "–û–ø—Ä–æ—Å–Ω—ã–π —Ç–µ—Å—Ç - —ç—Ç–æ —Ç–µ—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —á–∏—Ç–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —É —Å–µ–±—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –∑–∞—Ç–µ–º —Å–ª—É—à–∞–µ—Ç –≤–∂–∏–≤—É—é –æ—Ç–≤–µ—Ç —Å—Ç–∞–∂—ë—Ä–∞ –∏ –¥–∞–ª–µ–µ –≤–≤–æ–¥–∏—Ç –±–∞–ª–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞–∂–µ—Ä. –ü–æ—Å–ª–µ –∏–¥—ë—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É\n\n"
            "–°—Ç–∞–∂—ë—Ä—É –≤ –µ–≥–æ –õ–ö –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_attestation_creation_start_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(AttestationStates.waiting_for_attestation_creation_start)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "create_attestation_error", str(e))


# ================== –°–û–ó–î–ê–ù–ò–ï –ê–¢–¢–ï–°–¢–ê–¶–ò–ô –ü–û –¢–ó ==================

@router.callback_query(F.data == "start_attestation_creation", AttestationStates.waiting_for_attestation_creation_start)
async def callback_start_attestation_creation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 7 –¢–ó: –ö–Ω–æ–ø–∫–∞ '–î–∞–ª–µ–µ‚è©'"""
    try:
        await callback.answer()
        
        # –ü–£–ù–ö–¢ 8 –¢–ó: –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            "üü°<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        
        await state.set_state(AttestationStates.waiting_for_attestation_name)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "start_attestation_creation_error", str(e))


@router.message(AttestationStates.waiting_for_attestation_name)
async def process_attestation_name(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 9 –¢–ó: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(attestation_name=name, questions=[])
        
        # –ü–£–ù–ö–¢ 10 –¢–ó: –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            "üü°<b>–í–æ–ø—Ä–æ—Å 1:</b> –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
            "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å üëá\n\n"
            "\"–ß—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤ –∑–∞–ª–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —á–∏—Å—Ç–æ—Ç—ã?\"\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –°—Ç–∞–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è:, —Å—Ç–æ–ª—ã, –ø–æ–¥—Å—Ç–æ–ª—å—è, —É—Ä–Ω—ã (–º—É—Å–æ—Ä –≤–µ–∑–¥–µ –≤—ã–∫–∏–Ω—É—Ç), –¥–µ—Å–µ—Ä—Ç–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —á–∏—Å—Ç–æ—Ç–∞ –ø–æ–º–µ—â–µ–Ω–∏—è, —á–∏—Å—Ç–æ—Ç–∞ –∑–æ–Ω—ã —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n\n"
            "–ù–∞–∑–≤–∞–ª –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ - 10\n"
            "–ù–∞–∑–≤–∞–ª –ø–æ–ª–æ–≤–∏–Ω—É - 5\n"
            "–ù–∏—á–µ–≥–æ/–ø–ª–æ—Ö–æ –Ω–∞–∑–≤–∞–ª - 0\n\n"
            "üí° <b>–í–≤–µ–¥–∏—Ç–µ –í–ï–°–¨ –ë–õ–û–ö</b> (–≤–æ–ø—Ä–æ—Å + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç + –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏) –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ"
        )
        
        await message.answer(text, parse_mode="HTML")
        await state.set_state(AttestationStates.waiting_for_attestation_question)
        
        log_user_action(message.from_user.id, "attestation_name_set", f"–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {name}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
        log_user_error(message.from_user.id, "process_attestation_name_error", str(e))


@router.message(AttestationStates.waiting_for_attestation_question)
async def process_attestation_question(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 11-12-14 –¢–ó: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        question_text = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        questions = data.get('questions') or []
        attestation_name = data.get('attestation_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question_number = len(questions) + 1
        questions.append({
            'number': question_number,
            'text': question_text,
            'max_points': 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        })
        
        await state.update_data(questions=questions)
        
        # –ü–£–ù–ö–¢ 12/14 –¢–ó: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram)
        questions_text = ""
        recent_questions = questions[-3:] if len(questions) > 3 else questions
        
        for q in recent_questions:
            questions_text += f"‚úÖ <b>–í–æ–ø—Ä–æ—Å {q['number']}:</b>\n{q['text']}\n\n"
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—â–µ –µ—Å—Ç—å
        if len(questions) > 3:
            questions_text = f"üìù <i>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions) - 3} + –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3:</i>\n\n" + questions_text
        
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {attestation_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {question_number}\n\n"
            f"{questions_text}"
            f"üü°<b>–í–æ–ø—Ä–æ—Å {question_number + 1}:</b> –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
        )
        
        await message.answer(
            text,
            reply_markup=get_attestation_questions_keyboard(),
            parse_mode="HTML"
        )
        
        log_user_action(message.from_user.id, "attestation_question_added", f"–í–æ–ø—Ä–æ—Å {question_number}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        log_user_error(message.from_user.id, "process_attestation_question_error", str(e))


@router.callback_query(F.data == "save_attestation_questions", AttestationStates.waiting_for_attestation_question)
async def callback_save_attestation_questions(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 15 –¢–ó: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        attestation_name = data.get('attestation_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        questions = data.get('questions') or []
        
        if not questions:
            await callback.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
            return
        
        # –ü–£–ù–ö–¢ 16 –¢–ó: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞  
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {attestation_name}\n\n"
            "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"
        )
        
        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(AttestationStates.waiting_for_passing_score)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "save_attestation_questions_error", str(e))


@router.message(AttestationStates.waiting_for_passing_score)
async def process_attestation_passing_score(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–£–ù–ö–¢ 17-18 –¢–ó: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è"""
    try:
        passing_score_text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞ (–ü–û –¢–ó: –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 10)
        try:
            passing_score = float(passing_score_text)
            if passing_score <= 0:
                await message.answer("‚ùå –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 15)")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        attestation_name = data.get('attestation_name')
        questions = data.get('questions') or []
        user = await get_user_by_tg_id(session, message.from_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        if not hasattr(create_attestation, '_pending_questions'):
            create_attestation._pending_questions = {}
        create_attestation._pending_questions['current'] = questions
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –≤ –ë–î
        attestation = await create_attestation(
            session=session,
            name=attestation_name,
            passing_score=passing_score,
            creator_id=user.id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        if attestation:
            for question in questions:
                await add_attestation_question(
                    session=session,
                    attestation_id=attestation.id if hasattr(attestation, 'id') else 1,
                    question_text=question['text'],
                    max_points=question['max_points'],
                    question_number=question['number']
                )
        
        # –ü–£–ù–ö–¢ 18 –¢–ó: –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            f"üü¢<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {attestation_name}\n\n"
            f"‚úÖ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ¬´{attestation_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üìù –í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(questions)}\n"
            f"üéØ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {passing_score}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∫ –ª—é–±–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"
        )
        
        await message.answer(text, parse_mode="HTML")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        updated_attestations = await get_all_attestations(session)
        
        menu_text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é\n\n"
            f"‚úÖ <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ¬´{attestation_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫!</b>"
        )
        
        await message.answer(
            menu_text,
            reply_markup=get_attestations_main_keyboard(updated_attestations),
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        await state.set_state(AttestationStates.main_menu)
        
        log_user_action(message.from_user.id, "attestation_created", f"–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è: {attestation_name}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
        log_user_error(message.from_user.id, "process_attestation_passing_score_error", str(e))


@router.callback_query(F.data.startswith("view_attestation:"), AttestationStates.main_menu)
async def callback_view_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        attestation_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
        attestation = await get_attestation_by_id(session, attestation_id)
        if not attestation:
            await callback.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        await state.update_data(current_attestation_id=attestation_id, attestation_page=0)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        text, keyboard = await render_attestation_page(session, attestation_id, 0)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "view_attestation_error", str(e))


async def render_attestation_page(session: AsyncSession, attestation_id: int, page: int) -> tuple[str, InlineKeyboardMarkup]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    attestation = await get_attestation_by_id(session, attestation_id)
    if not attestation:
        raise ValueError("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    questions_per_page = 3
    total_questions = len(attestation.questions)
    total_pages = (total_questions + questions_per_page - 1) // questions_per_page
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º page –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
    page = max(0, min(page, total_pages - 1))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    questions_text = ""
    if attestation.questions:
        start_idx = page * questions_per_page
        end_idx = start_idx + questions_per_page
        page_questions = attestation.questions[start_idx:end_idx]
        
        for question in page_questions:
            questions_text += f"üü¢<b>–í–æ–ø—Ä–æ—Å {question.question_number}:</b>\n{question.question_text}\n\n"
        
        if total_questions > questions_per_page:
            questions_text += f"üìÑ <i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}</i>\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è—Ö
    using_trajectories = await get_trajectories_using_attestation(session, attestation_id)
    if using_trajectories:
        if len(using_trajectories) == 1:
            trajectories_info = f"üó∫Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {using_trajectories[0]}\n\n"
        else:
            trajectories_list = "\n".join([f"‚Ä¢ {name}" for name in using_trajectories])
            trajectories_info = f"üó∫Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è—Ö:</b>\n{trajectories_list}\n\n"
    else:
        trajectories_info = "üó∫Ô∏è <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º\n\n"
    
    text = (
        "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
        f"üìã <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n"
        f"üìù <b>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {total_questions}\n\n"
        f"{questions_text}"
        f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {attestation.passing_score}\n"
        f"üìä <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {getattr(attestation, 'max_score', 20)}\n\n"
        f"{trajectories_info}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    if total_questions > 3:
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"attestation_page_prev:{attestation_id}"))
        if page < total_pages - 1:
            nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"attestation_page_next:{attestation_id}"))
        if nav_row:
            keyboard_buttons.append(nav_row)
    
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_attestation:{attestation_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è–º", callback_data="back_to_attestations_list")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return text, InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


@router.callback_query(F.data.startswith("attestation_page_prev:"))
async def callback_attestation_page_prev(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        attestation_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        current_page = data.get('attestation_page', 0)
        
        new_page = max(0, current_page - 1)
        await state.update_data(attestation_page=new_page)
        
        text, keyboard = await render_attestation_page(session, attestation_id, new_page)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "attestation_page_prev_error", str(e))


@router.callback_query(F.data.startswith("attestation_page_next:"))
async def callback_attestation_page_next(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        attestation_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        current_page = data.get('attestation_page', 0)
        
        attestation = await get_attestation_by_id(session, attestation_id)
        if not attestation:
            await callback.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        total_pages = (len(attestation.questions) + 2) // 3  # 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = min(current_page + 1, total_pages - 1)
        await state.update_data(attestation_page=new_page)
        
        text, keyboard = await render_attestation_page(session, attestation_id, new_page)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "attestation_page_next_error", str(e))


@router.callback_query(F.data == "back_to_attestations_list")  
async def callback_back_to_attestations_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        attestations = await get_all_attestations(session)
        
        text = (
            "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_attestations_main_keyboard(attestations),
            parse_mode="HTML"
        )
        
        await state.set_state(AttestationStates.main_menu)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_attestations_error", str(e))


@router.callback_query(F.data.startswith("delete_attestation:"), AttestationStates.main_menu)
async def callback_delete_attestation_confirm(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        attestation_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        attestation = await get_attestation_by_id(session, attestation_id)
        if not attestation:
            await callback.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è—Ö
        is_in_use = await check_attestation_in_use(session, attestation_id)
        
        if is_in_use:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —ç—Ç—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
            trajectory_names = await get_trajectories_using_attestation(session, attestation_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if len(trajectory_names) == 1:
                trajectories_text = f"—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ ¬´{trajectory_names[0]}¬ª"
            else:
                trajectories_list = "\n".join([f"‚Ä¢ {name}" for name in trajectory_names])
                trajectories_text = f"—Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º:\n{trajectories_list}"
            
            # –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
            text = (
                "‚ö†Ô∏è <b>–£–î–ê–õ–ï–ù–ò–ï –ù–ï–í–û–ó–ú–û–ñ–ù–û</b> ‚ö†Ô∏è\n\n"
                f"üìã <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n\n"
                f"‚ùå <b>–î–∞–Ω–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ {trajectories_text}</b>\n\n"
                "üí° <i>–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —ç—Ç—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</i>"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏", callback_data=f"view_attestation:{attestation_id}")],
                [InlineKeyboardButton(text="üîç –ö —Å–ø–∏—Å–∫—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π", callback_data="back_to_attestations_list")]
            ])
            
        else:
            # –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            questions_count = len(attestation.questions) if hasattr(attestation, 'questions') and attestation.questions else 0
            
            text = (
                "‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b> ‚ö†Ô∏è\n\n"
                f"üìã <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n"
                f"üìù <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {questions_count}\n"
                f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {attestation.passing_score}\n\n"
                "‚ùó <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é?</b>\n\n"
                "‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!</i>"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_attestation:{attestation_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"view_attestation:{attestation_id}")]
            ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        if not is_in_use:
            await state.set_state(AttestationStates.waiting_for_delete_confirmation)
            await state.update_data(attestation_id=attestation_id, attestation_name=attestation.name)
        
        log_user_action(callback.from_user.id, "delete_attestation_requested", 
                       f"ID: {attestation_id}, –í –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {is_in_use}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "delete_attestation_confirm_error", str(e))


@router.callback_query(F.data.startswith("view_attestation:"), AttestationStates.waiting_for_delete_confirmation)
async def callback_cancel_delete_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
    try:
        await callback.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(AttestationStates.main_menu)
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        await callback_view_attestation(callback, state, session)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_delete_attestation_error", str(e))


@router.callback_query(F.data.startswith("confirm_delete_attestation:"), AttestationStates.waiting_for_delete_confirmation)
async def callback_confirm_delete_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        attestation_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        attestation_name = data.get('attestation_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        success = await delete_attestation(session, attestation_id)
        
        if success:
            # –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
            text = (
                "‚úÖ <b>–ê–¢–¢–ï–°–¢–ê–¶–ò–Ø –£–î–ê–õ–ï–ù–ê</b> ‚úÖ\n\n"
                f"üìã <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ¬´{attestation_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
                "üí° <i>–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.</i>"
            )
            
            await callback.message.edit_text(text, parse_mode="HTML")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
            await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            
            attestations = await get_all_attestations(session)
            
            menu_text = (
                "üîç<b>–†–ï–î–ê–ö–¢–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ô</b>üîç\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é\n\n"
                f"üóëÔ∏è <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ¬´{attestation_name}¬ª —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞</b>"
            )
            
            await callback.message.answer(
                menu_text,
                reply_markup=get_attestations_main_keyboard(attestations),
                parse_mode="HTML"
            )
            
            await state.set_state(AttestationStates.main_menu)
            
            log_user_action(callback.from_user.id, "attestation_deleted", f"'{attestation_name}' (ID: {attestation_id})")
            
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            text = (
                "‚ùå <b>–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø</b> ‚ùå\n\n"
                f"üìã <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é ¬´{attestation_name}¬ª</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è—Ö\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_attestations_list")]
            ])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            log_user_error(callback.from_user.id, "attestation_deletion_failed", f"'{attestation_name}' (ID: {attestation_id})")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "confirm_delete_attestation_error", str(e))


@router.callback_query(F.data == "back_to_trajectories_main", AttestationStates.main_menu)
async def callback_back_to_trajectories_main_from_attestations(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏–∑ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π"""
    try:
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        text = ("üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n\n"
                "–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
                "1 ‚ûï–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
                "2 ‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
                "3 üóëÔ∏è–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è")
        
        await callback.message.edit_text(
            text,
            reply_markup=get_learning_paths_main_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.main_menu)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_trajectories_main_from_attestations_error", str(e))


# ================== –£–î–ê–õ–ï–ù–ò–ï –¢–†–ê–ï–ö–¢–û–†–ò–ô ==================

@router.callback_query(F.data == "delete_trajectory", LearningPathStates.main_menu)
async def callback_delete_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectories = await get_all_learning_paths(session)
        
        if not trajectories:
            await callback.message.edit_text(
                "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trajectories_main")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        
        for i, trajectory in enumerate(trajectories, 1):
            text += f"{i}. {trajectory.name}\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_trajectory_selection_keyboard(trajectories)
        )
        
        await state.set_state(LearningPathStates.trajectory_deletion)
        log_user_action(callback.from_user.id, "opened_trajectory_deletion", "–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "delete_trajectory_error", str(e))


@router.callback_query(F.data.startswith("select_trajectory_to_delete:"), LearningPathStates.trajectory_deletion)
async def callback_select_trajectory_to_delete(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        
        trajectory_id = int(callback.data.split(":")[1])
        trajectory = await get_learning_path_by_id(session, trajectory_id)
        
        if not trajectory:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trajectory_selection")]
                ])
            )
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        usage_info = await get_trajectory_usage_info(session, trajectory_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        warning_text = f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b> ‚ö†Ô∏è\n\n"
        warning_text += f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trajectory.name}\n\n"
        
        if usage_info['total_users'] > 0:
            warning_text += f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:</b>\n\n"
            warning_text += f"üë• <b>–°—Ç–∞–∂–µ—Ä—ã:</b> {usage_info['trainees_count']} —á–µ–ª.\n"
            warning_text += f"üìä <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {usage_info['total_users']} —á–µ–ª.\n\n"
            
            if usage_info['trainees']:
                warning_text += "<b>–°–ø–∏—Å–æ–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤:</b>\n"
                for trainee in usage_info['trainees'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
                    warning_text += f"‚Ä¢ {trainee.full_name}\n"
                if len(usage_info['trainees']) > 10:
                    warning_text += f"... –∏ –µ—â–µ {len(usage_info['trainees']) - 10} —Å—Ç–∞–∂–µ—Ä–æ–≤\n"
                warning_text += "\n"
        
        warning_text += "‚ö†Ô∏è <b>–ü–û–°–õ–ï–î–°–¢–í–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø:</b>\n\n"
        warning_text += "üìö <b>–î–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤:</b>\n"
        warning_text += "‚Ä¢ ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í –¢–†–ê–ï–ö–¢–û–†–ò–ò –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´\n"
        warning_text += "‚Ä¢ ‚ùå –ù–ï –°–ú–û–ì–£–¢ –ü–†–û–ô–¢–ò –ê–¢–¢–ï–°–¢–ê–¶–ò–Æ –ü–û –≠–¢–û–ô –¢–†–ê–ï–ö–¢–û–†–ò–ò\n"
        warning_text += "‚Ä¢ ‚ùå –ü–û–¢–ï–†–Ø–Æ–¢ –î–û–°–¢–£–ü –ö –ú–ê–¢–ï–†–ò–ê–õ–ê–ú –≠–¢–û–ô –¢–†–ê–ï–ö–¢–û–†–ò–ò\n"
        warning_text += "‚Ä¢ ‚ùå –ü–†–û–ì–†–ï–°–° –ü–û –≠–¢–û–ô –¢–†–ê–ï–ö–¢–û–†–ò–ò –ë–£–î–ï–¢ –°–ë–†–û–®–ï–ù\n"
        warning_text += "‚Ä¢ ‚úÖ –¢–ï–°–¢–´ –û–°–¢–ê–ù–£–¢–°–Ø –í –°–ò–°–¢–ï–ú–ï (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è—Ö)\n\n"
        
        warning_text += "üë®‚Äçüè´ <b>–î–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤:</b>\n"
        warning_text += "‚Ä¢ ‚ùå –ù–ï –°–ú–û–ì–£–¢ –£–ü–†–ê–í–õ–Ø–¢–¨ –ü–†–û–ì–†–ï–°–°–û–ú –ü–û –≠–¢–û–ô –¢–†–ê–ï–ö–¢–û–†–ò–ò\n"
        warning_text += "‚Ä¢ ‚ùå –ü–û–¢–ï–†–Ø–Æ–¢ –î–û–°–¢–£–ü –ö –ú–ê–¢–ï–†–ò–ê–õ–ê–ú –≠–¢–û–ô –¢–†–ê–ï–ö–¢–û–†–ò–ò\n"
        warning_text += "‚Ä¢ ‚ùå –ù–ï –°–ú–û–ì–£–¢ –û–¢–°–õ–ï–ñ–ò–í–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï –ü–û –≠–¢–û–ô –¢–†–ê–ï–ö–¢–û–†–ò–ò\n\n"
        
        warning_text += "üóÇÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
        warning_text += "‚Ä¢ ‚ùå –≠–¢–ê–ü–´ –ò –°–ï–°–°–ò–ò –¢–†–ê–ï–ö–¢–û–†–ò–ò –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´\n"
        warning_text += "‚Ä¢ ‚ùå –°–í–Ø–ó–ò –¢–ï–°–¢–û–í –° –¢–†–ê–ï–ö–¢–û–†–ò–ï–ô –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´\n"
        warning_text += "‚Ä¢ ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–†–ê–ï–ö–¢–û–†–ò–ò –ë–£–î–£–¢ –ü–û–¢–ï–†–Ø–ù–´\n"
        warning_text += "‚Ä¢ ‚ùå –°–í–Ø–ó–ò –ê–¢–¢–ï–°–¢–ê–¶–ò–ò –° –¢–†–ê–ï–ö–¢–û–†–ò–ï–ô –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´\n"
        warning_text += "‚Ä¢ ‚úÖ –¢–ï–°–¢–´ –ò –í–û–ü–†–û–°–´ –û–°–¢–ê–ù–£–¢–°–Ø –í –°–ò–°–¢–ï–ú–ï\n"
        warning_text += "‚Ä¢ ‚úÖ –ê–¢–¢–ï–°–¢–ê–¶–ò–ò –û–°–¢–ê–ù–£–¢–°–Ø –í –°–ò–°–¢–ï–ú–ï\n\n"
        
        warning_text += "‚ÑπÔ∏è <b>–í–ê–ñ–ù–û:</b>\n"
        warning_text += "‚Ä¢ ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        warning_text += "‚Ä¢ ‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è\n"
        warning_text += "‚Ä¢ ‚úÖ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è\n"
        warning_text += "‚Ä¢ ‚úÖ –î—Ä—É–≥–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞—é—Ç\n\n"
        
        warning_text += "‚ö†Ô∏è <b>–≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!</b>\n"
        warning_text += "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n\n"
        warning_text += "‚ùì <b>–í—ã –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é?</b>"
        
        await callback.message.edit_text(
            warning_text,
            parse_mode="HTML",
            reply_markup=get_trajectory_deletion_confirmation_keyboard(trajectory_id)
        )
        
        log_user_action(callback.from_user.id, "selected_trajectory_for_deletion", f"trajectory_id: {trajectory_id}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "select_trajectory_to_delete_error", str(e))


@router.callback_query(F.data.startswith("confirm_trajectory_deletion:"), LearningPathStates.trajectory_deletion)
async def callback_confirm_trajectory_deletion(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()
        
        trajectory_id = int(callback.data.split(":")[1])
        trajectory = await get_learning_path_by_id(session, trajectory_id)
        
        if not trajectory:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML"
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        success = await delete_learning_path(session, trajectory_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
                f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è '{trajectory.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π", callback_data="back_to_trajectories_main")]
                ])
            )
            log_user_action(callback.from_user.id, "deleted_trajectory", f"trajectory_id: {trajectory_id}, name: {trajectory.name}")
        else:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é '{trajectory.name}'.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trajectory_selection")]
                ])
            )
            log_user_error(callback.from_user.id, "trajectory_deletion_failed", f"trajectory_id: {trajectory_id}")
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "confirm_trajectory_deletion_error", str(e))


@router.callback_query(F.data == "back_to_trajectory_selection", LearningPathStates.trajectory_deletion)
async def callback_back_to_trajectory_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectories = await get_all_learning_paths(session)
        
        if not trajectories:
            await callback.message.edit_text(
                "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trajectories_main")]
                ])
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        
        for i, trajectory in enumerate(trajectories, 1):
            text += f"{i}. {trajectory.name}\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_trajectory_selection_keyboard(trajectories)
        )
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_trajectory_selection_error", str(e))


@router.callback_query(F.data == "back_to_trajectories_main")
async def callback_back_to_trajectories_main_universal(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
    try:
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        text = ("üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n\n"
                "–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
                "1 ‚ûï–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
                "2 ‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è\n"
                "3 üóëÔ∏è–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è")
        
        await callback.message.edit_text(
            text,
            reply_markup=get_learning_paths_main_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.main_menu)
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "back_to_trajectories_main_universal_error", str(e))


# ================== –û–ë–©–ò–ï CALLBACKS ==================

@router.callback_query(F.data == "cancel_test_creation")
async def callback_cancel_test_creation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await get_all_active_tests(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        data = await state.get_data()
        trajectory_data = data.get('trajectory_data', {})
        current_session_tests = []
        
        if trajectory_data.get('stages'):
            last_stage = trajectory_data['stages'][-1]
            if last_stage.get('sessions'):
                last_session = last_stage['sessions'][-1]
                current_session_tests = last_session.get('tests', [])
        
        trajectory_progress = generate_trajectory_progress(trajectory_data)
        current_session_number = data.get('current_session_number', 1)
        
        text = (
            f"üó∫Ô∏è<b>–†–ï–î–ê–ö–¢–û–† –¢–†–ê–ï–ö–¢–û–†–ò–ô</b>üó∫Ô∏è\n"
            "‚ûï–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏\n"
            f"{trajectory_progress}"
            f"üü°<b>–¢–µ—Å—Ç {len(current_session_tests) + 1}:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {current_session_number}"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_test_selection_keyboard(tests, current_session_tests),
            parse_mode="HTML"
        )
        
        await state.set_state(LearningPathStates.waiting_for_test_selection)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        await state.update_data(
            new_test_name=None,
            new_test_description=None,
            new_test_materials=None,
            new_test_question_type=None,
            new_test_question_text=None,
            new_test_question_answer=None,
            new_test_question_points=None,
            new_test_questions=[],
            new_test_total_score=None
        )
        
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        log_user_error(callback.from_user.id, "cancel_test_creation_error", str(e))


