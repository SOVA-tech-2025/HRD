import os
import time
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import get_user_by_tg_id, get_user_roles
from keyboards.keyboards import get_keyboard_by_role, get_welcome_keyboard
from states.states import AuthStates, RegistrationStates
from utils.logger import log_user_action, log_user_error
from utils.bot_commands import set_bot_commands

router = Router()

@router.message(Command("login"))
async def cmd_login(message: Message, state: FSMContext, session: AsyncSession, bot):
    try:
        user = await get_user_by_tg_id(session, message.from_user.id)
        
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            log_user_action(message.from_user.id, message.from_user.username, "failed login attempt - not registered")
            return
        
        if not user.is_active:
            await message.answer("–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            log_user_error(message.from_user.id, message.from_user.username, "login failed - account deactivated")
            return
        
        roles = await get_user_roles(session, user.id)
        
        if not roles:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.")
            log_user_error(message.from_user.id, message.from_user.username, "login failed - no roles assigned")
            return
        
        primary_role = roles[0].name
        
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}! –¢—ã –≤–æ—à–µ–ª –∫–∞–∫ {primary_role}.",
            reply_markup=get_keyboard_by_role(primary_role)
        )
        
        await set_bot_commands(bot, primary_role)
        
        await state.update_data(
            user_id=user.id,
            role=primary_role,
            is_authenticated=True,
            auth_time=message.date.timestamp()
        )

        log_user_action(
            message.from_user.id,
            message.from_user.username,
            "successful login",
            {"role": primary_role, "user_id": user.id}
        )

        # –Ω–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        # await state.clear()
    except Exception as e:
        log_user_error(message.from_user.id, message.from_user.username, "login error", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def check_auth(message: Message, state: FSMContext, session: AsyncSession) -> bool:
    try:
        data = await state.get_data()
        is_authenticated = data.get("is_authenticated", False)
        auth_time = data.get("auth_time", 0)
        
        if is_authenticated and auth_time and (time.time() - auth_time) > 86400:
            await state.clear()
            await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /login.")
            return False
        
        if is_authenticated:
            user = await get_user_by_tg_id(session, message.from_user.id)
            if not user or not user.is_active:
                await state.clear()
                await message.answer("–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return False
            return True
        
        user = await get_user_by_tg_id(session, message.from_user.id)
        
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return False
        
        if not user.is_active:
            await message.answer("–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        
        auto_auth_allowed = os.getenv("ALLOW_AUTO_AUTH", "true").lower() == "true"
        if not auto_auth_allowed:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞.")
            return False
        
        roles = await get_user_roles(session, user.id)
        
        if not roles:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.")
            return False
        
        primary_role = roles[0].name
        
        await state.update_data(
            user_id=user.id,
            role=primary_role,
            is_authenticated=True,
            auth_time=message.date.timestamp()
        )
        
        log_user_action(
            message.from_user.id, 
            message.from_user.username, 
            "auto authentication", 
            {"role": primary_role, "user_id": user.id}
        )
        
        return True
    except Exception as e:
        log_user_error(message.from_user.id, message.from_user.username, "authentication check error", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return False

@router.message(Command("logout"))
async def cmd_logout(message: Message, state: FSMContext, bot):
    try:
        data = await state.get_data()
        user_id = data.get("user_id")
        role = data.get("role")
        
        await state.clear()
        await set_bot_commands(bot)
        await message.answer("–¢—ã –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π /login –¥–ª—è –≤—Ö–æ–¥–∞.")
        
        log_user_action(
            message.from_user.id, 
            message.from_user.username, 
            "logout", 
            {"role": role, "user_id": user_id} if user_id else None
        )
    except Exception as e:
        log_user_error(message.from_user.id, message.from_user.username, "logout error", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession, bot):
    try:
        user = await get_user_by_tg_id(session, message.from_user.id)
        
        if not user:
            await set_bot_commands(bot)
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç.\n\n"
                "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–∞–≤–∞–π –ø–æ–¥–∫–ª—é—á–∏–º —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø.",
                reply_markup=get_welcome_keyboard()
            )
            log_user_action(message.from_user.id, message.from_user.username, "started bot - not registered")
            return
        
        log_user_action(message.from_user.id, message.from_user.username, "started bot - already registered")
        
        roles = await get_user_roles(session, user.id)
        
        if not roles:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É.")
            log_user_error(message.from_user.id, message.from_user.username, "login failed - no roles assigned")
            return
        
        primary_role = roles[0].name
        
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}! –¢—ã –≤–æ—à–µ–ª –∫–∞–∫ {primary_role}.",
            reply_markup=get_keyboard_by_role(primary_role)
        )
        
        await set_bot_commands(bot, primary_role)
        
        await state.update_data(
            user_id=user.id,
            role=primary_role,
            is_authenticated=True,
            auth_time=message.date.timestamp()
        )
        
        log_user_action(
            message.from_user.id, 
            message.from_user.username, 
            "successful login from start", 
            {"role": primary_role, "user_id": user.id}
        )
    except Exception as e:
        log_user_error(message.from_user.id, message.from_user.username, "start command error", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "register:normal")
async def callback_register_normal(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    await callback.message.edit_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üö©\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è\n\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_welcome")]
        ])
    )
    await state.set_state(RegistrationStates.waiting_for_full_name)
    log_user_action(callback.from_user.id, callback.from_user.username, "started normal registration")
    await callback.answer()


@router.callback_query(F.data == "register:with_code")
async def callback_register_with_code(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∫–æ–¥–∞ (—Ç–æ–∫–µ–Ω —Å–Ω–∞—á–∞–ª–∞)
    await state.update_data(registration_flow="code_first")
    
    await callback.message.edit_text(
        "–ï—Å–ª–∏ —Ç—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª —Å–ª—É—á–∞–π–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è\n"
        "–≠—Ç–æ—Ç —à–∞–≥ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–º—É —Ä–µ–∫—Ä—É—Ç–µ—Ä –≤—ã–¥–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥, –≤–≤–µ–¥–∏ –µ–≥–æ –Ω–∏–∂–µ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_welcome")]
        ])
    )
    await state.set_state(RegistrationStates.waiting_for_admin_token)
    log_user_action(callback.from_user.id, callback.from_user.username, "started registration with code")
    await callback.answer()


@router.callback_query(F.data == "back_to_welcome")
async def callback_back_to_welcome(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É"""
    await state.clear()
    await callback.message.edit_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç.\n\n"
        "–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–∞–≤–∞–π –ø–æ–¥–∫–ª—é—á–∏–º —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø.",
        reply_markup=get_welcome_keyboard()
    )
    log_user_action(callback.from_user.id, callback.from_user.username, "returned to welcome screen")
    await callback.answer() 