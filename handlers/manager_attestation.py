"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è–º–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ (Task 7).
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.
"""

from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, get_user_by_id, check_user_permission,
    get_manager_assigned_attestations, update_attestation_schedule, start_attestation_session,
    get_trainee_attestation_by_id, save_attestation_question_result, complete_attestation_session,
    get_attestation_by_id, change_trainee_to_employee, create_attestation_result
)
from handlers.auth import check_auth
from keyboards.keyboards import get_main_menu_keyboard, get_keyboard_by_role
from states.states import ManagerAttestationStates
from utils.logger import log_user_action, log_user_error

router = Router()


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Task 7: –õ–ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è–º–∏
# ===============================

@router.message(F.text.in_(["–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ‚úîÔ∏è"]))
async def cmd_manager_attestations(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è' –≤ –õ–ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (–¢–ó —à–∞–≥ 1-4)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        has_permission = await check_user_permission(session, user.id, "conduct_attestations")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        assigned_attestations = await get_manager_assigned_attestations(session, user.id)

        if not assigned_attestations:
            await message.answer(
                "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n\n"
                "‚ùå <b>–°—Ç–∞–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—éüëá\n\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for assignment in assigned_attestations:
            trainee = assignment.trainee
            attestation = assignment.attestation

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            message_text += (
                f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
                f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
                f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date or ''}\n"
                f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time or ''}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{trainee.full_name}",
                    callback_data=f"select_trainee_attestation:{assignment.id}"
                )
            ])

        message_text += "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–∂—ë—Ä–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ])

        await message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(user.tg_id, "manager_attestations_opened", "–û—Ç–∫—Ä—ã—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
        log_user_error(message.from_user.id, "manager_attestations_error", str(e))


@router.callback_query(F.data.startswith("select_trainee_attestation:"))
async def callback_select_trainee_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π (–¢–ó —à–∞–≥ 5-6)"""
    try:
        await callback.answer()

        assignment_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await callback.message.edit_text("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        trainee = assignment.trainee
        attestation = assignment.attestation

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(assignment_id=assignment_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "üôã‚Äç‚ôÇÔ∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂—ë—Ä–æ–º</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date or ''}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time or ''}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é", callback_data=f"start_attestation:{assignment_id}")],
            [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"change_attestation_date:{assignment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_attestations")]
        ])

        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(callback.from_user.id, "trainee_attestation_selected", f"–í—ã–±—Ä–∞–Ω —Å—Ç–∞–∂–µ—Ä {trainee.full_name} –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞–∂–µ—Ä–∞")
        log_user_error(callback.from_user.id, "select_trainee_attestation_error", str(e))


@router.callback_query(F.data.startswith("change_attestation_date:"))
async def callback_change_attestation_date(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 7-8)"""
    try:
        await callback.answer()

        assignment_id = int(callback.data.split(":")[1])
        await state.update_data(assignment_id=assignment_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await callback.message.edit_text("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        trainee = assignment.trainee
        attestation = assignment.attestation

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "üôã‚Äç‚ôÇÔ∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂—ë—Ä–æ–º</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            "üü°<b>–î–∞—Ç–∞:</b> \n"
            "üü°<b>–í—Ä–µ–º—è:</b>\n\n"
            "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:</b>"
        )

        await callback.message.edit_text(
            message_text,
            parse_mode="HTML"
        )

        await state.set_state(ManagerAttestationStates.waiting_for_date)
        log_user_action(callback.from_user.id, "date_change_requested", f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã")
        log_user_error(callback.from_user.id, "change_date_error", str(e))


@router.message(ManagerAttestationStates.waiting_for_date)
async def process_new_date(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã (–¢–ó —à–∞–≥ 9-10)"""
    try:
        new_date = message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(new_date=new_date)
        
        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await message.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        trainee = assignment.trainee
        attestation = assignment.attestation

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "üôã‚Äç‚ôÇÔ∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂—ë—Ä–æ–º</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {new_date}\n"
            "üü°<b>–í—Ä–µ–º—è:</b>\n"
            "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:</b>"
        )

        await message.answer(
            message_text,
                parse_mode="HTML"
            )

        await state.set_state(ManagerAttestationStates.waiting_for_time)
        log_user_action(message.from_user.id, "date_entered", f"–í–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞: {new_date}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã")
        log_user_error(message.from_user.id, "process_date_error", str(e))


@router.message(ManagerAttestationStates.waiting_for_time)
async def process_new_time(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¢–ó —à–∞–≥ 11-13)"""
    try:
        new_time = message.text.strip()
        
        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        new_date = state_data.get("new_date")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await message.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        trainee = assignment.trainee
        attestation = assignment.attestation

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "üôã‚Äç‚ôÇÔ∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂—ë—Ä–æ–º</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {new_date}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {new_time}\n\n"
            "üü°<b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è?</b>"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="save_new_schedule"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_schedule_change")
            ]
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(new_time=new_time)

        await message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await state.set_state(ManagerAttestationStates.confirming_schedule)
        log_user_action(message.from_user.id, "time_entered", f"–í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è: {new_time}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏")
        log_user_error(message.from_user.id, "process_time_error", str(e))


@router.callback_query(F.data == "save_new_schedule", ManagerAttestationStates.confirming_schedule)
async def callback_save_new_schedule(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–¢–ó —à–∞–≥ 13-16)"""
    try:
        await callback.answer()

        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        new_date = state_data.get("new_date")
        new_time = state_data.get("new_time")

        if not all([assignment_id, new_date, new_time]):
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        success = await update_attestation_schedule(session, assignment_id, new_date, new_time)
        if not success:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return

        await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        trainee = assignment.trainee

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 14)
        await send_schedule_change_notification_to_trainee(session, callback.message.bot, assignment_id)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é (—à–∞–≥ 15)
        await callback.message.edit_text(
            "‚úÖ<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã</b>",
            parse_mode="HTML"
        )

        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—à–∞–≥ 16)
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "üôã‚Äç‚ôÇÔ∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂—ë—Ä–æ–º</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {assignment.attestation.name} ‚õîÔ∏è\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é", callback_data=f"start_attestation:{assignment_id}")],
            [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"change_attestation_date:{assignment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_attestations")]
        ])

        await callback.message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await state.clear()
        log_user_action(callback.from_user.id, "schedule_saved", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {new_date} {new_time}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        log_user_error(callback.from_user.id, "save_schedule_error", str(e))


@router.callback_query(F.data.startswith("start_attestation:"))
async def callback_start_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —á–∞—Å—Ç–∏ 3, —à–∞–≥ 1-4)"""
    try:
        await callback.answer()

        assignment_id = int(callback.data.split(":")[1])
        await state.update_data(assignment_id=assignment_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await callback.message.edit_text("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        trainee = assignment.trainee
        attestation = assignment.attestation

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—èüîç</b>\n"
            "üöÄ<b>–°—Ç–∞—Ä—ÇüöÄ</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date or ''}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time or ''}\n\n"
            "<b>–ù–∞—á–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–∂—ë—Ä–∞?</b>"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_start_attestation"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"select_trainee_attestation:{assignment_id}")
            ]
        ])

        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(callback.from_user.id, "attestation_start_requested", f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –Ω–∞—á–∞–ª–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
        log_user_error(callback.from_user.id, "start_attestation_error", str(e))


@router.callback_query(F.data == "confirm_start_attestation")
async def callback_confirm_start_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–¢–ó —à–∞–≥ 5-11)"""
    try:
        await callback.answer()

        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await callback.message.edit_text("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        await start_attestation_session(session, assignment_id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        await state.update_data(
            assignment_id=assignment_id,
            current_question_index=0,
            answers=[]
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await show_attestation_question(callback, state, session)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞—á–∞–ª–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
        log_user_error(callback.from_user.id, "confirm_start_error", str(e))


async def show_attestation_question(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 5-9)"""
    try:
        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        current_index = state_data.get("current_question_index", 0)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        attestation = assignment.attestation
        questions = attestation.questions

        if current_index >= len(questions):
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await show_attestation_results_message(callback.message, state, session)
            return

        question = questions[current_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 5) —Å –ø–æ–ª–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –æ—Ü–µ–Ω–∫–∏
        question_text = (
            f"<b>–í–æ–ø—Ä–æ—Å {current_index + 1}:</b>\n\n"
            f"{question.question_text}\n\n"
            f"üéØ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {question.max_points}\n\n"
            "üí° <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b> –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —Å—Ç–∞–∂–µ—Ä—É –≥–æ–ª–æ—Å–æ–º, –≤—ã—Å–ª—É—à–∞–π –æ—Ç–≤–µ—Ç –∏ –≤–≤–µ–¥–∏ –±–∞–ª–ª —Å–æ–≥–ª–∞—Å–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –≤ –≤–æ–ø—Ä–æ—Å–µ."
        )

        await callback.message.edit_text(
            question_text,
            parse_mode="HTML"
        )

        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—Ç–∞–∂–µ—Ä—É –≥–æ–ª–æ—Å–æ–º, –≤—ã—Å–ª—É—à–∞—Ç—å –æ—Ç–≤–µ—Ç,
        # –∞ –∑–∞—Ç–µ–º –≤–≤–µ—Å—Ç–∏ –±–∞–ª–ª (—à–∞–≥–∏ 6-9)
        
        # –ñ–¥–µ–º –≤–≤–æ–¥–∞ –±–∞–ª–ª–∞ –æ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        await state.set_state(ManagerAttestationStates.waiting_for_score)
        
        log_user_action(callback.from_user.id, "question_shown", f"–ü–æ–∫–∞–∑–∞–Ω –≤–æ–ø—Ä–æ—Å {current_index + 1}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–ø—Ä–æ—Å–∞")
        log_user_error(callback.from_user.id, "show_question_error", str(e))


@router.message(ManagerAttestationStates.waiting_for_score)
async def process_question_score(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±–∞–ª–ª–∞ –∑–∞ –≤–æ–ø—Ä–æ—Å (–¢–ó —à–∞–≥ 9-11)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª
        try:
            score = float(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–ª (—á–∏—Å–ª–æ)")
            return

        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        current_index = state_data.get("current_question_index", 0)
        answers = state_data.get("answers", [])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        attestation = assignment.attestation
        questions = attestation.questions

        if current_index >= len(questions):
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞")
            return

        question = questions[current_index]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–ª–ª –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º
        if score > question.max_points:
            await message.answer(f"‚ùå –ë–∞–ª–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ {question.max_points}")
            return

        if score < 0:
            await message.answer("‚ùå –ë–∞–ª–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers.append({
            "question_id": question.id,
            "score": score,
            "max_score": question.max_points
        })

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_index = current_index + 1
        await state.update_data(
            current_question_index=next_index,
            answers=answers
        )

        log_user_action(message.from_user.id, "score_entered", f"–í–≤–µ–¥–µ–Ω –±–∞–ª–ª {score} –∑–∞ –≤–æ–ø—Ä–æ—Å {current_index + 1}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –±–∞–ª–ª–∞
        await message.answer(f"‚úÖ –ë–∞–ª–ª {score} –ø—Ä–∏–Ω—è—Ç –∑–∞ –≤–æ–ø—Ä–æ—Å {current_index + 1}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if next_index < len(questions):
            # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
            question = questions[next_index]
            question_text = (
                f"<b>–í–æ–ø—Ä–æ—Å {next_index + 1}:</b>\n\n"
                f'"{question.question_text}"\n\n'
            )

            await message.answer(question_text, parse_mode="HTML")
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            await show_attestation_results_message(message, state, session)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–ª–∞")
        log_user_error(message.from_user.id, "process_score_error", str(e))


async def show_attestation_results_message(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —á–∞—Å—Ç—å 3-2, —à–∞–≥ 12)"""
    try:
        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        answers = state_data.get("answers", [])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        trainee = assignment.trainee
        attestation = assignment.attestation

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_score = sum(answer["score"] for answer in answers)
        max_score = sum(answer["max_score"] for answer in answers)
        is_passed = total_score >= attestation.passing_score

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        attestation_result = await create_attestation_result(
            session, trainee.id, attestation.id, assignment.manager_id,
            total_score, max_score, is_passed
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
        for answer in answers:
            await save_attestation_question_result(
                session, attestation_result.id, answer["question_id"], 
                answer["score"], answer["max_score"]
            )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        await complete_attestation_session(session, assignment_id, total_score, max_score, is_passed)

        await session.commit()

        if is_passed:
            # –£—Å–ø–µ—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 12-3)
            message_text = (
                "‚úÖ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞</b>\n\n"
                f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
                f"üèÅ<b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {attestation.passing_score}\n"
                f"üéØ<b>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤:</b> {total_score}\n"
                f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚úÖ\n"
                f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date or ''}\n"
                f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time or ''}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
            await message.answer(message_text, parse_mode="HTML")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ (–¢–ó —à–∞–≥ 12-4)
            await send_attestation_success_notification(
                session, message.bot, trainee, attestation, total_score, attestation.passing_score,
                assignment.manager.full_name, assignment.manager.username,
                assignment.scheduled_date, assignment.scheduled_time
            )

        else:
            # –ü—Ä–æ–≤–∞–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 12-1)
            message_text = (
                "‚ùå<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞‚ùå</b>\n\n"
                f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
                f"üèÅ<b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {attestation.passing_score}\n"
                f"üéØ<b>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤:</b> {total_score}\n"
                f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
                f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date or ''}\n"
                f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time or ''}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é", callback_data=f"start_attestation:{assignment_id}")],
                [InlineKeyboardButton(text="üë®‚Äçüíº –°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data=f"make_employee_anyway:{assignment_id}")],
                [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"change_attestation_date:{assignment_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_attestations")]
            ])

            await message.answer(
                message_text,
                parse_mode="HTML",
                reply_markup=keyboard if not is_passed else None
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞ –æ –ø—Ä–æ–≤–∞–ª–µ (–¢–ó —à–∞–≥ 12-2)  
            await send_attestation_failure_notification(
                session, message.bot, trainee, attestation, total_score, attestation.passing_score,
                assignment.manager.full_name, assignment.manager.username,
                assignment.scheduled_date, assignment.scheduled_time
            )

        await state.clear()
        log_user_action(message.from_user.id, "attestation_completed", f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –¥–ª—è {trainee.full_name}: {total_score}/{max_score}, –ø—Ä–æ–π–¥–µ–Ω–∞: {is_passed}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        log_user_error(message.from_user.id, "show_results_error", str(e))


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

async def send_schedule_change_notification_to_trainee(session: AsyncSession, bot, assignment_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (–¢–ó —à–∞–≥ 14)"""
    try:
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            return

        trainee = assignment.trainee
        manager = assignment.manager
        attestation = assignment.attestation

        notification_text = (
            "‚ùóÔ∏è<b>–ò–∑–º–µ–Ω–µ–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏</b>\n\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üü¢<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager.full_name}\n"
            f"üë§ <b>Username:</b> @{manager.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time}"
        )

        await bot.send_message(
            chat_id=trainee.tg_id,
            text=notification_text,
            parse_mode="HTML"
        )

    except Exception as e:
        log_user_error(0, "schedule_change_notification_error", str(e))


async def send_attestation_success_notification(session: AsyncSession, bot, trainee, attestation, 
                                              score, passing_score, manager_name, manager_username, date, time):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–µ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 12-4)"""
    try:
        notification_text = (
            "‚úÖ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞</b>\n\n"
            f"üèÅ<b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {passing_score}\n"
            f"üéØ<b>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤:</b> {score}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚úÖ\n"
            f"üü¢<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager_name}\n"
            f"üë§ <b>Username:</b> @{manager_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {date or ''}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {time or ''}\n\n"
            "üöÄ<b>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!üëá</b>"
            )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüíº –°—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data="become_employee")]
        ])

        await bot.send_message(
            chat_id=trainee.tg_id,
            text=notification_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        log_user_error(0, "success_notification_error", str(e))


async def send_attestation_failure_notification(session: AsyncSession, bot, trainee, attestation,
                                              score, passing_score, manager_name, manager_username, date, time):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–µ—Ä—É –æ –ø—Ä–æ–≤–∞–ª–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 12-2)"""
    try:
        notification_text = (
            "‚ùå<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞‚ùå</b>\n\n"
            f"üèÅ<b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {passing_score}\n"
            f"üéØ<b>–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤:</b> {score}\n"
            f"üèÅ<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name} ‚õîÔ∏è\n"
            f"üü¢<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager_name}\n"
            f"üë§ <b>Username:</b> @{manager_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {date or ''}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {time or ''}\n\n"
            "<b>–î–æ–≥–æ–≤–æ—Ä–∏—Å—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ</b>"
        )

        await bot.send_message(
            chat_id=trainee.tg_id,
            text=notification_text,
            parse_mode="HTML"
        )

    except Exception as e:
        log_user_error(0, "failure_notification_error", str(e))


@router.callback_query(F.data.startswith("make_employee_anyway:"))
async def callback_make_employee_anyway(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º' –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        assignment_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            await callback.message.edit_text("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        trainee = assignment.trainee
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        manager = await get_user_by_tg_id(session, callback.from_user.id)
        if not manager or manager.id != assignment.manager_id:
            await callback.message.edit_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞")
            return
            
        # –ú–µ–Ω—è–µ–º —Ä–æ–ª—å —Å—Ç–∞–∂–µ—Ä–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–≤–∞–ª
        success = await change_trainee_to_employee(session, trainee.id, None)
        if not success:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞")
            return
            
        await session.commit()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é
        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∞–∂–µ—Ä –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üëë <b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> –°–æ—Ç—Ä—É–¥–Ω–∏–∫\n\n"
            "<i>–°—Ç–∞–∂–µ—Ä –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, "
            "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é.</i>",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞ –æ –ø–µ—Ä–µ–≤–æ–¥–µ
        await callback.message.bot.send_message(
            chat_id=trainee.tg_id,
            text=(
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Å—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!</b>\n\n"
                f"üë®‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager.full_name}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                "<i>–¢—ã –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.</i>\n\n"
                "üöÄ <b>–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é</b>"
            ),
            parse_mode="HTML"
        )
        
        await state.clear()
        log_user_action(callback.from_user.id, "employee_anyway", f"–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {manager.full_name} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–≤–∞–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
        log_user_error(callback.from_user.id, "make_employee_anyway_error", str(e))


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@router.callback_query(F.data == "back_to_attestations")
async def callback_back_to_attestations(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π"""
    try:
        await callback.answer()
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        has_permission = await check_user_permission(session, user.id, "conduct_attestations")
        if not has_permission:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        manager_attestations = await get_manager_assigned_attestations(session, user.id)
        
        if not manager_attestations:
            await callback.message.edit_text(
                "üîç <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤</b>\n\n"
                "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.\n\n"
                "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è' –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã'.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
        attestations_list = []
        for i, attestation_data in enumerate(manager_attestations, 1):
            trainee = attestation_data['trainee']
            attestation = attestation_data['attestation']
            assignment = attestation_data['assignment']
            
            status_text = {
                'assigned': 'üü° –ù–∞–∑–Ω–∞—á–µ–Ω–∞',
                'in_progress': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
                'failed': '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–∞'
            }.get(assignment.status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            scheduled_info = ""
            if assignment.scheduled_date and assignment.scheduled_time:
                scheduled_info = f"\n   üìÖ –î–∞—Ç–∞: {assignment.scheduled_date.strftime('%d.%m.%Y')} –≤ {assignment.scheduled_time.strftime('%H:%M')}"
            
            attestations_list.append(
                f"<b>{i}. {trainee.full_name}</b>\n"
                f"   üìã –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è: {attestation.name}\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}{scheduled_info}"
            )
        
        attestations_display = "\n\n".join(attestations_list)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for attestation_data in manager_attestations:
            assignment = attestation_data['assignment']
            trainee = attestation_data['trainee']
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üë§ {trainee.full_name}",
                    callback_data=f"manage_attestation:{assignment.id}"
                )
            ])
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        await callback.message.edit_text(
            f"üîç <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤</b>\n\n"
            f"üë®‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {user.full_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π:</b> {len(manager_attestations)}\n\n"
            f"{attestations_display}\n\n"
            "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É")
        log_user_error(callback.from_user.id, "back_to_attestations_error", str(e))


@router.callback_query(F.data == "cancel_schedule_change")
async def callback_cancel_schedule_change(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        await callback.answer()
        
        state_data = await state.get_data()
        assignment_id = state_data.get("assignment_id")
        
        await state.clear()
        await state.update_data(assignment_id=assignment_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–∞–∂–µ—Ä–æ–º
        await callback_select_trainee_attestation(
            type('MockCallback', (), {
                'data': f'select_trainee_attestation:{assignment_id}',
                'message': callback.message,
                'from_user': callback.from_user,
                'answer': lambda: None
            })(), 
            state, session
        )
    
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        log_user_error(callback.from_user.id, "cancel_schedule_error", str(e))