from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_all_users, get_user_by_id, get_all_roles, 
    add_user_role, remove_user_role, get_user_roles, get_all_trainees,
    get_user_by_tg_id, check_user_permission, get_trainee_mentor,
    get_user_test_results
)
from keyboards.keyboards import (
    get_user_selection_keyboard, get_user_action_keyboard, 
    get_role_change_keyboard, get_confirmation_keyboard
)
from states.states import AdminStates
from utils.logger import log_user_action, log_user_error
from handlers.auth import check_auth

router = Router()


async def check_admin_permission(message: Message, state: FSMContext, session: AsyncSession, permission: str = "manage_users") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ """

    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return False
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return False
    
    has_permission = await check_user_permission(session, user.id, permission)
    
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return False
    
    return True


@router.message(Command("manage_users"))
async def cmd_manage_users(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not await check_admin_permission(message, state, session):
        return
    
    await show_user_list(message, state, session)


@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def button_manage_users(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    await cmd_manage_users(message, state, session)


async def show_user_list(message: Message, state: FSMContext, session: AsyncSession):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞"""
    users = await get_all_users(session)
    
    if not users:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    

    keyboard = get_user_selection_keyboard(users)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.waiting_for_user_selection)
    
    log_user_action(message.from_user.id, message.from_user.username, "opened user management panel")


@router.callback_query(AdminStates.waiting_for_user_selection, F.data.startswith("user:"))
async def process_user_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
    user_id = int(callback.data.split(':')[1])
    
    user = await get_user_by_id(session, user_id)
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    user_roles = await get_user_roles(session, user.id)
    roles_str = ", ".join([role.name for role in user_roles])
    
    extra_info = ""
    if "–°—Ç–∞–∂–µ—Ä" in roles_str:
        mentor = await get_trainee_mentor(session, user.id)
        results = await get_user_test_results(session, user.id)
        passed_count = sum(1 for r in results if r.is_passed)
        avg_score = sum(r.score for r in results) / len(results) if results else 0
        
        extra_info = f"""
    <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–∂–µ—Ä–∞:</b>
    üë®‚Äçüè´ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
    ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_count}/{len(results)}
    üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}
    """

    user_info = f"""
    üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
    
    üßë –§–ò–û: {user.full_name}
    üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}
    üÜî Telegram ID: {user.tg_id}
    üë§ Username: @{user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
    üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}
    üëë –†–æ–ª–∏: {roles_str}
    {extra_info}
    """

    keyboard = get_user_action_keyboard(user.id)

    await callback.message.edit_text(
        user_info,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await state.set_state(AdminStates.waiting_for_user_action)
    await state.update_data(selected_user_id=user.id)

    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "selected user for management", 
        {"selected_user_id": user.id}
    )

@router.callback_query(AdminStates.waiting_for_user_action, F.data.startswith("change_role:"))
async def process_change_role(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split(':')[1])
    
    user = await get_user_by_id(session, user_id)
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    roles = await get_all_roles(session)
    
    if not roles:
        await callback.message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–æ–ª–∏.")
        await callback.answer()
        return

    keyboard = get_role_change_keyboard(user.id, roles)
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}:",
        reply_markup=keyboard
    )

    await state.set_state(AdminStates.waiting_for_role_change)

    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "opened role change menu", 
        {"target_user_id": user.id}
    )


@router.callback_query(AdminStates.waiting_for_role_change, F.data.startswith("set_role:"))
async def process_set_role(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = callback.data.split(':')
    user_id = int(parts[1])
    role_name = parts[2]

    user = await get_user_by_id(session, user_id)
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    current_roles = await get_user_roles(session, user.id)
    current_role_names = [role.name for role in current_roles]

    action = "remove" if role_name in current_role_names else "add"
    action_text = "—É–¥–∞–ª–∏—Ç—å" if action == "remove" else "–¥–æ–±–∞–≤–∏—Ç—å"

    await callback.message.edit_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ {action_text} —Ä–æ–ª—å '{role_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}?\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: {', '.join(current_role_names)}",
        reply_markup=get_confirmation_keyboard(user.id, role_name, action)
    )

    await state.set_state(AdminStates.waiting_for_confirmation)
    await state.update_data(
        user_id=user.id, 
        role_name=role_name, 
        action=action,
        current_roles=current_role_names
    )

    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        f"requested role change confirmation", 
        {"target_user_id": user.id, "role": role_name, "action": action}
    )


@router.callback_query(AdminStates.waiting_for_confirmation, F.data.startswith("confirm:"))
async def process_confirm_role_change(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í!
    current_user = await get_user_by_tg_id(session, callback.from_user.id)
    if not current_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    has_permission = await check_user_permission(session, current_user.id, "manage_users")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    parts = callback.data.split(':')
    action = parts[1]
    user_id = int(parts[2])
    role_name = parts[3]
    
    user = await get_user_by_id(session, user_id)
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    if action == "add":
        success = await add_user_role(session, user.id, role_name)
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"
    else:
        success = await remove_user_role(session, user.id, role_name)
        action_text = "—É–¥–∞–ª–µ–Ω–∞"
    
    if success:
        updated_roles = await get_user_roles(session, user.id)
        roles_str = ", ".join([role.name for role in updated_roles])
        
        await callback.message.answer(
            f"‚úÖ –†–æ–ª—å '{role_name}' —É—Å–ø–µ—à–Ω–æ {action_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}.\n"
            f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: {roles_str}"
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            f"role {action} confirmed", 
            {"target_user_id": user.id, "role": role_name}
        )
    else:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}.")
        log_user_error(
            callback.from_user.id, 
            callback.from_user.username, 
            "role change failed", 
            {"target_user_id": user.id, "role": role_name, "action": action}
        )

    await show_user_list(callback.message, state, session)

    await callback.answer()


@router.callback_query(F.data.startswith("cancel_role_change:"))
async def process_cancel_role_change(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
    user_id = int(callback.data.split(':')[1])
    
    data = await state.get_data()
    role_name = data.get("role_name")
    
    await callback.message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ '{role_name}' –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    user = await get_user_by_id(session, user_id)
    if user:
        keyboard = get_user_action_keyboard(user.id)
        
        user_roles = await get_user_roles(session, user.id)
        roles_str = ", ".join([role.name for role in user_roles])
        
        user_info = f"""
        üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>
        
        üßë –§–ò–û: {user.full_name}
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}
        üÜî Telegram ID: {user.tg_id}
        üë§ Username: @{user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
        üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}
        üëë –†–æ–ª–∏: {roles_str}
        """

        await callback.message.edit_text(
            user_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.waiting_for_user_action)
    else:
        await show_user_list(callback.message, state, session)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled role change", 
        {"target_user_id": user_id, "role": role_name}
    )


@router.callback_query(F.data == "back_to_users")
async def process_back_to_users(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await show_user_list(callback.message, state, session)
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()
    
    log_user_action(callback.from_user.id, callback.from_user.username, "cancelled admin operation")


@router.callback_query(F.data.startswith("view_profile:"))
async def process_view_profile(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split(':')[1])

    user = await get_user_by_id(session, user_id)
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    user_roles = await get_user_roles(session, user.id)
    roles_str = ", ".join([role.name for role in user_roles])

    user_info = f"""
    üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
    
    üßë –§–ò–û: {user.full_name}
    üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}
    üÜî Telegram ID: {user.tg_id}
    üë§ Username: @{user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
    üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}
    üëë –†–æ–ª–∏: {roles_str}
    """

    keyboard = get_user_action_keyboard(user.id)

    await callback.message.edit_text(
        user_info,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "viewed user profile", 
        {"viewed_user_id": user.id}
    )


@router.message(Command("trainees"))
async def cmd_trainees(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –°—Ç–∞–∂–µ—Ä–æ–≤"""
    if not await check_admin_permission(message, state, session, permission="view_trainee_list"):
        return
    
    trainees = await get_all_trainees(session)
    
    if not trainees:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –°—Ç–∞–∂–µ—Ä–æ–≤.")
        return

    trainees_list = "\n".join([
        f"{i+1}. {trainee.full_name} (@{trainee.username or '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
        for i, trainee in enumerate(trainees)
    ])
    
    await message.answer(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –°—Ç–∞–∂–µ—Ä–æ–≤</b>\n\n{trainees_list}\n\n"
        "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°—Ç–∞–∂–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manage_users",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed trainees list")


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –°—Ç–∞–∂–µ—Ä–æ–≤")
async def button_trainees(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –°—Ç–∞–∂–µ—Ä–æ–≤"""
    await cmd_trainees(message, state, session) 