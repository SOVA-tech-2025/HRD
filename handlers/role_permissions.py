from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_all_roles, get_role_permissions, get_all_permissions,
    add_permission_to_role, remove_permission_from_role,
    get_role_by_name, get_permission_by_name, check_user_permission,
    get_user_by_tg_id
)
from keyboards.keyboards import (
    get_role_management_keyboard, get_permission_action_keyboard,
    get_permission_selection_keyboard, get_permission_confirmation_keyboard
)
from states.states import AdminStates
from utils.logger import log_user_action, log_user_error
from handlers.auth import check_auth

router = Router()

@router.message(Command("manage_permissions"))
async def cmd_manage_permissions(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "manage_roles")
    
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π.")
        return
    
    await show_roles_list(message, state, session)

@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π")
async def button_manage_permissions(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π"""
    await cmd_manage_permissions(message, state, session)

async def show_roles_list(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        session (AsyncSession): –°–µ—Å—Å–∏—è –ë–î
    """
    roles = await get_all_roles(session)
    
    if not roles:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.")
        return
    
    keyboard = get_role_management_keyboard(roles)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏:",
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.waiting_for_role_selection)
    
    log_user_action(message.from_user.id, message.from_user.username, "opened role permissions management")

@router.callback_query(AdminStates.waiting_for_role_selection, F.data.startswith("manage_role_permissions:"))
async def process_role_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    role_id = int(callback.data.split(':')[1])
    
    role = None
    roles = await get_all_roles(session)
    for r in roles:
        if r.id == role_id:
            role = r
            break
    
    if not role:
        await callback.message.answer("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    
    role_perms = await get_role_permissions(session, role.id)
    
    readable_perms = []
    if role_perms:
        for perm in role_perms:
            if perm.description:
                readable_perms.append(perm.description)
    
    if readable_perms:
        perms_display = "\n".join([f"‚Ä¢ {perm}" for perm in readable_perms])
    else:
        perms_display = "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤"
    
    role_info = f"""üëë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {role.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {role.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}

üîë <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏:</b>
{perms_display}"""
    
    keyboard = get_permission_action_keyboard(role.id)
    
    await callback.message.edit_text(
        role_info,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_permission_action)
    await state.update_data(selected_role_id=role.id, role_name=role.name)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "selected role for permission management", 
        {"selected_role_id": role.id, "role_name": role.name}
    )

@router.callback_query(AdminStates.waiting_for_permission_action, F.data.startswith("add_permission:"))
async def process_add_permission(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞"""
    role_id = int(callback.data.split(':')[1])
    
    all_permissions = await get_all_permissions(session)
    
    current_permissions = await get_role_permissions(session, role_id)
    current_perm_names = [perm.name for perm in current_permissions]
    
    available_permissions = [perm for perm in all_permissions if perm.name not in current_perm_names]
    
    if not available_permissions:
        await callback.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —ç—Ç–æ–π —Ä–æ–ª–∏.")
        await callback.answer()
        return
    
    keyboard = get_permission_selection_keyboard(available_permissions, role_id, "add")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–π —Ä–æ–ª–∏:",
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.waiting_for_permission_selection)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "opened add permission menu", 
        {"role_id": role_id}
    )

@router.callback_query(AdminStates.waiting_for_permission_action, F.data.startswith("remove_permission:"))
async def process_remove_permission(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞"""
    role_id = int(callback.data.split(':')[1])
    
    current_permissions = await get_role_permissions(session, role_id)
    
    if not current_permissions:
        await callback.message.answer("–£ —ç—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å.")
        await callback.answer()
        return
    
    keyboard = get_permission_selection_keyboard(current_permissions, role_id, "remove")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —É —ç—Ç–æ–π —Ä–æ–ª–∏:",
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.waiting_for_permission_selection)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "opened remove permission menu", 
        {"role_id": role_id}
    )

@router.callback_query(AdminStates.waiting_for_permission_selection, F.data.startswith("select_permission:"))
async def process_permission_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∞"""
    parts = callback.data.split(':')
    action = parts[1]
    role_id = int(parts[2])
    permission_name = parts[3]
    
    role = None
    roles = await get_all_roles(session)
    for r in roles:
        if r.id == role_id:
            role = r
            break
    
    permission = await get_permission_by_name(session, permission_name)
    
    if not role or not permission:
        await callback.message.answer("–†–æ–ª—å –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        await state.set_state(AdminStates.waiting_for_permission_action)
        return
    
    action_text = "–¥–æ–±–∞–≤–∏—Ç—å" if action == "add" else "—É–±—Ä–∞—Ç—å"
    confirmation_text = f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '{permission.description}' –¥–ª—è —Ä–æ–ª–∏ '{role.name}'?"
    
    keyboard = get_permission_confirmation_keyboard(action, role.id, permission.name)
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=keyboard
    )
    
    await state.set_state(AdminStates.waiting_for_permission_confirmation)
    await state.update_data({
        "selected_role_id": role.id,
        "role_name": role.name,
        "permission_name": permission.name,
        "permission_description": permission.description,
        "action": action
    })
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        f"selected {action} permission", 
        {
            "role_id": role.id, 
            "role_name": role.name,
            "permission": permission.name
        }
    )

@router.callback_query(AdminStates.waiting_for_permission_confirmation, F.data.startswith("confirm_permission:"))
async def process_permission_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø—Ä–∞–≤–æ–º"""

    current_user = await get_user_by_tg_id(session, callback.from_user.id)
    if not current_user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    has_permission = await check_user_permission(session, current_user.id, "manage_roles")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    data = await state.get_data()
    action = data.get("action")
    role_id = data.get("selected_role_id")
    role_name = data.get("role_name")
    permission_name = data.get("permission_name")
    permission_description = data.get("permission_description")
    
    success = False
    if action == "add":
        success = await add_permission_to_role(session, role_id, permission_name)
        result_text = f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '{permission_description}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏."
        log_msg = "added permission to role"
    else:
        success = await remove_permission_from_role(session, role_id, permission_name)
        result_text = f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '{permission_description}' —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏."
        log_msg = "removed permission from role"
    
    if success:
        await callback.message.answer(result_text)
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            log_msg, 
            {
                "role_id": role_id, 
                "role_name": role_name,
                "permission": permission_name
            }
        )
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        log_user_error(
            callback.from_user.id, 
            callback.from_user.username, 
            f"failed to {action} permission", 
            {
                "role_id": role_id, 
                "role_name": role_name,
                "permission": permission_name
            }
        )
    
    role = None
    roles = await get_all_roles(session)
    for r in roles:
        if r.id == role_id:
            role = r
            break
    
    if role:
        role_perms = await get_role_permissions(session, role.id)
        
        readable_perms = []
        if role_perms:
            for perm in role_perms:
                if perm.description:
                    readable_perms.append(perm.description)
        
        if readable_perms:
            perms_display = "\n".join([f"‚Ä¢ {perm}" for perm in readable_perms])
        else:
            perms_display = "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤"
        
        role_info = f"""üëë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {role.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {role.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}

üîë <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏:</b>
{perms_display}"""
        
        keyboard = get_permission_action_keyboard(role.id)
        
        await callback.message.edit_text(
            role_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(AdminStates.waiting_for_permission_action)
    else:
        await callback.message.edit_text("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π.")
    
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_permission_selection:"))
async def process_cancel_permission_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∞"""
    role_id = int(callback.data.split(':')[1])
    
    role = None
    roles = await get_all_roles(session)
    for r in roles:
        if r.id == role_id:
            role = r
            break
    
    if not role:
        await callback.message.answer("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        await state.clear()
        return
    
    role_perms = await get_role_permissions(session, role.id)
    
    readable_perms = []
    if role_perms:
        for perm in role_perms:
            if perm.description:
                readable_perms.append(perm.description)
    
    if readable_perms:
        perms_display = "\n".join([f"‚Ä¢ {perm}" for perm in readable_perms])
    else:
        perms_display = "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤"
    
    role_info = f"""üëë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {role.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {role.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}

üîë <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏:</b>
{perms_display}"""
    
    keyboard = get_permission_action_keyboard(role.id)
    
    await callback.message.edit_text(
        role_info,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_for_permission_action)
    await state.update_data(selected_role_id=role.id, role_name=role.name)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled permission selection", 
        {"role_id": role.id}
    )

@router.callback_query(F.data == "back_to_roles")
async def process_back_to_roles(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π"""
    await show_roles_list(callback.message, state, session)
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def process_cancel_role_management(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    await state.clear()
    
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled role management"
    )

@router.callback_query(F.data.startswith("cancel_permission_confirmation:"))
async def process_cancel_permission_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø—Ä–∞–≤–æ–º"""
    parts = callback.data.split(':')
    action = parts[1]
    role_id = int(parts[2])
    
    permissions = await get_all_permissions(session)
    current_permissions = await get_role_permissions(session, role_id)
    current_perm_names = [perm.name for perm in current_permissions]
    
    if action == "add":
        available_permissions = [perm for perm in permissions if perm.name not in current_perm_names]
        if available_permissions:
            keyboard = get_permission_selection_keyboard(available_permissions, role_id, "add")
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–π —Ä–æ–ª–∏:",
                reply_markup=keyboard
            )
        else:
            await callback.message.answer("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —ç—Ç–æ–π —Ä–æ–ª–∏.")
            process_cancel_permission_selection(callback, state, session)
    else:
        if current_permissions:
            keyboard = get_permission_selection_keyboard(current_permissions, role_id, "remove")
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —É —ç—Ç–æ–π —Ä–æ–ª–∏:",
                reply_markup=keyboard
            )
        else:
            await callback.message.answer("–£ —ç—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å.")
            process_cancel_permission_selection(callback, state, session)
    
    await state.set_state(AdminStates.waiting_for_permission_selection)
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled permission confirmation", 
        {"role_id": role_id, "action": action}
    )

@router.callback_query(F.data.startswith("cancel_role_change:"))
async def process_cancel_role_change(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()
    
    await callback.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled role change"
    ) 