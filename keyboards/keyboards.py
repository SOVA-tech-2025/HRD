from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton


def get_welcome_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register:normal")],
        [InlineKeyboardButton(text="–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥", callback_data="register:with_code")]
    ])
    return keyboard


def get_contact_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def get_role_selection_keyboard(is_editing: bool = False) -> InlineKeyboardMarkup:
    import os
    allow_auto_role = os.getenv("ALLOW_AUTO_ROLE_ASSIGNMENT", "false").lower() == "true"
    default_role = os.getenv("DEFAULT_ROLE", "–°—Ç–∞–∂–µ—Ä")
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
    all_roles = [
        ("–°—Ç–∞–∂—ë—Ä", "–°—Ç–∞–∂–µ—Ä"),
        ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"), 
        ("–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"),
        ("–†–µ–∫—Ä—É—Ç–µ—Ä", "–†–µ–∫—Ä—É—Ç–µ—Ä"),
        ("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
    ]
    
    keyboard_buttons = []
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ä–æ–ª—å –≤–≤–µ—Ä—Ö—É
    if allow_auto_role:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üöÄ {default_role} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ä–æ–ª—å)", 
            callback_data=f"role:{default_role}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π
    for display_name, role_name in all_roles:
        if not (allow_auto_role and role_name == default_role):
            keyboard_buttons.append([InlineKeyboardButton(text=display_name, callback_data=f"role:{role_name}")])
    
    # –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–∞–∑–∞–¥", –∏–Ω–∞—á–µ "–û—Ç–º–µ–Ω–∞"
    if is_editing:
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")])
    else:
        keyboard_buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def get_trainee_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è üìñ")],
            [KeyboardButton(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ")],
            [KeyboardButton(text="–ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ üéì")],
            [KeyboardButton(text="–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ üó∫Ô∏è"), KeyboardButton(text="–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã üìä")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_recruiter_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ ‚úàÔ∏è")],
            [KeyboardButton(text="–¢–µ—Å—Ç—ã üìÑ")],
            [KeyboardButton(text="–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ ü¶â")],
            [KeyboardButton(text="–°—Ç–∞–∂–µ—Ä—ã üê£")],
            [KeyboardButton(text="–ì—Ä—É–ø–ø—ã üóÇÔ∏è")],
            [KeyboardButton(text="–û–±—ä–µ–∫—Ç—ã üìç")],
            [KeyboardButton(text="–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è üìñ")],
            [KeyboardButton(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ")],
            [KeyboardButton(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üö∏")],
            [KeyboardButton(text="–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚ûï")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_mentor_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–ª–∏ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ - Updated with emojis and mentor tests"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã üë•")],
            [KeyboardButton(text="–¢–µ—Å—Ç—ã —Å—Ç–∞–∂–µ—Ä–æ–≤ üìù"), KeyboardButton(text="–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã")],
            [KeyboardButton(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã üìä")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_employee_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–ª–∏ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–ø—Ä–æ—à–µ–¥—à–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é —Å—Ç–∞–∂–µ—Ä—ã) - Task 7"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã")],
            [KeyboardButton(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_manager_keyboard() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è - –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å—Ç–∞–∂–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è Task 7 + Knowledge Base)"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è")],
            [KeyboardButton(text="–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è ‚úîÔ∏è")],
            [KeyboardButton(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_user_selection_keyboard(users: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    keyboard = []
    
    for user in users:
        button = InlineKeyboardButton(
            text=f"{user.full_name} ({user.username or '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})",
            callback_data=f"user:{user.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_user_action_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"change_role:{user_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users")]
        ]
    )
    return keyboard


def get_role_change_keyboard(user_id: int, roles: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    keyboard = []
    
    for role in roles:
        button = InlineKeyboardButton(
            text=role.name,
            callback_data=f"set_role:{user_id}:{role.name}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_role_change:{user_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirmation_keyboard(user_id: int, role_name: str, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{action}:{user_id}:{role_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_role_change:{user_id}")]
        ]
    )
    return keyboard


def get_keyboard_by_role(roles) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è Task 7)"""
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
    if isinstance(roles, str):
        role_names = [roles]
    else:
        role_names = roles if isinstance(roles, list) else [role.name for role in roles]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–æ–ª–µ–π
    if "–†–µ–∫—Ä—É—Ç–µ—Ä" in role_names:
        return get_recruiter_keyboard()
    elif "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in role_names:
        return get_manager_keyboard()
    elif "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫" in role_names:
        return get_mentor_keyboard()
    elif "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" in role_names:
        return get_employee_keyboard()
    elif "–°—Ç–∞–∂–µ—Ä" in role_names:
        return get_trainee_keyboard()
    else:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–ü–æ–º–æ—â—å")]],
            resize_keyboard=True
        )


def get_role_management_keyboard(roles: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏, —á—å–∏ –ø—Ä–∞–≤–∞ –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è"""

    keyboard = []
    
    for role in roles:
        button = InlineKeyboardButton(
            text=role.name,
            callback_data=f"manage_role_permissions:{role.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_permission_action_keyboard(role_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–∏ """

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–∞—Å—à–∏—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏", callback_data=f"add_permission:{role_id}")],
            [InlineKeyboardButton(text="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏", callback_data=f"remove_permission:{role_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π", callback_data="back_to_roles")]
        ]
    )
    return keyboard


def get_permission_selection_keyboard(permissions: list, role_id: int, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∞ """

    keyboard = []
    
    for permission in permissions:
        button = InlineKeyboardButton(
            text=f"{permission.description}",
            callback_data=f"select_permission:{action}:{role_id}:{permission.name}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_permission_selection:{role_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_permission_confirmation_keyboard(role_id: int, permission_name: str, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤"""
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_permission:{action}:{role_id}:{permission_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_permission_confirmation:{role_id}:{permission_name}")]
        ]
    )
    return keyboard


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–°–¢–ê–ú–ò
# =================================

def get_yes_no_keyboard(prefix: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç"""
    keyboard_buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}:yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"{prefix}:no")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    if prefix in ["more_questions", "materials"]:
        keyboard_buttons.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def get_test_description_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="description:skip")],
            [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
        ]
    )
    return keyboard


def get_test_materials_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–µ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="materials:skip")],
            [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
        ]
    )
    return keyboard


def get_materials_choice_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="materials:yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="materials:no")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="test_back")],
            [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
        ]
    )
    return keyboard


def get_test_created_success_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="list_tests")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard


def get_question_type_keyboard(is_creating_test: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard_buttons = [
        [InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç)", callback_data="q_type:text")],
        [InlineKeyboardButton(text="–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", callback_data="q_type:single_choice")],
        [InlineKeyboardButton(text="–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", callback_data="q_type:multiple_choice")],
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç '–î–∞' –∏–ª–∏ '–ù–µ—Ç'", callback_data="q_type:yes_no")]
    ]
    
    # –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if is_creating_test:
        keyboard_buttons.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")])
    else:
        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_question")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def get_test_edit_menu(test_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ/–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_meta:{test_id}"),
                InlineKeyboardButton(text="üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"edit_test_materials:{test_id}")
            ],
            [
                InlineKeyboardButton(text="‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data=f"edit_test_questions:{test_id}"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"edit_test_settings:{test_id}")
            ],
            [InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_test:{test_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
        ]
    )
    return keyboard


def get_test_filter_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóÇÔ∏è –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="test_filter:my"),
                InlineKeyboardButton(text="üìö –í—Å–µ —Ç–µ—Å—Ç—ã", callback_data="test_filter:all")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tests_menu")]
        ]
    )
    return keyboard


def get_simple_test_selection_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"{test.name} (–º–∞–∫—Å. {test.max_score} –±–∞–ª–ª–æ–≤)",
            callback_data=f"test:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_test_selection_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (Task 8)"""
    keyboard = []
    
    for test in tests:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{test.name}",
                callback_data=f"broadcast_test:{test.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_groups_selection_keyboard(groups: list, selected_groups: list = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (Task 8)"""
    if selected_groups is None:
        selected_groups = []
    
    keyboard = []
    
    for group in groups:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –≥–∞–ª–æ—á–∫–æ–π
        if group.id in selected_groups:
            text = f"‚úÖ {group.name}"
        else:
            text = f"{group.name}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"broadcast_group:{group.id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞
    if selected_groups:
        keyboard.append([
            InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data="broadcast_send")
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_success_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (Task 8)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard


def get_broadcast_photos_keyboard(has_photos: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ —Ä–∞—Å—Å—ã–ª–∫—É"""
    keyboard = []
    
    if has_photos:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="broadcast_finish_photos")])
    
    keyboard.append([InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="broadcast_skip_photos")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_folders_keyboard(folders: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    keyboard = []
    
    for folder in folders:
        folder_name = folder.name[:30] + "..." if len(folder.name) > 30 else folder.name
        keyboard.append([InlineKeyboardButton(
            text=f"üìÅ {folder_name}",
            callback_data=f"broadcast_folder:{folder.id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="broadcast_skip_material")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_materials_keyboard(folder_name: str, materials: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = []
    
    for material in materials:
        if material.is_active:
            material_name = material.name[:35] + "..." if len(material.name) > 35 else material.name
            material_icon = "üîó" if material.material_type == "link" else "üìÑ"
            keyboard.append([InlineKeyboardButton(
                text=f"{material_icon} {material_name}",
                callback_data=f"broadcast_select_material:{material.id}"
            )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º", callback_data="broadcast_back_to_folders")])
    keyboard.append([InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="broadcast_skip_material")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_tests_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    keyboard = []
    
    for test in tests:
        test_name = test.name[:40] + "..." if len(test.name) > 40 else test.name
        keyboard.append([InlineKeyboardButton(
            text=test_name,
            callback_data=f"broadcast_test:{test.id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", callback_data="broadcast_skip_test")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_notification_keyboard(test_id: int = None, material_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    keyboard = []
    
    if test_id:
        keyboard.append([InlineKeyboardButton(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É", callback_data=f"take_test:{test_id}")])
    
    if material_id:
        keyboard.append([InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"broadcast_material:{material_id}")])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_broadcast_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_question_edit_keyboard(question_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", callback_data=f"edit_question_text:{question_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_question_answer:{question_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"edit_question_points:{question_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_question:{question_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_questions")]
        ]
    )
    return keyboard


def get_stage_selection_keyboard(stages: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"""
    keyboard = []
    
    for stage in stages:
        button = InlineKeyboardButton(
            text=f"{stage.order_number}. {stage.name}",
            callback_data=f"stage:{stage.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="üîì –¢–µ—Å—Ç –±–µ–∑ —ç—Ç–∞–ø–∞", callback_data="stage:none")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_actions_keyboard(test_id: int, user_role: str = "creator") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    keyboard = []
    
    if user_role == "creator":
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–µ—Å—Ç–∞ (—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞)
        keyboard.extend([
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_test:{test_id}")],
            [InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"view_materials:{test_id}")],
            [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"test_results:{test_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_test:{test_id}")]
        ])
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        keyboard.extend([
            [InlineKeyboardButton(text="üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å—Ç–∞–∂–µ—Ä–∞–º", callback_data=f"grant_access_to_test:{test_id}")],
            [InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"view_materials:{test_id}")],
            [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"test_results:{test_id}")]
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tests")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_question_selection_keyboard(questions: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard = []
    
    for question in questions:
        button = InlineKeyboardButton(
            text=f"–í–æ–ø—Ä–æ—Å {question.question_number}",
            callback_data=f"question:{question.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ù–ê–°–¢–ê–í–ù–ò–ß–ï–°–¢–í–ê
# =================================

def get_trainee_selection_keyboard(trainees: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    keyboard = []
    
    for trainee in trainees:
        button = InlineKeyboardButton(
            text=f"{trainee.full_name}",
            callback_data=f"trainee:{trainee.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mentor_selection_keyboard(mentors: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"""
    keyboard = []
    
    for mentor in mentors:
        button = InlineKeyboardButton(
            text=f"{mentor.full_name}",
            callback_data=f"mentor:{mentor.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_assignment_confirmation_keyboard(mentor_id: int, trainee_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_assignment:{mentor_id}:{trainee_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_assignment")]
        ]
    )
    return keyboard


def get_trainee_actions_keyboard(trainee_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"add_test_access:{trainee_id}")],
            [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", callback_data=f"trainee_results:{trainee_id}")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"trainee_profile:{trainee_id}")],
            [InlineKeyboardButton(text="üë®‚Äçüè´ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data=f"manager_actions:{trainee_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trainees")]
        ]
    )
    return keyboard


def get_test_access_keyboard(tests: list, trainee_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"{test.name}",
            callback_data=f"grant_access:{trainee_id}:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–û–í
# =================================

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_test_start_keyboard —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º

def get_test_navigation_keyboard(current_question: int, total_questions: int, test_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç—É"""
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if current_question > 1:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_question:{test_id}"))
    if current_question < total_questions:
        nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"next_question:{test_id}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if current_question == total_questions:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"finish_test:{test_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"cancel_test:{test_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
# =================================

def get_unassigned_trainees_keyboard(trainees: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    keyboard = []
    
    for trainee in trainees:
        button = InlineKeyboardButton(
            text=f"{trainee.full_name}",
            callback_data=f"unassigned_trainee:{trainee.id}"
        )
        keyboard.append([button])
    
    if not trainees:
        keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤", callback_data="info")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_start_keyboard(test_id: int, has_previous_result: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    start_text = "üîÑ –ü—Ä–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ" if has_previous_result else "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
    keyboard.append([InlineKeyboardButton(text=start_text, callback_data=f"start_test:{test_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    keyboard.append([InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"view_materials:{test_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")
    ]
    keyboard.append(navigation_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_selection_for_taking_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"üìã {test.name}",
            callback_data=f"test:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_question_management_keyboard(question_id: int, is_first: bool, is_last: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º"""
    nav_buttons = []
    if not is_first:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data=f"move_q_up:{question_id}"))
    if not is_last:
        nav_buttons.append(InlineKeyboardButton(text="‚¨áÔ∏è", callback_data=f"move_q_down:{question_id}"))

    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_q_text:{question_id}")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_q_answer:{question_id}")],
        [InlineKeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"edit_q_points:{question_id}")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"q_stats:{question_id}")],
        nav_buttons,
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_q:{question_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_q_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_settings_keyboard(test_id: int, shuffle: bool, attempts: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞"""
    shuffle_text = "‚úÖ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã" if shuffle else "‚òëÔ∏è –ù–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"
    
    if attempts == 0:
        attempts_text = "‚ôæÔ∏è –ü–æ–ø—ã—Ç–∫–∏: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"
    else:
        attempts_text = f"üî¢ –ü–æ–ø—ã—Ç–∫–∏: {attempts}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=shuffle_text, callback_data=f"toggle_shuffle:{test_id}")],
            [InlineKeyboardButton(text=attempts_text, callback_data=f"edit_attempts:{test_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")]
        ]
    )
    return keyboard


def get_finish_options_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", callback_data="finish_options")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
        ]
    )
    return keyboard


def format_help_message(role_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏"""
    base_text = "ü§ñ <b>–°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ HRD-–±–æ—Ç–∞</b>\n\n"
    
    role_specific_help = {
        "–°—Ç–∞–∂–µ—Ä": """üéì <b>–¢—ã ‚Äî —Å—Ç–∞–∂–µ—Ä.</b>
–¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
‚Ä¢ <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è üìñ</b> ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–≤–æ–µ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ</b> ‚Äî –∏–∑—É—á–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ <b>–ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ üéì</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ
‚Ä¢ <b>–¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ üó∫Ô∏è</b> ‚Äî —Ç–µ—Å—Ç—ã –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –ø–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
‚Ä¢ <b>–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã</b> ‚Äî —Ç–µ—Å—Ç—ã –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—ã–ª–∫—É
‚Ä¢ <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã üìä</b> ‚Äî —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ <code>/logout</code> ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
""",
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": """üë®‚Äçüíº <b>–¢—ã ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.</b>
–¢—ã –ø—Ä–æ—à–µ–ª —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã, –Ω–∞–∑–Ω–∞—á–∞–µ–º—ã–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ <b>–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ–±–µ —Ç–µ—Å—Ç—ã
‚Ä¢ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ <code>/logout</code> ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
""",
        "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫": """üë®‚Äçüè´ <b>–¢—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.</b>
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–µ–±–µ —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
‚Ä¢ <b>–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã üë•</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏
‚Ä¢ <b>–¢–µ—Å—Ç—ã —Å—Ç–∞–∂–µ—Ä–æ–≤ üìù</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Å—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–∞–º
‚Ä¢ <b>–ú–æ–∏ —Ç–µ—Å—Ç—ã üìã</b> ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—ã–ª–∫—É
‚Ä¢ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚Ä¢ <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã üìä</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –æ–±—É—á–µ–Ω–∏—è —Å–≤–æ–∏–º —Å—Ç–∞–∂–µ—Ä–∞–º
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–∞–ø–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –ø–æ –º–µ—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º —Å—Ç–∞–∂–µ—Ä–∞–º
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å—Ç–∞–∂–µ—Ä–∞–º —á–µ—Ä–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ <code>/logout</code> ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
""",
        "–†–µ–∫—Ä—É—Ç–µ—Ä": """üëî <b>–¢—ã ‚Äî —Ä–µ–∫—Ä—É—Ç–µ—Ä.</b>
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ü¶∏üèª‚Äç‚ôÇÔ∏è</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
‚Ä¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ ‚úàÔ∏è</b> ‚Äî –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø–æ –≥—Ä—É–ø–ø–∞–º
‚Ä¢ <b>–¢–µ—Å—Ç—ã üìÑ</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä)
‚Ä¢ <b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –Ω–æ–≤–æ–º—É —Å—Ç–∞–∂–µ—Ä—É
‚Ä¢ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ ü¶â</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
‚Ä¢ <b>–°—Ç–∞–∂–µ—Ä—ã üê£</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤
‚Ä¢ <b>–ì—Ä—É–ø–ø—ã üóÇÔ∏è</b> ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ <b>–û–±—ä–µ–∫—Ç—ã üìç</b> ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã
‚Ä¢ <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è üìñ</b> ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ</b> ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
‚Ä¢ <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üö∏</b> ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚ûï</b> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
‚Ä¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ <code>/logout</code> ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
""",
        "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": """üîß <b>–¢—ã ‚Äî —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.</b>
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è</b> ‚Äî –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å—Ç–∞–∂–µ—Ä–æ–≤
‚Ä¢ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π —Å—Ç–∞–∂–µ—Ä–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞–∂–µ—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ <code>/logout</code> ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
""",
        "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π": """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>
–¢—ã –µ—â–µ –Ω–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ <code>/register</code> ‚Äî –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞
‚Ä¢ <code>/login</code> ‚Äî –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
"""
    }

    base_text += role_specific_help.get(role_name, "–î–ª—è —Ç–≤–æ–µ–π —Ä–æ–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    base_text += "\n\n‚Ä¢ <code>/help</code> ‚Äî –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    
    return base_text 

def get_tests_for_access_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"üìã {test.name}",
            callback_data=f"grant_access_to_test:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–£–ü–ü–ê–ú–ò
# =================================

def get_group_management_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="manage_edit_group")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="manage_delete_group")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_group_selection_keyboard(groups: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_index = page * per_page
    end_index = start_index + per_page
    page_groups = groups[start_index:end_index]
    
    # –ö–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø
    for group in page_groups:
        button = InlineKeyboardButton(
            text=f"üóÇÔ∏è {group.name}",
            callback_data=f"select_group:{group.id}"
        )
        keyboard.append([button])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"groups_page:{page-1}"))
    
    total_pages = (len(groups) + per_page - 1) // per_page
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"groups_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    if total_pages > 1:
        page_info = InlineKeyboardButton(
            text=f"üìÑ {page + 1}/{total_pages}",
            callback_data="page_info"
        )
        keyboard.append([page_info])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_group_rename_confirmation_keyboard(group_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_rename:{group_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_rename")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_group_delete_selection_keyboard(groups: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_index = page * per_page
    end_index = start_index + per_page
    page_groups = groups[start_index:end_index]
    
    # –ö–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø
    for group in page_groups:
        button = InlineKeyboardButton(
            text=f"üóÇÔ∏è {group.name}",
            callback_data=f"delete_group:{group.id}"
        )
        keyboard.append([button])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delete_group_page:{page-1}"))
    if end_index < len(groups):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"delete_group_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    total_pages = (len(groups) + per_page - 1) // per_page
    if total_pages > 1:
        page_info = InlineKeyboardButton(
            text=f"üìÑ {page + 1}/{total_pages}",
            callback_data="page_info"
        )
        keyboard.append([page_info])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete_group"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_group_delete_confirmation_keyboard(group_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    keyboard = [
        [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_group:{group_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete_group")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    keyboard = [
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ë–™–ï–ö–¢–ê–ú–ò
# =================================

def get_object_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="create_object")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="edit_object")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="manage_delete_object")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_object_selection_keyboard(objects: list, page: int = 0, per_page: int = 5, object_type: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_index = page * per_page
    end_index = start_index + per_page
    page_objects = objects[start_index:end_index]
    
    # –ö–Ω–æ–ø–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    for obj in page_objects:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if object_type == "internship":
            callback_data = f"select_internship_object:{obj.id}"
        elif object_type == "work":
            callback_data = f"select_work_object:{obj.id}"
        else:
            callback_data = f"select_object:{obj.id}"
            
        keyboard.append([
            InlineKeyboardButton(
                text=obj.name,
                callback_data=callback_data
            )
        ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    navigation_row = []
    total_pages = (len(objects) + per_page - 1) // per_page
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if object_type == "internship":
        page_callback = "internship_object_page"
    elif object_type == "work":
        page_callback = "work_object_page"
    else:
        page_callback = "objects_page"
    
    if page > 0:
        navigation_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{page_callback}:{page-1}"))
    
    if total_pages > 1:
        navigation_row.append(InlineKeyboardButton(text=f"üìÑ {page+1}/{total_pages}", callback_data="page_info"))
    
    if page < total_pages - 1:
        navigation_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{page_callback}:{page+1}"))
    
    if navigation_row:
        keyboard.append(navigation_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_edit")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_object_rename_confirmation_keyboard(object_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_object_rename:{object_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_object_rename")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_object_delete_selection_keyboard(objects: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_objects = objects[start_idx:end_idx]
    
    for obj in page_objects:
        keyboard.append([InlineKeyboardButton(
            text=f"üóëÔ∏è {obj.name}",
            callback_data=f"delete_object:{obj.id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    total_pages = (len(objects) + per_page - 1) // per_page
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"object_delete_page:{page-1}"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"object_delete_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_object_delete")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_object_delete_confirmation_keyboard(object_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_object_delete:{object_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_object_delete")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_user_editor_keyboard(is_trainee: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton(text="–ò–º—è", callback_data="edit_full_name")],
        [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton(text="–†–æ–ª—å", callback_data="edit_role")],
        [InlineKeyboardButton(text="–ì—Ä—É–ø–ø—É", callback_data="edit_group")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤
    if is_trainee:
        keyboard.append([InlineKeyboardButton(text="–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="edit_internship_object")])
    
    keyboard.append([InlineKeyboardButton(text="–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã", callback_data="edit_work_object")])
    keyboard.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_view_user")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_user_deletion_confirmation_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_user:{user_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cancel_delete_user:{user_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_edit_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_change")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_change")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ================== –¢–†–ê–ï–ö–¢–û–†–ò–ò –û–ë–£–ß–ï–ù–ò–Ø ==================

def get_learning_paths_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï–°–æ–∑–¥–∞—Ç—å", callback_data="create_trajectory")],
        [InlineKeyboardButton(text="üëÅÔ∏è–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="edit_trajectory")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_trajectory")],
        [InlineKeyboardButton(text="üîç–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏", callback_data="manage_attestations")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trajectory_creation_start_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å", callback_data="start_trajectory_creation")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_selection_keyboard(tests: list, existing_tests_in_session: list = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    keyboard.append([InlineKeyboardButton(text="‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="create_new_test")])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if existing_tests_in_session:
        keyboard.append([InlineKeyboardButton(text="‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –°–µ—Å—Å–∏—é", callback_data="save_session")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for test in tests:
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if not existing_tests_in_session or test.id not in [t['id'] for t in existing_tests_in_session]:
            keyboard.append([InlineKeyboardButton(
                text=test.name, 
                callback_data=f"select_test:{test.id}"
            )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_creation_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel_test_creation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_materials_choice_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_materials")],
        [InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data="skip_materials")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel_test_creation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_materials_skip_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="‚è©–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_materials")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel_test_creation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_description_skip_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚è©–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel_test_creation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)




def get_more_questions_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_more_questions")],
        [InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data="finish_questions")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel_test_creation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_session_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="add_session")],
        [InlineKeyboardButton(text="–ù–æ–≤—ã–π –≠—Ç–∞–ø", callback_data="add_stage")],
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é", callback_data="save_trajectory")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_attestation_selection_keyboard(attestations: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    for attestation in attestations:
        keyboard.append([InlineKeyboardButton(
            text=attestation.name,
            callback_data=f"select_attestation:{attestation.id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_attestation_selection")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trajectory_save_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–î–∞", callback_data="confirm_trajectory_save")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_trajectory_save")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trajectory_attestation_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π (–ø—É–Ω–∫—Ç 49 –¢–ó)"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–î–∞", callback_data="confirm_attestation_and_proceed")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_attestation_confirmation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trajectory_final_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –≥—Ä—É–ø–ø–æ–π (–ø—É–Ω–∫—Ç 54 –¢–ó)"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="final_confirm_save")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_final_confirmation")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ================== –ê–¢–¢–ï–°–¢–ê–¶–ò–ò ==================

def get_attestations_main_keyboard(attestations: list) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton(text="‚ûï–°–æ–∑–¥–∞—Ç—å", callback_data="create_attestation")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    for attestation in attestations:
        keyboard.append([InlineKeyboardButton(
            text=attestation.name,
            callback_data=f"view_attestation:{attestation.id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trajectories_main")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_attestation_creation_start_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="–î–∞–ª–µ–µ‚è©", callback_data="start_attestation_creation")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_attestation_questions_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="save_attestation_questions")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ================== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==================

def get_users_filter_keyboard(groups: list, objects: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ –æ–±—ä–µ–∫—Ç–∞–º"""
    keyboard = []
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.append([InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="filter_all_users")])
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–∞–º
    if groups:
        keyboard.append([InlineKeyboardButton(text="üóÇÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–∞–º", callback_data="filter_by_groups")])
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç–∞–º  
    if objects:
        keyboard.append([InlineKeyboardButton(text="üìç –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", callback_data="filter_by_objects")])
    
    # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û
    keyboard.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û", callback_data="search_all_users")])
    
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_group_filter_keyboard(groups: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    total_groups = len(groups)
    start_idx = page * per_page
    end_idx = start_idx + per_page
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for group in groups[start_idx:end_idx]:
        keyboard.append([InlineKeyboardButton(
            text=f"üóÇÔ∏è {group.name}",
            callback_data=f"filter_group:{group.id}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"group_filter_page:{page - 1}"))
    
    if end_idx < total_groups:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"group_filter_page:{page + 1}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_object_filter_keyboard(objects: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    total_objects = len(objects)
    start_idx = page * per_page
    end_idx = start_idx + per_page
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for obj in objects[start_idx:end_idx]:
        keyboard.append([InlineKeyboardButton(
            text=f"üìç {obj.name}",
            callback_data=f"filter_object:{obj.id}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"object_filter_page:{page - 1}"))
    
    if end_idx < total_objects:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"object_filter_page:{page + 1}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_users_list_keyboard(users: list, page: int = 0, per_page: int = 5, filter_type: str = "all") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    total_users = len(users)
    start_idx = page * per_page
    end_idx = start_idx + per_page
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for user in users[start_idx:end_idx]:
        # –†–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        role_name = user.roles[0].name if user.roles else "–ë–µ–∑ —Ä–æ–ª–∏"
        
        keyboard.append([InlineKeyboardButton(
            text=f"üë§ {user.full_name} ({role_name})",
            callback_data=f"view_user:{user.id}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_page:{filter_type}:{page - 1}"))
    
    if end_idx < total_users:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_page:{filter_type}:{page + 1}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="back_to_filters")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_new_users_list_keyboard(users: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö (–Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    total_users = len(users)
    start_idx = page * per_page
    end_idx = start_idx + per_page
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for user in users[start_idx:end_idx]:
        registration_date = user.registration_date.strftime('%d.%m.%Y') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        button_text = f"{user.full_name} ({registration_date})"
        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"activate_user:{user.id}"
            )
        ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"new_users_page:{page - 1}"))
    
    if end_idx < total_users:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"new_users_page:{page + 1}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_users > per_page:
        total_pages = (total_users + per_page - 1) // per_page
        keyboard.append([InlineKeyboardButton(
            text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}",
            callback_data="noop"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    keyboard.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û", callback_data="search_new_users")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_user_info_keyboard(user_id: int, filter_type: str = "all") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_user:{user_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_users:{filter_type}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú–ò =====

def get_manager_selection_keyboard(managers: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    """
    keyboard = []

    for manager in managers:
        keyboard.append([InlineKeyboardButton(
            text=f"{manager.full_name}",
            callback_data=f"select_manager:{manager.id}"
        )])

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_manager_selection")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_manager_assignment_confirmation_keyboard(trainee_id: int, manager_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–µ—Ä—É
    """
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_manager:{trainee_id}:{manager_id}")],
        [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_manager_assignment")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_manager_actions_keyboard(trainee_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–∂–µ—Ä–∞
    """
    keyboard = [
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"assign_manager:{trainee_id}")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"view_manager:{trainee_id}")],
        [InlineKeyboardButton(text="üéØ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", callback_data=f"attestation:{trainee_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_trainee:{trainee_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô (Task 9)
# =================================

def get_knowledge_base_main_keyboard(has_folders: bool = False) -> InlineKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (–¢–ó 9-1 —à–∞–≥ 2)"""
    keyboard = [
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="kb_create_folder")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_knowledge_folders_keyboard(folders: list, show_create: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–¢–ó 9-2 —à–∞–≥ 2)"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if show_create:
        keyboard.append([InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data="kb_create_folder")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    # –ü–∞–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 4-5 –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏)
    for folder in folders:
        folder_name = folder.name[:25] + "..." if len(folder.name) > 25 else folder.name
        keyboard.append([InlineKeyboardButton(
            text=f"{{ {folder_name} }}", 
            callback_data=f"kb_folder:{folder.id}"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_folder_created_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-1 —à–∞–≥ 6)"""
    keyboard = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="kb_add_material")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_material_description_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 12)"""
    keyboard = [
        [InlineKeyboardButton(text="‚è©–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="kb_skip_description")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_material_save_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 14)"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="kb_save_material")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="kb_cancel_material")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_material_saved_keyboard(folder_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 16)"""
    keyboard = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="kb_add_material")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–ø–∫–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω folder_id
    if folder_id:
        keyboard.append([InlineKeyboardButton(text="üìÅ –ö –ø–∞–ø–∫–µ", callback_data=f"kb_folder:{folder_id}")])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_folder_view_keyboard(folder_id: int, materials: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏ (–¢–ó 9-2 —à–∞–≥ 4)"""
    keyboard = []

    # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–∞–ø–∫–µ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
    for material in materials:
        if material.is_active:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            material_name = material.name[:20] + "..." if len(material.name) > 20 else material.name
            keyboard.append([InlineKeyboardButton(
                text=material_name,
                callback_data=f"kb_material:{material.id}"
            )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–æ–π
    keyboard.extend([
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"kb_add_material_to_folder:{folder_id}")],
        [InlineKeyboardButton(text="–î–æ—Å—Ç—É–ø", callback_data=f"kb_access:{folder_id}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É", callback_data=f"kb_delete_folder:{folder_id}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"kb_rename_folder:{folder_id}")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_material_view_keyboard(material_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-2 —à–∞–≥ 6)"""
    keyboard = [
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"kb_delete_material:{material_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="kb_back")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_material_delete_confirmation_keyboard(material_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-2 —à–∞–≥ 7-2)"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"kb_confirm_delete_material:{material_id}")],
        [InlineKeyboardButton(text="üö´–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="kb_cancel_delete")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_group_access_selection_keyboard(groups: list, selected_group_ids: list = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ (–¢–ó 9-3 —à–∞–≥ 5)"""
    keyboard = []
    selected_group_ids = selected_group_ids or []
    
    # –ì—Ä—É–ø–ø—ã —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ –≤—ã–±–æ—Ä–µ
    for group in groups:
        # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        prefix = "‚úÖ " if group.id in selected_group_ids else ""
        group_name = group.name[:15] + "..." if len(group.name) > 15 else group.name
        keyboard.append([InlineKeyboardButton(
            text=f"{prefix}{{ {group_name} }}",
            callback_data=f"kb_toggle_group:{group.id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="kb_back")])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    if selected_group_ids:
        keyboard.insert(-1, [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="kb_save_access")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_folder_rename_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-4 —à–∞–≥ 7)"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="kb_confirm_rename")],
        [InlineKeyboardButton(text="üö´–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="kb_cancel_rename")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_folder_delete_confirmation_keyboard(folder_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-5 —à–∞–≥ 5)"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"kb_confirm_delete_folder:{folder_id}")],
        [InlineKeyboardButton(text="üö´–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="kb_cancel_delete")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_folder_deleted_keyboard(folder_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-5 —à–∞–≥ 7)"""
    keyboard = []
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω folder_id (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–ø–∫–µ
    if folder_id:
        keyboard.append([InlineKeyboardButton(text="üìÅ –ö –ø–∞–ø–∫–µ", callback_data=f"kb_folder:{folder_id}")])
    else:
        # –ï—Å–ª–∏ folder_id –Ω–µ—Ç (—É–¥–∞–ª–µ–Ω–∏–µ), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="kb_back")])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)
def get_employee_knowledge_folders_keyboard(folders: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    keyboard = []

    # –ü–∞–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
    for folder in folders:
        if folder.is_active:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–ø–∫–∏
            folder_name = folder.name[:25] + "..." if len(folder.name) > 25 else folder.name
            keyboard.append([InlineKeyboardButton(
                text=f"üìÅ {folder_name}",
                callback_data=f"kb_emp_folder:{folder.id}"
            )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_employee_profile")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_employee_folder_materials_keyboard(folder_id: int, materials: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    keyboard = []

    # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–∞–ø–∫–µ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
    for material in materials:
        if material.is_active:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            material_name = material.name[:25] + "..." if len(material.name) > 25 else material.name
            keyboard.append([InlineKeyboardButton(
                text=f"üìÑ {material_name}",
                callback_data=f"kb_emp_material:{material.id}"
            )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º", callback_data="kb_emp_back_to_folders")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_employee_material_view_keyboard(folder_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data=f"kb_emp_folder:{folder_id}")],
        [InlineKeyboardButton(text="üìö –ö –ø–∞–ø–∫–∞–º", callback_data="kb_emp_back_to_folders")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mentor_contact_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üë®‚Äçüè´ –°–≤—è–∑—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º", callback_data="contact_mentor")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_tests_main_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏ (—Ä–∞–∫–∏—Ä–æ–≤–∫–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_test")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", callback_data="list_tests")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_fallback_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è fallback —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –≤–≤–æ–¥–æ–º"""
    keyboard = [
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="fallback_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –†–ê–ë–û–¢–´ –°–û –°–¢–ê–ñ–ï–†–ê–ú–ò (–†–ï–ö–†–£–¢–ï–†)
# =================================

def get_trainees_list_keyboard(trainees: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_index = page * per_page
    end_index = start_index + per_page
    page_trainees = trainees[start_index:end_index]
    
    # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–∂–µ—Ä–æ–≤
    for trainee in page_trainees:
        button = InlineKeyboardButton(
            text=f"{trainee.full_name}",
            callback_data=f"view_trainee:{trainee.id}"
        )
        keyboard.append([button])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"trainees_page:{page-1}"))
    
    total_pages = (len(trainees) + per_page - 1) // per_page
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"trainees_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    if total_pages > 1:
        page_info = InlineKeyboardButton(
            text=f"üìÑ {page + 1}/{total_pages}",
            callback_data="page_info"
        )
        keyboard.append([page_info])
    
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trainee_detail_keyboard(trainee_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"view_trainee_progress:{trainee_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_recruiter_trainees")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trainee_progress_keyboard(trainee_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç–∞–∂–µ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_trainee_detail:{trainee_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trajectory_selection_keyboard(trajectories: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    keyboard = []
    
    for trajectory in trajectories:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üóëÔ∏è {trajectory.name}",
                callback_data=f"select_trajectory_to_delete:{trajectory.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trajectories_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trajectory_deletion_confirmation_keyboard(trajectory_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_trajectory_deletion:{trajectory_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_trajectory_selection")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mentors_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="mentor_assignment_management")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mentor_assignment_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_mentor")],
        [InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", callback_data="view_mentor_assignments")],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="reassign_mentor")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mentors_menu")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_trainees_with_mentors_keyboard(trainees: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    keyboard = []
    
    for trainee in trainees:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üë§ {trainee.full_name}",
                callback_data=f"select_trainee_for_reassign:{trainee.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="mentor_assignment_management")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mentors_pagination_keyboard(mentors: list, page: int = 0, per_page: int = 5) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_mentors = mentors[start_idx:end_idx]
    
    for mentor in page_mentors:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üë§ {mentor.full_name}",
                callback_data=f"view_mentor_detail:{mentor.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = (len(mentors) + per_page - 1) // per_page
    pagination_buttons = []
    
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"mentors_page:{page-1}"))
    
    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"mentors_page:{page+1}"))
    
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –ø–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mentors_menu")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)