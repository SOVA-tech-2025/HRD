from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import get_user_by_tg_id, get_user_roles, check_user_permission
from handlers.auth import check_auth
from keyboards.keyboards import format_help_message

router = Router()

@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        await message.answer(format_help_message("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π"))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    role = data.get("role")
    
    # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    if not role:
        user = await get_user_by_tg_id(session, message.from_user.id)
        if user:
            roles = await get_user_roles(session, user.id)
            if roles:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é —Ä–æ–ª—å (–ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏)
                role_priority = {
                    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": 5,
                    "–†–µ–∫—Ä—É—Ç–µ—Ä": 4, 
                    "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫": 3,
                    "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": 2,
                    "–°—Ç–∞–∂–µ—Ä": 1
                }
                # –ë–µ—Ä–µ–º —Ä–æ–ª—å —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                user_roles = [r.name for r in roles]
                role = max(user_roles, key=lambda r: role_priority.get(r, 0))
            else:
                role = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π"
        else:
            role = "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π"

    await message.answer(format_help_message(role))

@router.message(Command("profile"))
async def cmd_profile(message: Message, state: FSMContext, session: AsyncSession):
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    
    has_permission = await check_user_permission(session, user.id, "view_profile")
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    roles = await get_user_roles(session, user.id)
    roles_str = ", ".join([role.name for role in roles])
    
    profile_text = f"""
    üì± <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>
    
    üßë –§–ò–û: {user.full_name}
    üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}
    üÜî Telegram ID: {user.tg_id}
    üë§ Username: @{user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"}
    üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}
    üëë –†–æ–ª–∏: {roles_str}
    """
    
    await message.answer(profile_text, parse_mode="HTML")

@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def button_profile(message: Message, state: FSMContext, session: AsyncSession):
    await cmd_profile(message, state, session)

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def button_help(message: Message, state: FSMContext, session: AsyncSession):
    await cmd_help(message, state, session)
