"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (Task 9).
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–æ–∫ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Document, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional, List
import os
import aiofiles
import uuid
from pathlib import Path
import tempfile

from database.db import (
    get_user_by_tg_id, check_user_permission,
    create_knowledge_folder, get_all_knowledge_folders, get_knowledge_folder_by_id,
    update_knowledge_folder_name, delete_knowledge_folder,
    create_knowledge_material, get_knowledge_material_by_id, delete_knowledge_material,
    set_folder_access_groups, get_folder_access_info, get_all_groups,
    check_folder_access, get_accessible_knowledge_folders_for_user
)
from states.states import KnowledgeBaseStates
from handlers.auth import check_auth
from keyboards.keyboards import (
    get_knowledge_base_main_keyboard, get_knowledge_folders_keyboard,
    get_folder_created_keyboard, get_material_description_keyboard,
    get_material_save_keyboard, get_material_saved_keyboard,
    get_folder_view_keyboard, get_material_view_keyboard,
    get_material_delete_confirmation_keyboard, get_group_access_selection_keyboard,
    get_folder_rename_confirmation_keyboard, get_folder_delete_confirmation_keyboard,
    get_folder_deleted_keyboard, get_employee_knowledge_folders_keyboard,
    get_employee_folder_materials_keyboard, get_employee_material_view_keyboard
)
from utils.logger import log_user_action, log_user_error, logger
from utils.validators import validate_name

router = Router()


# ===============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================

async def download_and_save_file(bot, file_id: str, filename: str, max_file_size: int = 50 * 1024 * 1024) -> Optional[str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Telegram —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        max_file_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50MB)

    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        file_info = await bot.get_file(file_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_info.file_size > max_file_size:
            logger.error(f"–§–∞–π–ª {filename} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_info.file_size} –±–∞–π—Ç (–º–∞–∫—Å: {max_file_size})")
            return None

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        base_dir = Path(__file__).parent.parent  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        upload_dir = base_dir / "uploads" / "knowledge_base"
        upload_dir.mkdir(parents=True, exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        original_extension = Path(filename).suffix.lower()

        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        allowed_extensions = {
            '.pdf', '.doc', '.docx', 
            '.xls', '.xlsx', 
            '.ppt', '.pptx',
            '.jpg', '.jpeg', '.png', '.gif', '.webp',
            '.txt', '.rtf', '.odt'
        }

        if original_extension not in allowed_extensions:
            logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {original_extension}")
            return None

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        base_name = Path(filename).stem  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        unique_suffix = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
        unique_filename = f"{base_name}_{unique_suffix}{original_extension}"
        file_path = upload_dir / unique_filename

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_bytes = await bot.download_file(file_info.file_path)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if len(file_bytes.getvalue()) > max_file_size:
            logger.error(f"–§–∞–π–ª {filename} –ø—Ä–µ–≤—ã—Å–∏–ª –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        async with aiofiles.open(file_path, 'wb') as f:
            await f.write(file_bytes.getvalue())

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        return f"uploads/knowledge_base/{unique_filename}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π)
# ===============================

@router.message(F.text.in_(["–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π üìÅ"]))
async def cmd_knowledge_base_universal(message: Message, state: FSMContext, session: AsyncSession):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π' –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å—Ç–∞–∂–µ—Ä–∞ (–¢–ó 9-1 —à–∞–≥ 1)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_roles = [role.name for role in user.roles]
        
        # –†–ï–ö–†–£–¢–ï–† - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π (–¢–ó 9-1 —à–∞–≥ 1)
        if "–†–µ–∫—Ä—É—Ç–µ—Ä" in user_roles:
            has_permission = await check_user_permission(session, user.id, "manage_groups")
            if not has_permission:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
            folders = await get_all_knowledge_folders(session)
            
            if not folders:
                # –¢–ó 9-1 —à–∞–≥ 2: –ù–µ—Ç –ø–∞–ø–æ–∫
                await message.answer(
                    "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
                    "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏",
                    reply_markup=get_knowledge_base_main_keyboard(has_folders=False),
                    parse_mode="HTML"
                )
            else:
                # –¢–ó 9-2 —à–∞–≥ 2: –ï—Å—Ç—å –ø–∞–ø–∫–∏
                await message.answer(
                    "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
                    "–ù–∏–∂–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µüëá\n"
                    "üü°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                    reply_markup=get_knowledge_folders_keyboard(folders),
                    parse_mode="HTML"
                )

            await state.set_state(KnowledgeBaseStates.main_menu)
            log_user_action(message.from_user.id, "knowledge_base_opened", "–û—Ç–∫—Ä—ã—Ç–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (—Ä–µ–∫—Ä—É—Ç–µ—Ä)")
            
        # –ü–†–û–°–ú–û–¢–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô - –¥–ª—è –°—Ç–∞–∂–µ—Ä–æ–≤, –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –∏ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        elif "–°—Ç–∞–∂–µ—Ä" in user_roles or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" in user_roles or "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫" in user_roles or "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in user_roles:
            has_permission = await check_user_permission(session, user.id, "view_knowledge_base")
            if not has_permission:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            accessible_folders = await get_accessible_knowledge_folders_for_user(session, user.id)

            if not accessible_folders:
                await message.answer(
                    "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
                    reply_markup=get_employee_knowledge_folders_keyboard(accessible_folders),
                    parse_mode="HTML"
                )

            await state.set_state(KnowledgeBaseStates.employee_browsing)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            role_name = "—Å—Ç–∞–∂–µ—Ä"
            if "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" in user_roles:
                role_name = "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
            elif "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫" in user_roles:
                role_name = "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
            elif "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in user_roles:
                role_name = "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"

            log_user_action(message.from_user.id, f"{role_name}_knowledge_base_opened", f"–û—Ç–∫—Ä—ã—Ç–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ({role_name})")

        else:
            await message.answer("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        log_user_error(message.from_user.id, "knowledge_base_universal_error", str(e))


@router.callback_query(F.data == "kb_create_folder")
async def callback_create_folder(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-1 —à–∞–≥ 3)"""
    try:
        await callback.answer()
        
        # –¢–ó 9-1 —à–∞–≥ 4
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:",
            parse_mode="HTML"
        )
        
        await state.set_state(KnowledgeBaseStates.waiting_for_folder_name)
        log_user_action(callback.from_user.id, "folder_creation_started", "–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "create_folder_error", str(e))


@router.message(StateFilter(KnowledgeBaseStates.waiting_for_folder_name))
async def process_folder_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ (–¢–ó 9-1 —à–∞–≥ 5)"""
    try:
        folder_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(folder_name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await state.clear()
            return
            
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        folder = await create_knowledge_folder(session, folder_name, user.id)
        if not folder:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
            
        await session.commit()
        
        # –¢–ó 9-1 —à–∞–≥ 6: –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        await message.answer(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –ø–∞–ø–∫—É –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {folder_name}\n"
            "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–∞–ø–∫—É?",
            reply_markup=get_folder_created_keyboard(),
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_folder_id=folder.id)
        await state.set_state(KnowledgeBaseStates.folder_created_add_material)
        
        log_user_action(message.from_user.id, "folder_created", f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏")
        log_user_error(message.from_user.id, "process_folder_name_error", str(e))


@router.callback_query(F.data == "kb_add_material")
async def callback_add_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ø–∞–ø–∫—É (–¢–ó 9-1 —à–∞–≥ 7)"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        
        if not folder_id:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –¢–ó 9-1 —à–∞–≥ 8
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n\n"
            "üü°–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
            parse_mode="HTML"
        )
        
        await state.set_state(KnowledgeBaseStates.waiting_for_material_name)
        log_user_action(callback.from_user.id, "material_creation_started", f"–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ø–∞–ø–∫–µ {folder.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(callback.from_user.id, "add_material_error", str(e))


@router.message(StateFilter(KnowledgeBaseStates.waiting_for_material_name))
async def process_material_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 9)"""
    try:
        material_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(material_name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.")
            return
            
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        
        if not folder_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await message.answer("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(material_name=material_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        material_number = len(folder.materials) + 1
        
        # –¢–ó 9-1 —à–∞–≥ 10
        await message.answer(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {material_number}: {material_name}\n"
            "üü°–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º",
            parse_mode="HTML"
        )
        
        await state.set_state(KnowledgeBaseStates.waiting_for_material_content)
        log_user_action(message.from_user.id, "material_name_set", f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_name}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(message.from_user.id, "process_material_name_error", str(e))


@router.message(StateFilter(KnowledgeBaseStates.waiting_for_material_content))
async def process_material_content(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 11)"""
    try:
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        material_name = data.get("material_name")

        if not folder_id or not material_name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await message.answer("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        material_content = ""
        material_type = "link"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç
        if message.document:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä
            allowed_mimes = {
                'application/pdf',
                'application/msword',  # .doc
                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',  # .docx
                'application/vnd.ms-excel',  # .xls
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',  # .xlsx
                'application/vnd.ms-powerpoint',  # .ppt
                'application/vnd.openxmlformats-officedocument.presentationml.presentation',  # .pptx
                'image/jpeg', 'image/png', 'image/gif', 'image/webp',
                'text/plain',  # .txt
                'application/rtf',  # .rtf
                'application/vnd.oasis.opendocument.text'  # .odt
            }
            
            if message.document.mime_type in allowed_mimes:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (50MB –ª–∏–º–∏—Ç)
                max_size = 50 * 1024 * 1024  # 50MB
                if message.document.file_size > max_size:
                    await message.answer(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size // (1024*1024)}MB")
                    return

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
                saved_file_path = await download_and_save_file(message.bot, message.document.file_id, message.document.file_name)

                if saved_file_path:
                    material_content = saved_file_path
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                    ext = Path(message.document.file_name).suffix.lower()
                    if ext in {'.jpg', '.jpeg', '.png', '.gif', '.webp'}:
                        material_type = "image"
                    elif ext in {'.xls', '.xlsx'}:
                        material_type = "excel"
                    elif ext in {'.ppt', '.pptx'}:
                        material_type = "presentation"
                    elif ext in {'.doc', '.docx'}:
                        material_type = "document"
                    else:
                        material_type = "pdf"
                    await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ç–∏–ø.")
                    return
            else:
                await message.answer(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
                )
                return
        elif message.text:
            # –°—Å—ã–ª–∫–∞
            material_content = message.text.strip()
            material_type = "link"
        else:
            await message.answer(
                "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            material_content=material_content,
            material_type=material_type
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        material_number = len(folder.materials) + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        await state.update_data(material_number=material_number)
        
        # –¢–ó 9-1 —à–∞–≥ 12
        content_display = material_content if material_type == "link" else "–î–æ–∫—É–º–µ–Ω—Ç"
        await message.answer(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {material_number}: {material_name}\n"
            f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {content_display}\n"
            "üü°–û–ø–∏—Å–∞–Ω–∏–µ: –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —á—Ç–æ–±—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª–∏ –¥–ª—è —á–µ–≥–æ –∏–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç / —Å—Å—ã–ª–∫–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"‚è©–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\"",
            reply_markup=get_material_description_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(KnowledgeBaseStates.waiting_for_material_description)
        log_user_action(message.from_user.id, "material_content_set", f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_type}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(message.from_user.id, "process_material_content_error", str(e))


@router.callback_query(F.data == "kb_skip_description", KnowledgeBaseStates.waiting_for_material_description)
async def callback_skip_description(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer()
        await state.update_data(material_description="")
        await show_photo_upload_option(callback, state, session)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è")
        log_user_error(callback.from_user.id, "skip_description_error", str(e))


@router.callback_query(F.data == "kb_skip_photos", KnowledgeBaseStates.waiting_for_material_photos)
async def callback_skip_photos(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É"""
    try:
        await callback.answer()
        await state.update_data(material_photos=[])  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await show_material_confirmation(callback, state, session)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        log_user_error(callback.from_user.id, "skip_photos_error", str(e))


@router.message(StateFilter(KnowledgeBaseStates.waiting_for_material_photos))
async def process_material_photos(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        photos = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if message.photo:
            # –û–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
            photos = [message.photo[-1].file_id]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        elif message.media_group_id:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∞–ª—å–±–æ–º)
            # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞ –±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if message.photo:
                photos = [message.photo[-1].file_id]
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚è©–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        current_photos = data.get('material_photos', [])
        current_photos.extend(photos)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(material_photos=current_photos)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        photos_count = len(current_photos)
        response_text = f"üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}\n\n"
        response_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."

        keyboard_buttons = [
            [InlineKeyboardButton(text="‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="kb_finish_photos")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await message.answer(response_text, reply_markup=keyboard)
        log_user_action(message.from_user.id, "material_photos_added", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É, –≤—Å–µ–≥–æ: {photos_count}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        log_user_error(message.from_user.id, "process_material_photos_error", str(e))


@router.callback_query(F.data == "kb_finish_photos", KnowledgeBaseStates.waiting_for_material_photos)
async def callback_finish_photos(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    try:
        await callback.answer()
        await show_material_confirmation(callback, state, session)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        log_user_error(callback.from_user.id, "finish_photos_error", str(e))


@router.message(StateFilter(KnowledgeBaseStates.waiting_for_material_description))
async def process_material_description(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 13)"""
    try:
        description = message.text.strip() if message.text else ""
        await state.update_data(material_description=description)
        await show_photo_upload_option(message, state, session)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è")
        log_user_error(message.from_user.id, "process_material_description_error", str(e))


async def show_photo_upload_option(message_or_callback, state: FSMContext, session: AsyncSession):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥)"""
    try:
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        material_name = data.get("material_name")
        material_content = data.get("material_content")
        material_type = data.get("material_type")
        material_description = data.get("material_description", "")

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            if hasattr(message_or_callback, 'text') or hasattr(message_or_callback, 'photo'):
                await message_or_callback.answer("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                await message_or_callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
        content_display = material_content if material_type == "link" else "–î–æ–∫—É–º–µ–Ω—Ç"
        description_display = material_description if material_description else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

        message_text = (
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª: {material_name}\n"
            f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {content_display}\n"
            f"üü¢–û–ø–∏—Å–∞–Ω–∏–µ: {description_display}\n\n"
            "üñºÔ∏è–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É?\n"
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–º–æ–≥—É—Ç –ª—É—á—à–µ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥."
        )

        keyboard_buttons = [
            [InlineKeyboardButton(text="‚è©–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="kb_skip_photos")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        if hasattr(message_or_callback, 'text') or hasattr(message_or_callback, 'photo'):
            # Message
            await message_or_callback.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
        else:
            # CallbackQuery
            await message_or_callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode="HTML")

        await state.set_state(KnowledgeBaseStates.waiting_for_material_photos)
        log_user_action(message_or_callback.from_user.id if hasattr(message_or_callback, 'from_user') else message_or_callback.from_user.id,
                       "material_photo_upload_offered", f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É: {material_name}")

    except Exception as e:
        error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        if hasattr(message_or_callback, 'text') or hasattr(message_or_callback, 'photo'):
            await message_or_callback.answer(error_msg)
        else:
            await message_or_callback.message.edit_text(error_msg)
        log_user_error(message_or_callback.from_user.id if hasattr(message_or_callback, 'from_user') else message_or_callback.from_user.id,
                      "show_photo_upload_option_error", str(e))


async def show_material_confirmation(message_or_callback, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 14)"""
    try:
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        material_name = data.get("material_name")
        material_content = data.get("material_content")
        material_type = data.get("material_type")
        material_description = data.get("material_description", "")
        material_photos = data.get("material_photos", [])
        material_number = data.get("material_number", 1)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            if hasattr(message_or_callback, 'text') or hasattr(message_or_callback, 'photo'):
                await message_or_callback.answer("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                await message_or_callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        content_display = material_content if material_type == "link" else "–î–æ–∫—É–º–µ–Ω—Ç"
        description_display = material_description if material_description else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        photos_display = f"{len(material_photos)} —Ñ–æ—Ç–æ" if material_photos else "–ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"

        confirmation_text = (
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {material_number}: {material_name}\n"
            f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {content_display}\n"
            f"üü¢–û–ø–∏—Å–∞–Ω–∏–µ: {description_display}\n"
            f"üñºÔ∏è–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {photos_display}\n\n"
            "üü°–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –ø–∞–ø–∫–µ?"
        )
        
        if hasattr(message_or_callback, 'text') or hasattr(message_or_callback, 'photo'):
            # Message
            await message_or_callback.answer(
                confirmation_text,
                reply_markup=get_material_save_keyboard(),
                parse_mode="HTML"
            )
        else:
            # CallbackQuery
            await message_or_callback.message.edit_text(
                confirmation_text,
                reply_markup=get_material_save_keyboard(),
                parse_mode="HTML"
            )
        
        await state.set_state(KnowledgeBaseStates.confirming_material_save)
        
    except Exception as e:
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
        if hasattr(message_or_callback, 'text') or hasattr(message_or_callback, 'photo'):
            await message_or_callback.answer(error_text)
        else:
            await message_or_callback.message.edit_text(error_text)
        log_user_error(message_or_callback.from_user.id, "show_material_confirmation_error", str(e))


@router.callback_query(F.data == "kb_save_material", KnowledgeBaseStates.confirming_material_save)
async def callback_save_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-1 —à–∞–≥ 15)"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        material_name = data.get("material_name")
        material_content = data.get("material_content")
        material_type = data.get("material_type")
        material_description = data.get("material_description", "")
        material_photos = data.get("material_photos", [])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        material = await create_knowledge_material(
            session, folder_id, material_name, material_type,
            material_content, user.id, material_description, material_photos
        )
        
        if not material:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
            return
            
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        folder = await get_knowledge_folder_by_id(session, folder_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ —Å –Ω–æ–≤—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        updated_folder = await get_knowledge_folder_by_id(session, folder_id)
        
        # –¢–ó 9-1 —à–∞–≥ 16: –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–∞–ø–∫–µ
        materials_display = []
        for i, mat in enumerate(updated_folder.materials, 1):
            mat_content = mat.content if mat.material_type == "link" else "–î–æ–∫—É–º–µ–Ω—Ç"
            mat_description = mat.description if mat.description else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            photos_info = ""
            if mat.photos and len(mat.photos) > 0:
                photos_info = f"\nüñºÔ∏è–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(mat.photos)}"

            materials_display.append(
                f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {i}: {mat.name}\n"
                f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {mat_content}\n"
                f"üü¢ –û–ø–∏—Å–∞–Ω–∏–µ: {mat_description}{photos_info}"
            )
        
        materials_text = "\n\n".join(materials_display)
        
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n\n"
            f"{materials_text}\n\n"
            "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π",
            reply_markup=get_material_saved_keyboard(),
            parse_mode="HTML"
        )
        
        await state.set_state(KnowledgeBaseStates.folder_created_add_material)
        log_user_action(callback.from_user.id, "material_created", f"–°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material_name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(callback.from_user.id, "save_material_error", str(e))


@router.callback_query(F.data == "kb_cancel_material")
async def callback_cancel_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        await callback.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        folders = await get_all_knowledge_folders(session)
        
        if not folders:
            await callback.message.edit_text(
                "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
                "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏",
                reply_markup=get_knowledge_base_main_keyboard(has_folders=False),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
                "–ù–∏–∂–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µüëá\n"
                "üü°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                reply_markup=get_knowledge_folders_keyboard(folders),
                parse_mode="HTML"
            )
        
        await state.set_state(KnowledgeBaseStates.main_menu)
        log_user_action(callback.from_user.id, "material_creation_cancelled", "–û—Ç–º–µ–Ω–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        log_user_error(callback.from_user.id, "cancel_material_error", str(e))


@router.callback_query(F.data.startswith("kb_folder:"))
async def callback_view_folder(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏ (–¢–ó 9-2 —à–∞–≥ 3)"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
        access_info = await get_folder_access_info(session, folder_id)
        access_text = access_info.get("description", "–≤—Å–µ –≥—Ä—É–ø–ø—ã") if access_info.get("success") else "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
        
        # –¢–ó 9-2 —à–∞–≥ 4
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n"
            f"üîí–î–æ—Å—Ç—É–ø: {access_text}\n\n"
            "üü°–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=get_folder_view_keyboard(folder_id, folder.materials),
            parse_mode="HTML"
        )
        
        await state.update_data(current_folder_id=folder_id)
        await state.set_state(KnowledgeBaseStates.viewing_folder)
        
        log_user_action(callback.from_user.id, "folder_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–∫–∏: {folder.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "view_folder_error", str(e))


@router.callback_query(F.data.startswith("kb_material:"))
async def callback_view_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-2 —à–∞–≥ 5)"""
    try:
        await callback.answer()
        
        material_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        material = await get_knowledge_material_by_id(session, material_id)
        if not material:
            await callback.message.edit_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_display = material.content if material.material_type == "link" else "–§–∞–π–ª"
        description_display = material.description if material.description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        photos_display = ""
        if material.photos and len(material.photos) > 0:
            photos_display = f"\nüñºÔ∏è–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(material.photos)}"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ø–∞–ø–∫–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        material_number = material.order_number

        # –¢–ó 9-2 —à–∞–≥ 6
        message_text = (
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n"
            f"üìÅ–ü–∞–ø–∫–∞: {material.folder.name}\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {material_number}: {material.name}\n"
            f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {content_display}\n"
            f"üü¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description_display}{photos_display}"
        )

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫
        if material.photos and len(material.photos) > 0:
            try:
                # –°–æ–∑–¥–∞–µ–º media group —Å —Ñ–æ—Ç–æ
                media_group = []
                for i, photo_file_id in enumerate(material.photos, 1):
                    from aiogram.types import InputMediaPhoto
                    if i == 1:
                        # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        media_group.append(
                            InputMediaPhoto(
                                media=photo_file_id,
                                caption=message_text,
                                parse_mode="HTML"
                            )
                        )
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        media_group.append(
                            InputMediaPhoto(media=photo_file_id)
                        )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º media group
                await callback.bot.send_media_group(
                    chat_id=callback.message.chat.id,
                    media=media_group
                )

            except Exception as media_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ media group –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.name}: {media_error}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫
                await callback.message.edit_text(
                    message_text,
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫
            await callback.message.edit_text(
                message_text,
                parse_mode="HTML"
            )

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if material.material_type != "link" and material.material_type != "photo":
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                base_dir = Path(__file__).parent.parent  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
                file_path = base_dir / material.content

                if file_path.exists() and file_path.is_file():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 50MB –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
                    file_size = file_path.stat().st_size
                    max_send_size = 50 * 1024 * 1024  # 50MB

                    if file_size > max_send_size:
                        await callback.bot.send_message(
                            chat_id=callback.message.chat.id,
                            text=f"‚ö†Ô∏è –§–∞–π–ª {material.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({file_size // (1024*1024)}MB)."
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        await callback.bot.send_document(
                            chat_id=callback.message.chat.id,
                            document=FSInputFile(file_path)
                        )
                else:
                    await callback.bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=f"‚ö†Ô∏è –§–∞–π–ª {material.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                    )
            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {material.name}: {file_error}")
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {material.name}."
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º: {material.name}",
            reply_markup=get_material_view_keyboard(material_id),
            parse_mode="HTML"
        )

        await state.update_data(current_material_id=material_id)
        await state.set_state(KnowledgeBaseStates.viewing_material)

        log_user_action(callback.from_user.id, "material_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(callback.from_user.id, "view_material_error", str(e))


@router.callback_query(F.data.startswith("kb_delete_material:"))
async def callback_delete_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-2 —à–∞–≥ 7-1)"""
    try:
        await callback.answer()

        material_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        material = await get_knowledge_material_by_id(session, material_id)
        if not material:
            await callback.message.edit_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if material.material_type == "link":
            content_display = material.content  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º URL –¥–ª—è —Å—Å—ã–ª–æ–∫
        else:
            # –î–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = Path(material.content).name if material.content else "–§–∞–π–ª"
            content_display = f"üìé {filename}"

        description_display = material.description if material.description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
        photos_display = ""
        if material.photos and len(material.photos) > 0:
            photos_display = f"\nüñºÔ∏è–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(material.photos)}"

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ø–∞–ø–∫–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        material_number = material.order_number

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è media group –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n"
            f"üìÅ–ü–∞–ø–∫–∞: {material.folder.name}\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {material_number}: {material.name}\n"
            f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {content_display}\n"
            f"üü¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description_display}{photos_display}"
        )

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ media group (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if material.photos and len(material.photos) > 0:
            try:
                # –°–æ–∑–¥–∞–µ–º media group —Å —Ñ–æ—Ç–æ
                media_group = []
                for i, photo_file_id in enumerate(material.photos, 1):
                    from aiogram.types import InputMediaPhoto
                    if i == 1:
                        # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
                        media_group.append(
                            InputMediaPhoto(
                                media=photo_file_id,
                                caption=message_text,
                                parse_mode="HTML"
                            )
                        )
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        media_group.append(
                            InputMediaPhoto(media=photo_file_id)
                        )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º media group
                await callback.bot.send_media_group(
                    chat_id=callback.message.chat.id,
                    media=media_group
                )

            except Exception as media_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ media group –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.name}: {media_error}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    message_text,
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                message_text,
                parse_mode="HTML"
            )

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞)
        if material.material_type != "link" and material.material_type != "photo":
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                base_dir = Path(__file__).parent.parent  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
                file_path = base_dir / material.content

                if file_path.exists() and file_path.is_file():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 50MB –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
                    file_size = file_path.stat().st_size
                    max_send_size = 50 * 1024 * 1024  # 50MB

                    if file_size > max_send_size:
                        await callback.bot.send_message(
                            chat_id=callback.message.chat.id,
                            text=f"‚ö†Ô∏è –§–∞–π–ª {material.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({file_size // (1024*1024)}MB)."
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        await callback.bot.send_document(
                            chat_id=callback.message.chat.id,
                            document=FSInputFile(file_path)
                        )
                else:
                    await callback.bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=f"‚ö†Ô∏è –§–∞–π–ª {material.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                    )
            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {material.name}: {file_error}")
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {material.name}."
                )

        # –ù–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="üü°–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª?\n"
                 "‚ùóÔ∏è–î–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –±—É–¥–µ—Ç —É—Ç—Ä–∞—á–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞",
            reply_markup=get_material_delete_confirmation_keyboard(material_id),
            parse_mode="HTML"
        )

        await state.set_state(KnowledgeBaseStates.confirming_material_deletion)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(callback.from_user.id, "delete_material_error", str(e))


@router.callback_query(F.data.startswith("kb_confirm_delete_material:"))
async def callback_confirm_delete_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¢–ó 9-2 —à–∞–≥ 7-3)"""
    try:
        await callback.answer()
        
        material_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        material = await get_knowledge_material_by_id(session, material_id)
        if not material:
            await callback.message.edit_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        folder_name = material.folder.name
        material_name = material.name
        material_number = material.order_number
        content_display = material.content if material.material_type == "link" else "–§–∞–π–ª"
        description_display = material.description if material.description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        success = await delete_knowledge_material(session, material_id, user.id)
        if not success:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
            return
            
        await session.commit()
        
        # –¢–ó 9-2 —à–∞–≥ 7-4
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder_name}\n\n"
            "‚ùóÔ∏è–í–´ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ò–õ–ò –ú–ê–¢–ï–†–ò–ê–õüëá\n\n"
            f"üîó–ú–∞—Ç–µ—Ä–∏–∞–ª {material_number}: {material_name}\n"
            f"üü¢–í–ª–æ–∂–µ–Ω–∏–µ: {content_display}\n"
            f"üü¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description_display}",
            parse_mode="HTML"
        )
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–∞–ø–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_view_folder_by_id(callback, state, session, material.folder_id)
        
        log_user_action(callback.from_user.id, "material_deleted", f"–£–¥–∞–ª–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material_name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(callback.from_user.id, "confirm_delete_material_error", str(e))


@router.callback_query(F.data == "kb_back")
async def callback_back(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ (–¢–ó 9-2 —à–∞–≥ 9)"""
    try:
        await callback.answer()
        
        current_state = await state.get_state()
        data = await state.get_data()
        
        if current_state == KnowledgeBaseStates.viewing_material:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–∞–ø–∫–∏
            folder_id = data.get("current_folder_id")
            if folder_id:
                await callback_view_folder_by_id(callback, state, session, folder_id)
            else:
                await show_main_folders_list(callback, state, session)
        else:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫
            await show_main_folders_list(callback, state, session)
            
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
        log_user_error(callback.from_user.id, "back_error", str(e))


async def callback_view_folder_by_id(callback: CallbackQuery, state: FSMContext, session: AsyncSession, folder_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–∫–∏ –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
        access_info = await get_folder_access_info(session, folder_id)
        access_text = access_info.get("description", "–≤—Å–µ –≥—Ä—É–ø–ø—ã") if access_info.get("success") else "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
        
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n"
            f"üîí–î–æ—Å—Ç—É–ø: {access_text}\n\n"
            "üü°–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=get_folder_view_keyboard(folder_id, folder.materials),
            parse_mode="HTML"
        )
        
        await state.update_data(current_folder_id=folder_id)
        await state.set_state(KnowledgeBaseStates.viewing_folder)
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "view_folder_by_id_error", str(e))


async def show_main_folders_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ (–¢–ó 9-2 —à–∞–≥ 10)"""
    try:
        folders = await get_all_knowledge_folders(session)
        
        if not folders:
            await callback.message.edit_text(
                "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
                "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏",
                reply_markup=get_knowledge_base_main_keyboard(has_folders=False),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
                "–ù–∏–∂–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µüëá\n"
                "üü°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                reply_markup=get_knowledge_folders_keyboard(folders),
                parse_mode="HTML"
            )
        
        await state.set_state(KnowledgeBaseStates.main_menu)
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–ø–æ–∫")
        log_user_error(callback.from_user.id, "show_main_folders_error", str(e))


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ (–¢–ó 9-3)
# ===============================

@router.callback_query(F.data.startswith("kb_access:"))
async def callback_folder_access(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ (–¢–ó 9-3 —à–∞–≥ 4)"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = await get_all_groups(session)
        if not groups:
            await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã —Å –¥–æ—Å—Ç—É–ø–æ–º
        current_group_ids = [group.id for group in folder.accessible_groups] if folder.accessible_groups else []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–æ—Å—Ç—É–ø–µ
        access_info = await get_folder_access_info(session, folder_id)
        access_text = access_info.get("description", "–≤—Å–µ –≥—Ä—É–ø–ø—ã") if access_info.get("success") else "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
        
        # –¢–ó 9-3 —à–∞–≥ 5
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n"
            f"üîí–î–æ—Å—Ç—É–ø: {access_text}\n\n"
            "üü°–ö–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ?\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µüëá",
            reply_markup=get_group_access_selection_keyboard(groups, current_group_ids),
            parse_mode="HTML"
        )
        
        await state.update_data(
            current_folder_id=folder_id,
            selected_group_ids=current_group_ids.copy()
        )
        await state.set_state(KnowledgeBaseStates.selecting_access_groups)
        
        log_user_action(callback.from_user.id, "folder_access_setup", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: {folder.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞")
        log_user_error(callback.from_user.id, "folder_access_error", str(e))


@router.callback_query(F.data.startswith("kb_toggle_group:"))
async def callback_toggle_group_access(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã (–¢–ó 9-3 —à–∞–≥–∏ 6-9)"""
    try:
        await callback.answer()
        
        group_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        selected_group_ids = data.get("selected_group_ids", [])
        
        if not folder_id:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        if group_id in selected_group_ids:
            selected_group_ids.remove(group_id)
        else:
            selected_group_ids.append(group_id)
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        folder = await get_knowledge_folder_by_id(session, folder_id)
        groups = await get_all_groups(session)
        
        if not folder or not groups:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–∞
        if selected_group_ids:
            selected_groups = [g for g in groups if g.id in selected_group_ids]
            access_text = "; ".join([group.name for group in selected_groups]) + ";"
        else:
            access_text = "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n"
            f"üîí–î–æ—Å—Ç—É–ø: {access_text}\n\n"
        )
        
        if selected_group_ids:
            message_text += "üü°–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≥—Ä—É–ø–ø—É –∫ –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ?\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µüëá"
        else:
            message_text += "üü°–ö–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ?\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µüëá"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_group_access_selection_keyboard(groups, selected_group_ids),
            parse_mode="HTML"
        )
        
        await state.update_data(selected_group_ids=selected_group_ids)
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞")
        log_user_error(callback.from_user.id, "toggle_group_access_error", str(e))


@router.callback_query(F.data == "kb_save_access")
async def callback_save_access(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ (–¢–ó 9-3 —à–∞–≥ 10)"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        selected_group_ids = data.get("selected_group_ids", [])
        
        if not folder_id:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        success = await set_folder_access_groups(session, folder_id, selected_group_ids, user.id)
        if not success:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        await session.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–∞–ø–∫–∏
        await callback_view_folder_by_id(callback, state, session, folder_id)
        
        log_user_action(callback.from_user.id, "folder_access_saved", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–∞–ø–∫–∏ {folder_id}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞")
        log_user_error(callback.from_user.id, "save_access_error", str(e))


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-4)
# ===============================

@router.callback_query(F.data.startswith("kb_rename_folder:"))
async def callback_rename_folder(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-4 —à–∞–≥ 4)"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –¢–ó 9-4 —à–∞–≥ 5
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n"
            "üü°–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏:",
            parse_mode="HTML"
        )
        
        await state.update_data(current_folder_id=folder_id, old_folder_name=folder.name)
        await state.set_state(KnowledgeBaseStates.waiting_for_new_folder_name)
        
        log_user_action(callback.from_user.id, "folder_rename_started", f"–ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {folder.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "rename_folder_error", str(e))


@router.message(StateFilter(KnowledgeBaseStates.waiting_for_new_folder_name))
async def process_new_folder_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-4 —à–∞–≥ 6)"""
    try:
        new_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if not validate_name(new_name):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.")
            return
            
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        old_name = data.get("old_folder_name")
        
        if not folder_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –¢–ó 9-4 —à–∞–≥ 7
        await message.answer(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {old_name}\n"
            f"üü°–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏: {new_name}",
            reply_markup=get_folder_rename_confirmation_keyboard(),
            parse_mode="HTML"
        )
        
        await state.update_data(new_folder_name=new_name)
        await state.set_state(KnowledgeBaseStates.confirming_folder_rename)
        
        log_user_action(message.from_user.id, "new_folder_name_set", f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_name}")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏")
        log_user_error(message.from_user.id, "process_new_folder_name_error", str(e))


@router.callback_query(F.data == "kb_confirm_rename")
async def callback_confirm_rename(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-4 —à–∞–≥ 8)"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        new_name = data.get("new_folder_name")
        
        if not folder_id or not new_name:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        success = await update_knowledge_folder_name(session, folder_id, new_name, user.id)
        if not success:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
            
        await session.commit()
        
        # –¢–ó 9-4 —à–∞–≥ 9
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            "‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏\n"
            f"üü°–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞–ø–∫–∏: {new_name}",
            reply_markup=get_folder_deleted_keyboard(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            parse_mode="HTML"
        )
        
        # –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫
        await asyncio.sleep(2)
        await show_main_folders_list(callback, state, session)
        
        log_user_action(callback.from_user.id, "folder_renamed", f"–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤: {new_name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        log_user_error(callback.from_user.id, "confirm_rename_error", str(e))


@router.callback_query(F.data == "kb_cancel_rename")
async def callback_cancel_rename(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        
        if folder_id:
            await callback_view_folder_by_id(callback, state, session, folder_id)
        else:
            await show_main_folders_list(callback, state, session)
            
        log_user_action(callback.from_user.id, "folder_rename_cancelled", "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        log_user_error(callback.from_user.id, "cancel_rename_error", str(e))


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-5)
# ===============================

@router.callback_query(F.data.startswith("kb_delete_folder:"))
async def callback_delete_folder(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-5 —à–∞–≥ 4)"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
        access_info = await get_folder_access_info(session, folder_id)
        access_text = access_info.get("description", "–≤—Å–µ –≥—Ä—É–ø–ø—ã") if access_info.get("success") else "–≤—Å–µ –≥—Ä—É–ø–ø—ã"
        
        # –¢–ó 9-5 —à–∞–≥ 5
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder.name}\n"
            f"üîí–î–æ—Å—Ç—É–ø: {access_text}\n\n"
            "üü°–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É?\n"
            "‚ùóÔ∏è–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –±—É–¥–µ—Ç —É—Ç—Ä–∞—á–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞",
            reply_markup=get_folder_delete_confirmation_keyboard(folder_id),
            parse_mode="HTML"
        )
        
        await state.set_state(KnowledgeBaseStates.confirming_folder_deletion)
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "delete_folder_error", str(e))


@router.callback_query(F.data.startswith("kb_confirm_delete_folder:"))
async def callback_confirm_delete_folder(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ (–¢–ó 9-5 —à–∞–≥ 6)"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        folder_name = folder.name
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
        success = await delete_knowledge_folder(session, folder_id, user.id)
        if not success:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
            return
            
        await session.commit()
        
        # –¢–ó 9-5 —à–∞–≥ 7
        await callback.message.edit_text(
            "üìö–†–ï–î–ê–ö–¢–û–† –ë–ê–ó–´ –ó–ù–ê–ù–ò–ôüìö\n\n"
            "‚úÖ–í–´ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ò–õ–ò –ü–ê–ü–ö–£\n"
            f"üìÅ–ü–∞–ø–∫–∞: {folder_name}",
            reply_markup=get_folder_deleted_keyboard(),
            parse_mode="HTML"
        )
        
        # –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫
        await asyncio.sleep(2)
        await show_main_folders_list(callback, state, session)
        
        log_user_action(callback.from_user.id, "folder_deleted", f"–£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "confirm_delete_folder_error", str(e))


@router.callback_query(F.data == "kb_cancel_delete")
async def callback_cancel_delete(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        folder_id = data.get("current_folder_id")
        
        if folder_id:
            await callback_view_folder_by_id(callback, state, session, folder_id)
        else:
            await show_main_folders_list(callback, state, session)
            
        log_user_action(callback.from_user.id, "delete_cancelled", "–û—Ç–º–µ–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        log_user_error(callback.from_user.id, "cancel_delete_error", str(e))


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)
# ===============================

# –£–±—Ä–∞–Ω–æ: –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—à–µ


@router.callback_query(F.data == "knowledge_base")
async def callback_employee_knowledge_base(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É)"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        has_permission = await check_user_permission(session, user.id, "view_knowledge_base")
        if not has_permission:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        accessible_folders = await get_accessible_knowledge_folders_for_user(session, user.id)
        
        if not accessible_folders:
            await callback.message.edit_text(
                "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_employee_profile")]
                ]),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
                reply_markup=get_employee_knowledge_folders_keyboard(accessible_folders),
                parse_mode="HTML"
            )

        await state.set_state(KnowledgeBaseStates.employee_browsing)
        log_user_action(callback.from_user.id, "employee_knowledge_base_opened", "–û—Ç–∫—Ä—ã—Ç–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫)")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        log_user_error(callback.from_user.id, "employee_knowledge_base_error", str(e))


@router.callback_query(F.data.startswith("kb_emp_folder:"))
async def callback_employee_view_folder(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"""
    try:
        await callback.answer()
        
        folder_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ
        has_access = await check_folder_access(session, folder_id, user.id)
        if not has_access:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        folder = await get_knowledge_folder_by_id(session, folder_id)
        if not folder:
            await callback.message.edit_text("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if not folder.materials:
            await callback.message.edit_text(
                f"üìÅ <b>{folder.name}</b>\n\n"
                "–í –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º", callback_data="kb_emp_back_to_folders")]
                ]),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                f"üìÅ <b>{folder.name}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                reply_markup=get_employee_folder_materials_keyboard(folder_id, folder.materials),
                parse_mode="HTML"
            )

        await state.update_data(current_folder_id=folder_id)
        await state.set_state(KnowledgeBaseStates.employee_viewing_folder)
        
        log_user_action(callback.from_user.id, "employee_folder_viewed", f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–∞–ø–∫—É: {folder.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞–ø–∫–∏")
        log_user_error(callback.from_user.id, "employee_view_folder_error", str(e))


@router.callback_query(F.data.startswith("kb_emp_material:"))
async def callback_employee_view_material(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º"""
    try:
        await callback.answer()
        
        material_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
        material = await get_knowledge_material_by_id(session, material_id)
        if not material:
            await callback.message.edit_text("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        has_access = await check_folder_access(session, material.folder_id, user.id)
        if not has_access:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if material.material_type == "link":
            content_display = f"üîó <a href='{material.content}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
        else:
            # –î–ª—è —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            content_display = "üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ"

        description_display = material.description if material.description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        message_text = (
            f"üìÑ <b>{material.name}</b>\n\n"
            f"üìÅ –ü–∞–ø–∫–∞: {material.folder.name}\n\n"
            f"{content_display}\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description_display}"
        )

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫
        if material.photos and len(material.photos) > 0:
            try:
                # –°–æ–∑–¥–∞–µ–º media group —Å —Ñ–æ—Ç–æ
                media_group = []
                for i, photo_file_id in enumerate(material.photos, 1):
                    from aiogram.types import InputMediaPhoto
                    if i == 1:
                        # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                        media_group.append(
                            InputMediaPhoto(
                                media=photo_file_id,
                                caption=message_text,
                                parse_mode="HTML"
                            )
                        )
                    else:
                        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        media_group.append(
                            InputMediaPhoto(media=photo_file_id)
                        )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º media group
                await callback.bot.send_media_group(
                    chat_id=callback.message.chat.id,
                    media=media_group
                )

            except Exception as media_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ media group –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.name}: {media_error}")
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫
                await callback.message.edit_text(
                    message_text,
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫
            await callback.message.edit_text(
                message_text,
                parse_mode="HTML"
            )

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if material.material_type != "link" and material.material_type != "photo":
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                base_dir = Path(__file__).parent.parent  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
                file_path = base_dir / material.content

                if file_path.exists() and file_path.is_file():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª–µ–µ 50MB –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)
                    file_size = file_path.stat().st_size
                    max_send_size = 50 * 1024 * 1024  # 50MB

                    if file_size > max_send_size:
                        await callback.bot.send_message(
                            chat_id=callback.message.chat.id,
                            text=f"‚ö†Ô∏è –§–∞–π–ª {material.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({file_size // (1024*1024)}MB). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        await callback.bot.send_document(
                            chat_id=callback.message.chat.id,
                            document=FSInputFile(file_path)
                        )
                else:
                    await callback.bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=f"‚ö†Ô∏è –§–∞–π–ª {material.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {material.name}: {file_error}")
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {material.name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        # –ù–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º",
            reply_markup=get_employee_material_view_keyboard(material.folder_id),
            parse_mode="HTML"
        )

        await state.set_state(KnowledgeBaseStates.employee_viewing_material)

        log_user_action(callback.from_user.id, "employee_material_viewed", f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –º–∞—Ç–µ—Ä–∏–∞–ª: {material.name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        log_user_error(callback.from_user.id, "employee_view_material_error", str(e))


@router.callback_query(F.data == "kb_emp_back_to_folders")
async def callback_employee_back_to_folders(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        accessible_folders = await get_accessible_knowledge_folders_for_user(session, user.id)
        
        if not accessible_folders:
            await callback.message.edit_text(
                "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_employee_profile")]
                ]),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
                reply_markup=get_employee_knowledge_folders_keyboard(accessible_folders),
                parse_mode="HTML"
            )

        await state.set_state(KnowledgeBaseStates.employee_browsing)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–∞–ø–∫–∞–º")
        log_user_error(callback.from_user.id, "employee_back_to_folders_error", str(e))


# ===============================
# –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===============================



import asyncio
