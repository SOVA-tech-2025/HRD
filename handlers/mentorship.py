from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from datetime import datetime

from database.db import (
    get_unassigned_trainees, get_available_mentors, assign_mentor,
    get_mentor_trainees, get_trainee_mentor, check_user_permission,
    get_user_by_tg_id, get_user_by_id, get_user_test_results, get_user_test_result,
    get_test_by_id, get_all_active_tests, grant_test_access,
    get_trainee_available_tests, get_trainee_learning_path,
    get_trainee_stage_progress, get_stage_session_progress,
    get_learning_path_by_id, get_available_learning_paths_for_mentor,
    assign_learning_path_to_trainee, open_stage_for_trainee,
    get_learning_path_stages, get_available_managers_for_trainee,
    assign_manager_to_trainee, get_trainee_manager, get_manager_trainees,
    get_stage_sessions, get_session_tests, get_attestation_by_id, get_user_attestation_result, get_user_roles,
    get_managers_for_attestation, assign_attestation_to_trainee, get_trainee_attestation_by_id,
    check_all_stages_completed, get_trainee_attestation_status
)
from keyboards.keyboards import (
    get_unassigned_trainees_keyboard, get_mentor_selection_keyboard,
    get_assignment_confirmation_keyboard, get_trainee_selection_keyboard,
    get_trainee_actions_keyboard, get_test_access_keyboard,
    get_tests_for_access_keyboard, get_manager_selection_keyboard,
    get_manager_assignment_confirmation_keyboard, get_manager_actions_keyboard
)

def get_days_word(days: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ '–¥–µ–Ω—å' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞"""
    if days % 10 == 1 and days % 100 != 11:
        return "–¥–µ–Ω—å"
    elif days % 10 in [2, 3, 4] and days % 100 not in [12, 13, 14]:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.states import MentorshipStates, AttestationAssignmentStates, TraineeManagementStates
from utils.logger import log_user_action, log_user_error
from handlers.auth import check_auth

router = Router()

@router.message(Command("assign_mentor"))
async def cmd_assign_mentor_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /assign_mentor"""
    await cmd_assign_mentor(message, state, session)

@router.message(Command("my_trainees"))
async def cmd_my_trainees_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_trainees"""
    await cmd_mentor_trainees(message, state, session)

@router.message(Command("my_mentor"))
async def cmd_my_mentor_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_mentor"""
    await cmd_my_mentor(message, state, session)

@router.message(F.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
async def cmd_assign_mentor(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "assign_mentors")
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.")
        return
    
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await message.answer(
            "‚úÖ <b>–í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ –°—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤\n\n"
        f"üéØ <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</b> –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞–∂–µ—Ä—É –¥–ª—è:\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–º–æ—â–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º\n\n"
        f"üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:</b>",
        parse_mode="HTML",
        reply_markup=get_unassigned_trainees_keyboard(unassigned_trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_selection)
    
    log_user_action(message.from_user.id, message.from_user.username, "opened mentor assignment")

@router.message(F.text.in_(["–ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", "üéì –ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", "–ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ üéì"]))
async def cmd_my_mentor(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    mentor = await get_trainee_mentor(session, user.id)
    
    if not mentor:
        await message.answer(
            "üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üéì <b>–¢–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫</b>\n\n"
        f"<b>–ò–º—è:</b> {mentor.full_name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {mentor.phone_number}\n"
        f"<b>Telegram:</b> @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"<i>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –ø–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ, —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É, –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥</i>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed mentor info")

@router.message(F.text.in_(["–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã", "–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã üë•"]))
async def cmd_mentor_trainees(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await message.answer(
            "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤
    message_text = "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"

    for i, trainee in enumerate(trainees, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, trainee.id)
        trajectory_name = trainee_path.learning_path.name if trainee_path else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–∞–∂–µ—Ä–∞
        days_as_trainee = (datetime.now() - trainee.role_assigned_date).days
        days_word = get_days_word(days_as_trainee)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text += f"{i}. <b>{trainee.full_name}</b>\n\n"
        message_text += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
        message_text += f"<b>–í —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–∞–∂–µ—Ä–∞:</b> {days_as_trainee} {days_word}\n"
        message_text += f"<b>–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        message_text += f"<b>–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        message_text += f"üìå<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trajectory_name}\n\n"
        message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{trainee.full_name}",
                callback_data=f"select_trainee_for_trajectory:{trainee.id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await message.answer(
        message_text + "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–∂—ë—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed mentor trainees")

@router.callback_query(MentorshipStates.waiting_for_trainee_selection, F.data.startswith("unassigned_trainee:"))
async def process_trainee_selection_for_assignment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    trainee_id = int(callback.data.split(':')[1])
    
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.message.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    available_mentors = await get_available_mentors(session)
    
    if not available_mentors:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫' –∏–ª–∏ '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await state.update_data(selected_trainee_id=trainee_id)
    
    mentors_list = "\n".join([
        f"üë§ <b>{mentor.full_name}</b>\n"
        f"   üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {mentor.work_object.name if mentor.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"   üìû {mentor.phone_number}\n"
        f"   üìß @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        for mentor in available_mentors[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
    ])
    
    if len(available_mentors) > 5:
        mentors_list += f"\n... –∏ –µ—â–µ {len(available_mentors) - 5} –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"
    
    await callback.message.edit_text(
        f"üë§ <b>–í—ã–±—Ä–∞–Ω —Å—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
        f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y')}\n\n"
        f"üë®‚Äçüè´ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏:</b>\n\n{mentors_list}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_mentor_selection_keyboard(available_mentors)
    )
    
    await state.set_state(MentorshipStates.waiting_for_mentor_selection)
    await callback.answer()

@router.callback_query(MentorshipStates.waiting_for_mentor_selection, F.data.startswith("mentor:"))
async def process_mentor_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    mentor_id = int(callback.data.split(':')[1])
    
    data = await state.get_data()
    trainee_id = data.get('selected_trainee_id')
    
    trainee = await get_user_by_id(session, trainee_id)
    mentor = await get_user_by_id(session, mentor_id)
    
    if not trainee or not mentor:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞–∂–µ—Ä–∞—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    current_trainees = await get_mentor_trainees(session, mentor_id)
    trainees_count = len(current_trainees)
    
    confirmation_text = f"""ü§ù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>

üë§ <b>–°—Ç–∞–∂–µ—Ä:</b>
   ‚Ä¢ –§–ò–û: {trainee.full_name}
   üìç1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏: {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}
   üìç2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã: {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {trainee.phone_number}
   ‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {trainee.registration_date.strftime('%d.%m.%Y')}

üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b>
   ‚Ä¢ –§–ò–û: {mentor.full_name}
   üìç2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã: {mentor.work_object.name if mentor.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {mentor.phone_number}
   ‚Ä¢ –¢–µ–∫—É—â–∏—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤: {trainees_count}

‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:"""
    
    await callback.message.edit_text(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=get_assignment_confirmation_keyboard(mentor_id, trainee_id)
    )
    
    await state.set_state(MentorshipStates.waiting_for_assignment_confirmation)
    await callback.answer()

@router.callback_query(MentorshipStates.waiting_for_assignment_confirmation, F.data.startswith("confirm_assignment:"))
async def process_assignment_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    parts = callback.data.split(':')
    mentor_id = int(parts[1])
    trainee_id = int(parts[2])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    
    mentorship = await assign_mentor(session, mentor_id, trainee_id, user.id, bot)
    
    if mentorship:
        trainee = await get_user_by_id(session, trainee_id)
        mentor = await get_user_by_id(session, mentor_id)
        
        success_text = f"""‚úÖ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>

üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}
üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {mentor.full_name}

üìÖ <b>–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {mentorship.assigned_date.strftime('%d.%m.%Y %H:%M')}
üë§ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> {user.full_name}

üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:</b>
‚Ä¢ ‚úÖ –°—Ç–∞–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
‚Ä¢ üìû –¢–µ–ª–µ—Ñ–æ–Ω: {mentor.phone_number}
‚Ä¢ üìß Telegram: @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üéØ –°—Ç–∞–∂–µ—Ä –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!"""
        
        await callback.message.edit_text(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_another_mentor")],
                [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "assigned mentor", 
            {"mentor_id": mentor_id, "trainee_id": trainee_id}
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –°—Ç–∞–∂–µ—Ä —É–∂–µ –∏–º–µ–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="assign_another_mentor")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        log_user_error(
            callback.from_user.id, 
            callback.from_user.username, 
            "failed to assign mentor", 
            {"mentor_id": mentor_id, "trainee_id": trainee_id}
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_assignment")
async def process_cancel_assignment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    await callback.message.edit_text(
        "‚ùå <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_another_mentor")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "assign_another_mentor")
async def process_assign_another_mentor(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await callback.message.edit_text(
            "‚úÖ <b>–í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.\n"
            "–ù–æ–≤—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:",
        parse_mode="HTML",
        reply_markup=get_unassigned_trainees_keyboard(unassigned_trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_selection)
    await callback.answer()

@router.callback_query(F.data == "view_all_mentors")
async def process_view_all_mentors(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    mentors = await get_available_mentors(session)
    
    if not mentors:
        await callback.message.edit_text(
            "üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏.\n"
            "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫' –∏–ª–∏ '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    mentors_info = []
    for mentor in mentors:
        trainees = await get_mentor_trainees(session, mentor.id)
        mentors_info.append(
            f"üë§ <b>{mentor.full_name}</b>\n"
            f"   üìû {mentor.phone_number}\n"
            f"   üìß @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üë• –°—Ç–∞–∂–µ—Ä–æ–≤: {len(trainees)}"
        )
    
    mentors_list = "\n\n".join(mentors_info)
    
    await callback.message.edit_text(
        f"üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{len(mentors)}</b>\n\n"
        f"{mentors_list}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_another_mentor")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    await callback.answer()


@router.message(F.text.in_(["–°–ø–∏—Å–æ–∫ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ ü¶â"]))
async def cmd_list_mentors(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "view_mentorship")
    if not has_permission:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ.")
        return
    
    mentors = await get_available_mentors(session)
    
    if not mentors:
        await message.answer(
            "üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏.\n"
            "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫' –∏–ª–∏ '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'.",
            parse_mode="HTML"
        )
        return
    
    mentors_info = []
    total_trainees = 0
    
    for mentor in mentors:
        trainees = await get_mentor_trainees(session, mentor.id)
        trainees_count = len(trainees)
        total_trainees += trainees_count
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if trainees:
            trainees_names = ", ".join([t.full_name for t in trainees[:3]])
            if trainees_count > 3:
                trainees_names += f" –∏ –µ—â–µ {trainees_count - 3}"
            trainees_info = f"–°—Ç–∞–∂–µ—Ä—ã: {trainees_names}"
        else:
            trainees_info = "–°—Ç–∞–∂–µ—Ä–æ–≤ –Ω–µ—Ç"
        
        mentors_info.append(
            f"üë§ <b>{mentor.full_name}</b>\n"
            f"   üìû {mentor.phone_number}\n"
            f"   üìß @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üë• {trainees_info}"
        )
    
    mentors_list = "\n\n".join(mentors_info)
    
    await message.answer(
        f"üë®‚Äçüè´ <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤: {len(mentors)}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤ –ø–æ–¥ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ–º: {total_trainees}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {total_trainees/len(mentors):.1f}\n\n"
        f"{mentors_list}",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed mentors list")

@router.message(F.text == "–°—Ç–∞–∂–µ—Ä—ã –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")
async def cmd_list_unassigned_trainees(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "view_trainee_list")
    if not has_permission:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–æ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è "–Ω–æ–≤—ã–º–∏")
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await message.answer(
            "üìã <b>–°—Ç–∞–∂–µ—Ä—ã –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
            "‚úÖ –í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!\n"
            "–ù–æ–≤—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.",
            parse_mode="HTML"
        )
        return
    
    users_info = []
    for i, trainee in enumerate(unassigned_trainees, 1):
        users_info.append(
            f"{i}. <b>{trainee.full_name}</b>\n"
            f"   üìû {trainee.phone_number}\n"
            f"   üìß @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}"
        )
    
    users_list = "\n\n".join(users_info)
    
    await message.answer(
        f"üìã <b>–°—Ç–∞–∂–µ—Ä—ã –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"–°—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n\n"
        f"{users_list}\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞' –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —ç—Ç–∏–º —Å—Ç–∞–∂–µ—Ä–∞–º.",
        parse_mode="HTML"
    )
    
    log_user_action(message.from_user.id, message.from_user.username, "viewed new users list")

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

@router.callback_query(F.data.startswith("select_trainee_for_trajectory:"))
async def callback_select_trainee_for_trajectory(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ '–ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã' - –ü–û –¢–ó 6-–π –∑–∞–¥–∞—á–∏ —à–∞–≥ 5"""
    trainee_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä–∞
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
    trainee_path = await get_trainee_learning_path(session, trainee.id)
    trajectory_info = ""

    if trainee_path:
        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞–∂–µ—Ä–∞
        test_results = await get_user_test_results(session, trainee.id)
        trajectory_info = generate_trajectory_progress_for_mentor(trainee_path, stages_progress, test_results)
    else:
        trajectory_info = "üó∫Ô∏è<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    profile_text = (
        f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
        f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path and trainee_path.learning_path else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n\n\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
        f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
        f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
        "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
        "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
        f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
        f"{trajectory_info}"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    if trainee_path:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é", callback_data=f"select_trajectory_for_trainee:{trainee_id}")
        ])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üü° –≠—Ç–∞–ø—ã", callback_data=f"manage_stages:{trainee_id}")
        ])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üîç –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", callback_data=f"view_trainee_attestation:{trainee_id}")
        ])
    else:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é", callback_data=f"select_trajectory_for_trainee:{trainee_id}")
        ])

    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_trainees")
    ])

    await callback.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_trajectory_for_trainee:"))
async def callback_select_trajectory_for_trainee(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ - –ü–û –¢–ó 6-–π –∑–∞–¥–∞—á–∏ —à–∞–≥ 9"""
    trainee_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞)
    mentor = await get_user_by_tg_id(session, callback.from_user.id)
    if not mentor:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    available_paths = await get_available_learning_paths_for_mentor(session, mentor.id)

    if not available_paths:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_trainee_for_trajectory:{trainee_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n\n"
            "–î–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –æ–±—É—á–µ–Ω–∏—è.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ
    trainee_info = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—èüëá"
        )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for learning_path in available_paths:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{learning_path.name}",
                callback_data=f"assign_trajectory:{trainee_id}:{learning_path.id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_trainee_for_trajectory:{trainee_id}")
    ])

    await callback.message.edit_text(
        trainee_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()




@router.callback_query(F.data.startswith("assign_trajectory:"))
async def callback_assign_trajectory(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä—É - –ü–û –¢–ó 6-–π –∑–∞–¥–∞—á–∏ —à–∞–≥ 11"""
    bot = callback.message.bot  # –ü–æ–ª—É—á–∞–µ–º bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    parts = callback.data.split(":")
    trainee_id = int(parts[1])
    learning_path_id = int(parts[2])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    trainee = await get_user_by_id(session, trainee_id)
    mentor = await get_user_by_tg_id(session, callback.from_user.id)

    if not trainee or not mentor:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await callback.answer()
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
    success = await assign_learning_path_to_trainee(session, trainee_id, learning_path_id, mentor.id, bot)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏ —ç—Ç–∞–ø–∞—Ö
        learning_path = await get_learning_path_by_id(session, learning_path_id)
        stages = await get_learning_path_stages(session, learning_path_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        trainee_info = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {learning_path.name}\n\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
            "üó∫Ô∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π</b>\n\n"
            f"‚è∫Ô∏è<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {learning_path.name}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–∞—Ö
        for stage in sorted(stages, key=lambda s: s.order_number):
            trainee_info += f" ‚è∫Ô∏è<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
            sessions = await get_stage_sessions(session, stage.id)
            for session_obj in sorted(sessions, key=lambda s: s.order_number):
                trainee_info += f" ‚è∫Ô∏è<b>–°–µ—Å—Å–∏—è {session_obj.order_number}:</b> {session_obj.name}\n"

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
                tests = await get_session_tests(session, session_obj.id)
                for test in tests:
                    trainee_info += f" ‚è∫Ô∏è<b>–¢–µ—Å—Ç {test.id}:</b> {test.name}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if learning_path.attestation:
            trainee_info += f"üîç ‚è∫Ô∏è<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {learning_path.attestation.name}\n\n"
        else:
            trainee_info += "\n"

        trainee_info += "üü° <b>–ö–∞–∫–æ–π —ç—Ç–∞–ø –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞–∂–µ—Ä—É?</b>"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç—Ç–∞–ø–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for stage in sorted(stages, key=lambda s: s.order_number):
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"–≠—Ç–∞–ø {stage.order_number}",
                    callback_data=f"open_stage:{trainee_id}:{stage.id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üë• –ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã", callback_data="my_trainees"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

        await callback.message.edit_text(
            trainee_info,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä—É.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

    await callback.answer()


def generate_trajectory_progress_for_mentor(trainee_path, stages_progress, test_results=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    if not trainee_path:
        return "üó∫Ô∏è<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

    progress = f"‚è∫Ô∏è<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {trainee_path.learning_path.name if trainee_path.learning_path else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    test_results_dict = {}
    if test_results:
        for result in test_results:
            test_results_dict[result.test_id] = result

    for stage_progress in stages_progress:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
        sessions_progress = stage_progress.session_progress
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏—è—Ö –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
        all_sessions_completed = False
        if sessions_progress and stage_progress.is_opened:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = all(
                all(test.id in test_results_dict and test_results_dict[test.id].is_passed 
                    for test in sp.session.tests) 
                for sp in sessions_progress if hasattr(sp.session, 'tests') and sp.session.tests
            )
        
        if all_sessions_completed and sessions_progress:
            stage_status_icon = "üü¢"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        elif stage_progress.is_opened:
            stage_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
        else:
            stage_status_icon = "‚è∫Ô∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
            
        progress += f"{stage_status_icon}<b>–≠—Ç–∞–ø {stage_progress.stage.order_number}:</b> {stage_progress.stage.name}\n"

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
        for session_progress in sessions_progress:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
            if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
                all_tests_passed = False
                if stage_progress.is_opened:
                    all_tests_passed = all(
                        test.id in test_results_dict and test_results_dict[test.id].is_passed 
                        for test in session_progress.session.tests
                    )
                
                if all_tests_passed and stage_progress.is_opened:
                    session_status_icon = "üü¢"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                elif stage_progress.is_opened:
                    session_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                else:
                    session_status_icon = "‚è∫Ô∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
            else:
                session_status_icon = "‚è∫Ô∏è"  # –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤
                
            progress += f"{session_status_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
            for test in session_progress.session.tests:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                if test.id in test_results_dict:
                    result = test_results_dict[test.id]
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    if result.is_passed and stage_progress.is_opened:
                        test_status = "üü¢"
                        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                        percentage = (result.score / result.max_possible_score) * 100
                        percentage_text = f" - {percentage:.0f}%"
                    else:
                        # –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –∏–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                        test_status = "üü°" if stage_progress.is_opened else "‚è∫Ô∏è"
                        percentage_text = ""
                else:
                    # –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª—Å—è, —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏ —ç—Ç–∞–ø–∞
                    test_status = "üü°" if stage_progress.is_opened else "‚è∫Ô∏è"
                    percentage_text = ""

                progress += f"{test_status}<b>–¢–µ—Å—Ç {len([t for t in session_progress.session.tests if t.id <= test.id])}:</b> {test.name}{percentage_text}\n"

    # –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å –±–∞–∑–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) 
    if trainee_path.learning_path.attestation:
        attestation_status = "‚è∫Ô∏è"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ (–Ω—É–∂–Ω–∞ async –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
        progress += f"üîç{attestation_status}<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {trainee_path.learning_path.attestation.name}\n"
    else:
        progress += "üîç‚è∫Ô∏è<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"

    return progress


async def generate_trajectory_progress_with_attestation_status(session, trainee_path, stages_progress, test_results=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è Task 7"""
    if not trainee_path:
        return "üó∫Ô∏è<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

    progress = f"‚è∫Ô∏è<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b> {trainee_path.learning_path.name if trainee_path.learning_path else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    test_results_dict = {}
    if test_results:
        for result in test_results:
            test_results_dict[result.test_id] = result

    for stage_progress in stages_progress:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: üü¢ –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, üü° –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç, ‚è∫Ô∏è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç
        sessions_progress = stage_progress.session_progress
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –≤ —Å–µ—Å—Å–∏—è—Ö –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
        all_sessions_completed = False
        if sessions_progress and stage_progress.is_opened:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
            all_sessions_completed = all(
                all(test.id in test_results_dict and test_results_dict[test.id].is_passed 
                    for test in sp.session.tests) 
                for sp in sessions_progress if hasattr(sp.session, 'tests') and sp.session.tests
            )
        
        if all_sessions_completed and sessions_progress:
            stage_status_icon = "üü¢"  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        elif stage_progress.is_opened:
            stage_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
        else:
            stage_status_icon = "‚è∫Ô∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
            
        progress += f"{stage_status_icon}<b>–≠—Ç–∞–ø {stage_progress.stage.order_number}:</b> {stage_progress.stage.name}\n"

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
        for session_progress in sessions_progress:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
            if hasattr(session_progress.session, 'tests') and session_progress.session.tests:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç
                all_tests_passed = False
                if stage_progress.is_opened:
                    all_tests_passed = all(
                        test.id in test_results_dict and test_results_dict[test.id].is_passed 
                        for test in session_progress.session.tests
                    )
                
                if all_tests_passed and stage_progress.is_opened:
                    session_status_icon = "üü¢"  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç)
                elif stage_progress.is_opened:
                    session_status_icon = "üü°"  # –≠—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                else:
                    session_status_icon = "‚è∫Ô∏è"  # –≠—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
            else:
                session_status_icon = "üü°" if stage_progress.is_opened else "‚è∫Ô∏è"
                
            progress += f"{session_status_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
            for test in session_progress.session.tests:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                if test.id in test_results_dict:
                    result = test_results_dict[test.id]
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã—Ç –ò —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
                    if result.is_passed and stage_progress.is_opened:
                        test_status = "üü¢"
                        percentage = (result.score / result.max_possible_score) * 100
                        percentage_text = f" - {percentage:.0f}%"
                    else:
                        # –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –∏–ª–∏ —ç—Ç–∞–ø –∑–∞–∫—Ä—ã—Ç
                        test_status = "üü°" if stage_progress.is_opened else "‚è∫Ô∏è"
                        percentage_text = ""
                else:
                    test_status = "üü°" if stage_progress.is_opened else "‚è∫Ô∏è"
                    percentage_text = ""

                progress += f"{test_status}<b>–¢–µ—Å—Ç {len([t for t in session_progress.session.tests if t.id <= test.id])}:</b> {test.name}{percentage_text}\n"

    # –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó Task 7
    if trainee_path.learning_path.attestation:
        attestation_status = await get_trainee_attestation_status(
            session, trainee_path.trainee_id, trainee_path.learning_path.attestation.id
        )
        progress += f"üîç{attestation_status}<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {trainee_path.learning_path.attestation.name}\n"
    else:
        progress += "üîç‚è∫Ô∏è<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"

    return progress


@router.callback_query(F.data == "my_trainees")
async def process_my_trainees_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ü–û –¢–ó 6-–π –∑–∞–¥–∞—á–∏"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤
    message_text = "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"

    for i, trainee in enumerate(trainees, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, trainee.id)
        trajectory_name = trainee_path.learning_path.name if trainee_path else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–∞–∂–µ—Ä–∞
        days_as_trainee = (datetime.now() - trainee.role_assigned_date).days
        days_word = get_days_word(days_as_trainee)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text += f"{i}. <b>{trainee.full_name}</b>\n\n"
        message_text += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
        message_text += f"<b>–í —Å—Ç–∞—Ç—É—Å–µ —Å—Ç–∞–∂–µ—Ä–∞:</b> {days_as_trainee} {days_word}\n"
        message_text += f"<b>–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        message_text += f"<b>–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        message_text += f"üìå<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trajectory_name}\n\n"
        message_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{trainee.full_name}",
                callback_data=f"select_trainee_for_trajectory:{trainee.id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await callback.message.edit_text(
        message_text + "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–∂—ë—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("open_first_stage:"))
async def callback_open_first_stage(callback: CallbackQuery, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞"""
    trainee_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
    trainee_path = await get_trainee_learning_path(session, trainee_id)
    if not trainee_path:
        await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
    stages = await get_learning_path_stages(session, trainee_path.learning_path_id)
    if not stages:
        await callback.message.edit_text("–≠—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await callback.answer()
        return

    first_stage = min(stages, key=lambda s: s.order_number)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
    success = await open_stage_for_trainee(session, trainee_id, first_stage.id, bot)

    if success:
        success_message = (
            "‚úÖ <b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {(await get_user_by_id(session, trainee_id)).full_name}\n"
            f"üü° <b>–û—Ç–∫—Ä—ã—Ç—ã–π —ç—Ç–∞–ø:</b> {first_stage.name}\n\n"
            "üó∫Ô∏è <b>–°—Ç–∞–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç—Ç–∞–ø–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —Å—Ç–∞–∂–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è'"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã", callback_data="my_trainees"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])

        await callback.message.edit_text(
            success_message,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–∞–ø–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞.",
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "grant_test_access")
async def process_grant_test_access_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    has_permission = await check_user_permission(session, user.id, "grant_test_access")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = await get_all_active_tests(session)
    
    if not tests:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    tests_info = "\n".join([
        f"üìã <b>{test.name}</b>"
        for test in tests[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–µ—Å—Ç–æ–≤
    ])
    
    if len(tests) > 5:
        tests_info += f"\n... –∏ –µ—â–µ {len(tests) - 5} —Ç–µ—Å—Ç–æ–≤"
    
    await callback.message.edit_text(
        f"üìä <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º</b>\n\n"
        f"üë• <b>–í–∞—à–∏—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤:</b> {len(trainees)}\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:</b> {len(tests)}\n\n"
        f"<b>–¢–µ—Å—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n{tests_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–∞–º:",
        parse_mode="HTML",
        reply_markup=get_tests_for_access_keyboard(tests)
    )
    await callback.answer()

@router.callback_query(F.data == "my_mentor_info")
async def process_my_mentor_info(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    mentor = await get_trainee_mentor(session, user.id)
    
    if not mentor:
        await callback.message.edit_text(
            "üë®‚Äçüè´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    mentor_info = f"""üë®‚Äçüè´ <b>–í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫</b>

üßë <b>–§–ò–û:</b> {mentor.full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {mentor.phone_number}
üìß <b>Telegram:</b> @{mentor.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –û–±—Å—É–∂–¥–∞–π—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏  
‚Ä¢ –ü—Ä–æ—Å–∏—Ç–µ –ø–æ–º–æ—â—å —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""

    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å username)
    if mentor.username:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É", 
                url=f"https://t.me/{mentor.username}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üó∫Ô∏è –¢–µ—Å—Ç—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏", callback_data="trajectory_tests_shortcut")
    ])
    
    await callback.message.edit_text(
        mentor_info,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("trainee_results:"))
async def process_trainee_results(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞"""
    trainee_id = int(callback.data.split(':')[1])
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    results = await get_user_test_results(session, trainee_id)
    
    if not results:
        await callback.message.edit_text(
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–∂–µ—Ä–∞: {trainee.full_name}</b>\n\n"
            "–≠—Ç–æ—Ç —Å—Ç–∞–∂–µ—Ä –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
        await callback.answer()
        return

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed_count = sum(1 for r in results if r.is_passed)
    avg_score = sum(r.score for r in results) / len(results)
    
    results_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–∂–µ—Ä–∞: {trainee.full_name}</b>\n\n"
    results_text += f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    results_text += f"  ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_count}/{len(results)}\n"
    results_text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}\n\n"
    
    results_text += "<b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
    for res in results:
        test = await get_test_by_id(session, res.test_id)
        status = "‚úÖ" if res.is_passed else "‚ùå"
        percentage = (res.score / res.max_possible_score) * 100
        results_text += f"{status} <b>{test.name if test else '–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω'}:</b> {res.score}/{res.max_possible_score} –±–∞–ª–ª–æ–≤ ({percentage:.0f}%)\n"

    await callback.message.edit_text(
        results_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("trainee:"))
async def process_trainee_action_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
    trainee_id = int(callback.data.split(':')[1])
    
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ
    mentor = await get_trainee_mentor(session, trainee_id)
    results = await get_user_test_results(session, trainee_id)
    passed_count = sum(1 for r in results if r.is_passed)
    avg_score = sum(r.score for r in results) / len(results) if results else 0
    
    trainee_info = f"""üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–∂–µ—Ä–∞</b>

üßë <b>–§–ò–û:</b> {trainee.full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}
üìß <b>Telegram:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}

üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> {mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:</b>
‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_count}/{len(results)}
üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(
        trainee_info,
        parse_mode="HTML",
        reply_markup=get_trainee_actions_keyboard(trainee_id)
    )
    
    await state.clear()
    await callback.answer()

# =================================
# –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –¢–ï–°–¢–û–í
# =================================

@router.callback_query(F.data.startswith("add_test_access:"))
async def process_add_test_access(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É —Å—Ç–∞–∂–µ—Ä—É"""
    trainee_id = int(callback.data.split(':')[1])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    has_permission = await check_user_permission(session, user.id, "grant_test_access")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    tests = await get_all_active_tests(session)
    
    if not tests:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
        await callback.answer()
        return
    
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.message.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å—Ç–∞–∂–µ—Ä—É</b>\n\n"
        f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
        f"üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {len(tests)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
        parse_mode="HTML",
        reply_markup=get_test_access_keyboard(tests, trainee_id)
    )
    
    await state.set_state(TraineeManagementStates.waiting_for_test_access_grant)
    await callback.answer()

@router.callback_query(TraineeManagementStates.waiting_for_test_access_grant, F.data.startswith("grant_access:"))
async def process_grant_access_to_trainee(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ—Å—Ç—É"""
    parts = callback.data.split(':')
    trainee_id = int(parts[1])
    test_id = int(parts[2])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    test = await get_test_by_id(session, test_id)
    trainee = await get_user_by_id(session, trainee_id)
    
    if not all([user, test, trainee]):
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success = await grant_test_access(session, trainee_id, test_id, user.id, bot)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n"
            f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {test.threshold_score}/{test.max_score}\n\n"
            f"üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n"
            f"–°—Ç–∞–∂–µ—Ä {trainee.full_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–µ—Å—Ç", callback_data=f"add_test_access:{trainee_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "granted test access via trainee menu", 
            {"test_id": test_id, "trainee_id": trainee_id}
        )
    else:
        await callback.message.edit_text(
            f"‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
            f"–≠—Ç–æ—Ç —Å—Ç–∞–∂–µ—Ä —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç", callback_data=f"add_test_access:{trainee_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")]
            ])
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("trainee_profile:"))
async def process_trainee_profile(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–∂–µ—Ä–∞"""
    trainee_id = int(callback.data.split(':')[1])
    trainee = await get_user_by_id(session, trainee_id)
    if not trainee:
        await callback.answer("‚ùå –°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    mentor = await get_trainee_mentor(session, trainee_id)
    results = await get_user_test_results(session, trainee_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    available_tests = await get_trainee_available_tests(session, trainee_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed_count = sum(1 for r in results if r.is_passed)
    failed_count = len(results) - passed_count
    avg_score = sum(r.score for r in results) / len(results) if results else 0
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç
    last_test_info = ""
    if results:
        last_result = results[0]  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ
        last_test = await get_test_by_id(session, last_result.test_id)
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if last_result.is_passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        percentage = (last_result.score / last_result.max_possible_score) * 100
        last_test_info = f"""
üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç:</b>
   ‚Ä¢ {last_test.name if last_test else '–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω'}
   ‚Ä¢ {status} ({last_result.score}/{last_result.max_possible_score} –±–∞–ª–ª–æ–≤ - {percentage:.0f}%)
   ‚Ä¢ {last_result.created_date.strftime('%d.%m.%Y %H:%M')}"""
    
    profile_text = f"""üë§ <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–∂–µ—Ä–∞</b>

üßë <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
   ‚Ä¢ –§–ò–û: {trainee.full_name}
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {trainee.phone_number}
   ‚Ä¢ Telegram: @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
   ‚Ä¢ ID: {trainee.tg_id}
   ‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}

üë®‚Äçüè´ <b>–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ:</b>
   ‚Ä¢ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {mentor.full_name if mentor else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(available_tests)}
   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}
   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed_count}
   ‚Ä¢ –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed_count}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.2f}{last_test_info}

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {passed_count}/{len(available_tests)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"""

    await callback.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data=f"trainee:{trainee_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_trainees")
async def process_back_to_trainees(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    trainees_list = "\n\n".join([
        f"üë§ <b>{trainee.full_name}</b>\n"
        f"   üìû {trainee.phone_number}\n"
        f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y')}"
        for trainee in trainees
    ])
    
    await callback.message.edit_text(
        f"üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
        f"–í—Å–µ–≥–æ —Å—Ç–∞–∂–µ—Ä–æ–≤: <b>{len(trainees)}</b>\n\n{trainees_list}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_trainee_selection_keyboard(trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_action)
    await callback.answer()

@router.callback_query(F.data == "assign_mentor")
async def process_assign_mentor_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    has_permission = await check_user_permission(session, user.id, "assign_mentors")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await callback.message.edit_text(
            "‚úÖ <b>–í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤", callback_data="view_all_mentors")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üë• <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"‚Ä¢ –°—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤\n\n"
        f"üéØ <b>–í–∞—à–∞ –∑–∞–¥–∞—á–∞:</b> –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞–∂–µ—Ä—É –¥–ª—è:\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        f"‚Ä¢ –ü–æ–º–æ—â–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏\n"
        f"‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º\n\n"
        f"üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:</b>",
        parse_mode="HTML",
        reply_markup=get_unassigned_trainees_keyboard(unassigned_trainees)
    )
    
    await state.set_state(MentorshipStates.waiting_for_trainee_selection)
    await callback.answer()

@router.callback_query(F.data == "new_trainees_list")
async def process_new_trainees_list_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        await callback.answer()
        return
    
    has_permission = await check_user_permission(session, user.id, "view_trainee_list")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–∂—ë—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (–æ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è "–Ω–æ–≤—ã–º–∏")
    unassigned_trainees = await get_unassigned_trainees(session)
    
    if not unassigned_trainees:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤</b>\n\n"
            "‚úÖ –í—Å–µ —Å—Ç–∞–∂–µ—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!\n"
            "–ù–æ–≤—ã–µ —Å—Ç–∞–∂—ë—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_mentor")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    users_info = []
    for i, trainee in enumerate(unassigned_trainees, 1):
        users_info.append(
            f"{i}. <b>{trainee.full_name}</b>\n"
            f"   üìû {trainee.phone_number}\n"
            f"   üìß @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}"
        )
    
    users_list = "\n\n".join(users_info)
    
    await callback.message.edit_text(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞–∂—ë—Ä–æ–≤</b>\n\n"
        f"–°—Ç–∞–∂—ë—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: <b>{len(unassigned_trainees)}</b>\n\n"
        f"{users_list}\n\n"
        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —ç—Ç–∏–º —Å—Ç–∞–∂—ë—Ä–∞–º.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", callback_data="assign_mentor")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()


# ===== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–†–ê–ï–ö–¢–û–†–ò–Ø–ú–ò =====

@router.callback_query(F.data == "assign_trajectory")
async def callback_assign_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é' –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞)
        mentor = await get_user_by_tg_id(session, callback.from_user.id)
        if not mentor:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞  
        trainees = await get_mentor_trainees(session, mentor.id)

        if not trainees:
            await callback.message.edit_text(
                "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–∂–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ cmd_mentor_trainees)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        message_text = "üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã</b>\n\n"

        for i, trainee in enumerate(trainees, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞
            trainee_path = await get_trainee_learning_path(session, trainee.id)
            trajectory_name = trainee_path.learning_path.name if trainee_path else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            message_text += f"{i}.  <b>{trainee.full_name}</b>\n"
            message_text += f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            message_text += f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            message_text += f"üó∫Ô∏è<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trajectory_name}\n"
            message_text += f"   üìû {trainee.phone_number}\n"
            message_text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {trainee.registration_date.strftime('%d.%m.%Y')}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–∞
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{trainee.full_name}",
                    callback_data=f"select_trainee_for_trajectory:{trainee.id}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

        await callback.message.edit_text(
            message_text + "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "assign_trajectory_from_notification", "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(callback.from_user.id, "assign_trajectory_error", str(e))


@router.callback_query(F.data.startswith("select_trajectory:"), MentorshipStates.selecting_trajectory)
async def callback_select_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        trajectory_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        trainee_id = state_data.get("selected_trainee_id")

        if not trainee_id:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: —Å—Ç–∞–∂–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä–∞ –∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trainee = await get_user_by_id(session, trainee_id)
        trajectory = await get_learning_path_by_id(session, trajectory_id)

        if not trainee or not trajectory:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_trajectory_id=trajectory_id)

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        stages = await get_learning_path_stages(session, trajectory_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        stages_info = ""
        for stage in stages:
            sessions_count = len(stage.sessions) if stage.sessions else 0
            tests_count = sum(len(session.tests) if session.tests else 0 for session in stage.sessions) if stage.sessions else 0
            stages_info += f"‚è∫Ô∏è<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"
            stages_info += f"   üìö –°–µ—Å—Å–∏–π: {sessions_count}, –¢–µ—Å—Ç–æ–≤: {tests_count}\n"

        confirmation_message = (
            "üó∫Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
            "üë§ <b>–°—Ç–∞–∂–µ—Ä:</b>\n"
            f"   ‚Ä¢ –§–ò–û: {trainee.full_name}\n"
            f"   ‚Ä¢ –ì—Ä—É–ø–ø–∞: {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "üìö <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b>\n"
            f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {trajectory.name}\n"
            f"   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {trajectory.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"<b>–≠—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b>\n{stages_info}\n"
            "‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:</b>"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data="confirm_trajectory_assignment"),
                InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_trajectory_assignment")
            ]
        ])

        await callback.message.edit_text(
            confirmation_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        await state.set_state(MentorshipStates.confirming_trajectory_assignment)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(callback.from_user.id, "select_trajectory_error", str(e))


@router.callback_query(F.data == "confirm_trajectory_assignment", MentorshipStates.confirming_trajectory_assignment)
async def callback_confirm_trajectory_assignment(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        trainee_id = state_data.get("selected_trainee_id")
        trajectory_id = state_data.get("selected_trajectory_id")
        mentor_id = callback.from_user.id

        if not trainee_id or not trajectory_id:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä—É
        success = await assign_learning_path_to_trainee(session, trainee_id, trajectory_id, mentor_id, bot)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            trainee = await get_user_by_id(session, trainee_id)
            trajectory = await get_learning_path_by_id(session, trajectory_id)
            mentor = await get_user_by_tg_id(session, mentor_id)

            success_message = (
                "‚úÖ <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
                f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
                f"üó∫Ô∏è <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trajectory.name}\n"
                f"üë®‚Äçüè´ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> {mentor.full_name}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                "üì¨ <b>–°—Ç–∞–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏!</b>\n\n"
                "üéØ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —ç—Ç–∞–ø—ã —Å—Ç–∞–∂–µ—Ä—É –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.</b>"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã", callback_data="my_trainees"),
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])

            await callback.message.edit_text(
                success_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            log_user_action(mentor_id, "trajectory_assigned_success",
                          f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {trajectory.name} (ID: {trajectory_id}) —Å—Ç–∞–∂–µ—Ä—É {trainee.full_name} (ID: {trainee_id})")

        else:
            await callback.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            log_user_error(mentor_id, "trajectory_assignment_failed", f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ {trajectory_id} —Å—Ç–∞–∂–µ—Ä—É {trainee_id}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        log_user_error(callback.from_user.id, "confirm_trajectory_assignment_error", str(e))


@router.callback_query(F.data == "cancel_trajectory_assignment")
async def callback_cancel_trajectory_assignment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        await callback.message.edit_text(
            "üö´ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ.",
            reply_markup=get_trainee_actions_keyboard(),
                parse_mode="HTML"
        )

        await state.clear()
        log_user_action(callback.from_user.id, "trajectory_assignment_cancelled", "–û—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")

    except Exception as e:
        log_user_error(callback.from_user.id, "cancel_trajectory_assignment_error", str(e))


@router.callback_query(F.data.startswith("view_stage:"))
async def callback_view_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ —Å—Ç–∞–∂–µ—Ä–∞"""
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞ –∏ —ç—Ç–∞–ø–∞ –∏–∑ callback_data
        parts = callback.data.split(":")
        trainee_id = int(parts[1])
        stage_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, trainee_id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
        stage_progress = next((sp for sp in stages_progress if sp.stage_id == stage_id), None)

        if not stage_progress:
            await callback.message.edit_text("–≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞
        sessions_progress = await get_stage_session_progress(session, stage_progress.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–µ
        stage_info = (
            f"üìä<b>–≠–¢–ê–ü {stage_progress.stage.order_number}: {stage_progress.stage.name}</b>üìä\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üó∫Ô∏è<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path.learning_path else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        )

        # –°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞
        if stage_progress.is_completed:
            stage_info += f"üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ü—Ä–æ–π–¥–µ–Ω\n"
            if stage_progress.completed_date:
                stage_info += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> {stage_progress.completed_date.strftime('%d.%m.%Y %H:%M')}\n"
        elif stage_progress.is_opened:
            stage_info += f"üü° <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫—Ä—ã—Ç\n"
            if stage_progress.opened_date:
                stage_info += f"üìÖ <b>–û—Ç–∫—Ä—ã—Ç:</b> {stage_progress.opened_date.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            stage_info += f"‚è∫Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–∫—Ä—ã—Ç\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö
        completed_sessions = sum(1 for sp in sessions_progress if sp.is_completed)
        total_sessions = len(sessions_progress)
        stage_info += f"üìö <b>–°–µ—Å—Å–∏–π:</b> {completed_sessions}/{total_sessions}\n\n"

        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        if sessions_progress:
            stage_info += "<b>–°–µ—Å—Å–∏–∏ —ç—Ç–∞–ø–∞:</b>\n"
            for session_progress in sessions_progress:
                session_icon = "üü¢" if session_progress.is_completed else ("üü°" if session_progress.is_opened else "‚è∫Ô∏è")
                stage_info += f"{session_icon}<b>–°–µ—Å—Å–∏—è {session_progress.session.order_number}:</b> {session_progress.session.name}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã —Å–µ—Å—Å–∏–∏
                tests = session_progress.session.tests if hasattr(session_progress.session, 'tests') else []
                if tests:
                    for i, test in enumerate(tests, 1):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
                        test_result = await get_user_test_result(session, trainee_id, test.id)
                        test_icon = "üü¢" if (test_result and test_result.is_passed) else "‚è∫Ô∏è"
                        test_status = "–ø—Ä–æ–π–¥–µ–Ω" if (test_result and test_result.is_passed) else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
                        stage_info += f"   {test_icon}–¢–µ—Å—Ç {i}: {test.name} ({test_status})\n"

                        if test_result and test_result.is_passed:
                            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                            percentage = (test_result.score / test_result.max_possible_score) * 100
                            stage_info += f"      üìä –ë–∞–ª–ª: {test_result.score}/{test_result.max_possible_score} ({percentage:.0f}%)\n"
                            if test_result.completed_date:
                                stage_info += f"      üìÖ –ü—Ä–æ–π–¥–µ–Ω: {test_result.completed_date.strftime('%d.%m.%Y %H:%M')}\n"
                else:
                    stage_info += "   üìù –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"

                stage_info += "\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard_buttons = [
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —ç—Ç–∞–ø–∞–º", callback_data=f"manage_stages:{trainee_id}")]
        ]

        # –ï—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è
        if not stage_progress.is_opened:
            keyboard_buttons.insert(0, [
                InlineKeyboardButton(
                    text=f"üü° –û—Ç–∫—Ä—ã—Ç—å —ç—Ç–∞–ø {stage_progress.stage.order_number}",
                    callback_data=f"open_stage:{trainee_id}:{stage_id}"
                )
            ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            stage_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "stage_viewed",
                       f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω —ç—Ç–∞–ø {stage_progress.stage.order_number} —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —ç—Ç–∞–ø–∞")
        log_user_error(callback.from_user.id, "view_stage_error", str(e))


# –°–¢–ê–†–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –£–î–ê–õ–ï–ù–ê - –§–£–ù–ö–¶–ò–û–ù–ê–õ –†–ï–ê–õ–ò–ó–û–í–ê–ù –í TASK 7 –ù–ò–ñ–ï


@router.callback_query(F.data.startswith("stage_available_stub:"))
async def callback_stage_available_stub(callback: CallbackQuery, session: AsyncSession):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ '–≠—Ç–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω'"""
    await callback.answer("‚úÖ –≠—Ç–∞–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞", show_alert=False)


@router.callback_query(F.data.startswith("view_trajectory:"))
async def callback_view_trajectory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞"""
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞ –∏–∑ callback_data
        trainee_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, trainee_id)

        if not trainee_path:
            await callback.message.edit_text(
                f"‚ùå <b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</b>\n\n"
                f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n\n"
                "–≠—Ç–æ–º—É —Å—Ç–∞–∂–µ—Ä—É –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞–∂–µ—Ä–∞
        test_results = await get_user_test_results(session, trainee_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectory_info = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path.learning_path else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
            "üó∫Ô∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π</b>\n\n"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è Task 7
        progress_info = await generate_trajectory_progress_with_attestation_status(session, trainee_path, stages_progress, test_results)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é", callback_data=f"assign_trajectory:{trainee_id}"),
                InlineKeyboardButton(text="–≠—Ç–∞–ø—ã", callback_data=f"manage_stages:{trainee_id}")
            ],
            [
                InlineKeyboardButton(text="–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è", callback_data=f"view_trainee_attestation:{trainee_id}"),
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_trainees")
            ]
        ])

        await callback.message.edit_text(
            trajectory_info + progress_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        log_user_action(callback.from_user.id, "trajectory_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name} (ID: {trainee_id})")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏")
        log_user_error(callback.from_user.id, "view_trajectory_error", str(e))


@router.callback_query(F.data.startswith("manage_stages:"))
async def callback_manage_stages(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞–º–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        await callback.answer()

        trainee_id = int(callback.data.split(":")[1])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–Ω–µ—Å–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        await update_stages_management_interface(callback, session, trainee_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç–∞–∂–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        trainee = await get_user_by_id(session, trainee_id)
        if trainee:
            log_user_action(callback.from_user.id, "stages_management_opened", f"–û—Ç–∫—Ä—ã—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞–º–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        log_user_error(callback.from_user.id, "manage_stages_error", str(e))
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞–º–∏")


@router.callback_query(F.data.startswith("open_stage:"))
async def callback_open_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–∞–ø–∞ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞"""
    try:
        await callback.answer()

        parts = callback.data.split(":")
        trainee_id = int(parts[1])
        stage_id = int(parts[2])

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç—Ç–∞–ø
        success = await open_stage_for_trainee(session, trainee_id, stage_id, bot)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            trainee = await get_user_by_id(session, trainee_id)
            trainee_path = await get_trainee_learning_path(session, trainee_id)
            stages = await get_learning_path_stages(session, trainee_path.learning_path_id)
            current_stage = next((s for s in stages if s.id == stage_id), None)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
            test_results = await get_user_test_results(session, trainee_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó —à–∞–≥ 9
            success_message = (
                f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
                f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path.learning_path else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
                f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
                f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
                "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
                f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
                "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
                f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
                "üó∫Ô∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π</b>\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            trajectory_progress = generate_trajectory_progress_for_mentor(trainee_path, stages_progress, test_results)
            success_message += trajectory_progress + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
            success_message += f"‚úÖ<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ —Å—Ç–∞–∂—ë—Ä—É {current_stage.name}!</b>\n\n"
            success_message += f"<b>–û—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç–∞–∂—ë—Ä—É —ç—Ç–∞–ø—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–Ω–∞—á–∫–æ–º üü°</b>\n"
            success_message += f"<b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–∂—ë—Ä–æ–º —ç—Ç–∞–ø—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–Ω–∞—á–∫–æ–º üü¢</b>\n\n"
            success_message += f"<b>–ß—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å—Ç–∞–∂—ë—Ä–∞:</b>\n"
            success_message += f"1 –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã\"\n"
            success_message += f"2 –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∞–∂—ë—Ä–∞\n"
            success_message += f"3 –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞–∂—ë—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –ú–æ–∏ —Å—Ç–∞–∂—ë—Ä—ã", callback_data="my_trainees"),
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç—Ç–∞–ø–∞–º", callback_data=f"manage_stages:{trainee_id}")
                ]
            ])

            await callback.message.edit_text(
                success_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            log_user_action(callback.from_user.id, "stage_opened_success",
                          f"–û—Ç–∫—Ä—ã—Ç —ç—Ç–∞–ø {current_stage.order_number}: {current_stage.name} –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–∞–ø–∞</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç—Ç–∞–ø–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            log_user_error(callback.from_user.id, "stage_open_failed", f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–∞–ø–∞ {stage_id} –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee_id}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç—Ç–∞–ø–∞")
        log_user_error(callback.from_user.id, "open_stage_error", str(e))


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø–ú–ò =====

@router.callback_query(F.data.startswith("assign_manager:"))
async def callback_assign_manager(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–µ—Ä—É
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞
        trainee_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        available_managers = await get_available_managers_for_trainee(session, trainee_id)

        if not available_managers:
            await callback.message.edit_text(
                f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n"
                f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n\n"
                "–î–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Ç–æ–º –∂–µ –æ–±—ä–µ–∫—Ç–µ —Ä–∞–±–æ—Ç—ã.",
                parse_mode="HTML"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_trainee_id=trainee_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ
        trainee_info = (
            f"üë§ <b>–í—ã–±—Ä–∞–Ω —Å—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y')}\n"
            f"üóÇÔ∏è <b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            "üë®‚Äçüè´ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:</b>"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
        keyboard = get_manager_selection_keyboard(available_managers)

        await callback.message.edit_text(
            trainee_info,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await state.set_state(MentorshipStates.selecting_manager)
        log_user_action(callback.from_user.id, "assign_manager_started", f"–ù–∞—á–∞—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–µ—Ä—É {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        log_user_error(callback.from_user.id, "assign_manager_error", str(e))


@router.callback_query(MentorshipStates.selecting_manager, F.data.startswith("select_manager:"))
async def callback_select_manager(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        manager_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        trainee_id = data.get('selected_trainee_id')

        if not trainee_id:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: —Å—Ç–∞–∂–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        trainee = await get_user_by_id(session, trainee_id)
        manager = await get_user_by_id(session, manager_id)

        if not trainee or not manager:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_info = (
            "ü§ù <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
            "üë§ <b>–°—Ç–∞–∂–µ—Ä:</b>\n"
            f"   ‚Ä¢ –§–ò–û: {trainee.full_name}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {trainee.phone_number}\n"
            f"   ‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {trainee.registration_date.strftime('%d.%m.%Y')}\n\n"
            "üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b>\n"
            f"   ‚Ä¢ –§–ò–û: {manager.full_name}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {manager.work_object.name if manager.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {manager.phone_number}\n\n"
            "‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:</b>"
        )

        keyboard = get_manager_assignment_confirmation_keyboard(trainee_id, manager_id)

        await callback.message.edit_text(
            confirmation_info,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await state.set_state(MentorshipStates.confirming_manager_assignment)
        log_user_action(callback.from_user.id, "manager_selected", f"–í—ã–±—Ä–∞–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {manager.full_name} –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        log_user_error(callback.from_user.id, "select_manager_error", str(e))


@router.callback_query(MentorshipStates.confirming_manager_assignment, F.data.startswith("confirm_manager:"))
async def callback_confirm_manager_assignment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º IDs
        parts = callback.data.split(":")
        trainee_id = int(parts[1])
        manager_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞)
        mentor = await get_user_by_tg_id(session, callback.from_user.id)
        if not mentor:
            await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        trainee_manager = await assign_manager_to_trainee(session, trainee_id, manager_id, mentor.id)

        if not trainee_manager:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É —Å—Ç–∞–∂–µ—Ä—É.",
                parse_mode="HTML"
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–∂–µ—Ä–µ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
        trainee = await get_user_by_id(session, trainee_id)
        manager = await get_user_by_id(session, manager_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = (
            "‚úÖ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
            "üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> " + trainee.full_name + "\n"
            "üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> " + manager.full_name + "\n"
            "üìÖ <b>–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> " + trainee_manager.assigned_date.strftime('%d.%m.%Y %H:%M') + "\n"
            "üë§ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> " + mentor.full_name + "\n\n"
            "üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:</b>\n"
            "‚Ä¢ ‚úÖ –°—Ç–∞–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è\n"
            "‚Ä¢ üìû –¢–µ–ª–µ—Ñ–æ–Ω: " + manager.phone_number + "\n"
            "‚Ä¢ üìß Telegram: @" + (manager.username or "–Ω–µ —É–∫–∞–∑–∞–Ω") + "\n\n"
            "üéØ <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
            "‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã", callback_data="my_trainees")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])

        await callback.message.edit_text(
            success_message,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await state.clear()
        log_user_action(callback.from_user.id, "manager_assigned", f"–ù–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {manager.full_name} —Å—Ç–∞–∂–µ—Ä—É {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        log_user_error(callback.from_user.id, "confirm_manager_error", str(e))
        await state.clear()


@router.callback_query(F.data.startswith("view_manager:"))
async def callback_view_manager(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–µ—Ä–∞
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞
        trainee_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑—å —Å—Ç–∞–∂–µ—Ä-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
        trainee_manager = await get_trainee_manager(session, trainee_id)

        if not trainee_manager:
            await callback.message.edit_text(
                "‚ùå <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
                "–î–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.\n"
                "–ù–∞–∑–Ω–∞—á—å—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
        manager = await get_user_by_id(session, trainee_manager.manager_id)
        trainee = await get_user_by_id(session, trainee_id)

        if not manager or not trainee:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        manager_info = (
            "üë®‚Äçüè´ <b>–†–£–ö–û–í–û–î–ò–¢–ï–õ–¨ –°–¢–ê–ñ–ï–†–ê</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            "üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b>\n"
            f"   ‚Ä¢ –§–ò–û: {manager.full_name}\n"
            f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {manager.phone_number}\n"
            f"   ‚Ä¢ Telegram: @{manager.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   ‚Ä¢ –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã: {manager.work_object.name if manager.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìÖ <b>–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b> {trainee_manager.assigned_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> {trainee_manager.assigned_by.full_name}\n\n"
            "üéØ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"trainee:{trainee_id}")
            ]
        ])

        await callback.message.edit_text(
            manager_info,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(callback.from_user.id, "manager_viewed", f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {manager.full_name} —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        log_user_error(callback.from_user.id, "view_manager_error", str(e))


@router.callback_query(F.data.startswith("manager_actions:"))
async def callback_manager_actions(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–∂–µ—Ä–∞
    """
    try:
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞–∂–µ—Ä–∞
        trainee_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç–∞–∂–µ—Ä–∞
        trainee_manager = await get_trainee_manager(session, trainee_id)

        if trainee_manager:
            manager = await get_user_by_id(session, trainee_manager.manager_id)
            manager_info = f"üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager.full_name}"
            manager_status = "‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω"
        else:
            manager_info = "üë®‚Äçüè´ <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            manager_status = "‚ùå –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º
        actions_menu = (
            "üë®‚Äçüè´ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ú</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"{manager_info}\n"
            f"üéØ <b>–°—Ç–∞—Ç—É—Å:</b> {manager_status}\n\n"
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )

        keyboard = get_manager_actions_keyboard(trainee_id)

        await callback.message.edit_text(
            actions_menu,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(callback.from_user.id, "manager_actions_opened", f"–û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º")
        log_user_error(callback.from_user.id, "manager_actions_error", str(e))


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Task 7: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å—Ç–∞–∂–µ—Ä—É
# ===============================

@router.callback_query(F.data.startswith("view_trainee_attestation:"))
async def callback_view_trainee_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è' –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º)"""
    try:
        await callback.answer()
        
        trainee_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∂–µ—Ä–∞
        trainee = await get_user_by_id(session, trainee_id)
        if not trainee:
            await callback.message.edit_text("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ (—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        mentor = await get_user_by_tg_id(session, callback.from_user.id)
        if not mentor:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        has_permission = await check_user_permission(session, mentor.id, "view_mentorship")
        if not has_permission:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è–º–∏")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, trainee.id)
        if not trainee_path or not trainee_path.learning_path.attestation:
            await callback.message.edit_text(
                "‚ùå –£ —Å—Ç–∞–∂–µ—Ä–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π.\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Å—Ç–∞–∂–µ—Ä—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è —Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π."
            )
            return
            
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –í—Å–µ —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ø–µ—Ä–µ–¥ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π
        all_stages_completed = await check_all_stages_completed(session, trainee.id)
        if not all_stages_completed:
            await callback.message.edit_text(
                "‚ùå <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
                "–°—Ç–∞–∂–µ—Ä –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è.\n\n"
                "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ ‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–π–¥–µ–Ω—ã\n"
                "‚Ä¢ ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–∞–ø–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–¥–∞–Ω—ã\n\n"
                "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç–∞–∂–µ—Ä—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç—Ç–∞–ø—ã –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_trainee_for_trajectory:{trainee_id}")]
                ])
            )
            return
            
        attestation = trainee_path.learning_path.attestation
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
        group_id = trainee.groups[0].id if trainee.groups else None
        managers = await get_managers_for_attestation(session, group_id)
        
        if not managers:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            trainee_id=trainee_id,
            attestation_id=attestation.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        message_text = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
            "üó∫Ô∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π</b>\n"
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è</b>\n\n"
            "üü°<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üëá</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for manager in managers:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{manager.full_name}",
                    callback_data=f"select_manager_for_attestation:{manager.id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_trainee_for_trajectory:{trainee_id}")
        ])
        
        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await state.set_state(AttestationAssignmentStates.selecting_manager_for_attestation)
        log_user_action(callback.from_user.id, "attestation_assignment_started", f"–ù–∞—á–∞—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")
    
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
        log_user_error(callback.from_user.id, "view_trainee_attestation_error", str(e))


@router.callback_query(F.data.startswith("select_manager_for_attestation:"), AttestationAssignmentStates.selecting_manager_for_attestation)
async def callback_select_manager_for_attestation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        manager_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        trainee_id = state_data.get("trainee_id")
        attestation_id = state_data.get("attestation_id")
        
        if not trainee_id or not attestation_id:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        trainee = await get_user_by_id(session, trainee_id)
        manager = await get_user_by_id(session, manager_id)
        attestation = await get_attestation_by_id(session, attestation_id)
        trainee_path = await get_trainee_learning_path(session, trainee_id)
        
        if not trainee or not manager or not attestation:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
        await state.update_data(manager_id=manager_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        confirmation_text = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
            "üó∫Ô∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π</b>\n"
            "üîç<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è</b>\n\n"
            f"üîç‚è∫Ô∏è<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n"
            f"üü¢<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager.full_name}\n"
            "üü¢<b>–î–∞—Ç–∞:</b> \n"
            "üü¢<b>–í—Ä–µ–º—è:</b> \n\n"
            "üü°<b>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞?</b>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_attestation_assignment"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"view_trainee_attestation:{trainee_id}")
            ]
        ])
        
        await callback.message.edit_text(
            confirmation_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await state.set_state(AttestationAssignmentStates.confirming_attestation_assignment)
        log_user_action(callback.from_user.id, "manager_selected_for_attestation", f"–í—ã–±—Ä–∞–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å {manager.full_name} –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name}")
    
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
        log_user_error(callback.from_user.id, "select_manager_for_attestation_error", str(e))


@router.callback_query(F.data == "confirm_attestation_assignment", AttestationAssignmentStates.confirming_attestation_assignment)
async def callback_confirm_attestation_assignment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        trainee_id = state_data.get("trainee_id")
        manager_id = state_data.get("manager_id")
        attestation_id = state_data.get("attestation_id")
        
        if not all([trainee_id, manager_id, attestation_id]):
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        mentor = await get_user_by_tg_id(session, callback.from_user.id)
        if not mentor:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
        assignment = await assign_attestation_to_trainee(
            session, trainee_id, manager_id, attestation_id, mentor.id
        )
        
        if not assignment:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")
            return
            
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        trainee = await get_user_by_id(session, trainee_id)
        manager = await get_user_by_id(session, manager_id)
        attestation = await get_attestation_by_id(session, attestation_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É
        await callback.message.edit_text(
            "‚úÖ <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üë®‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager.full_name}\n"
            f"üîç <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n\n"
            "üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ç–∞–∂–µ—Ä—É –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        await send_attestation_assignment_notification_to_trainee(
            session, callback.message.bot, assignment.id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        await send_attestation_assignment_notification_to_manager(
            session, callback.message.bot, assignment.id
        )
        
        log_user_action(callback.from_user.id, "attestation_assigned", f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è {attestation.name} —Å—Ç–∞–∂–µ—Ä—É {trainee.full_name} —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º {manager.full_name}")
    
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏")
        log_user_error(callback.from_user.id, "confirm_attestation_assignment_error", str(e))


# –§—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Task 7
async def send_attestation_assignment_notification_to_trainee(session: AsyncSession, bot, assignment_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä—É –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 14)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            return
            
        trainee = assignment.trainee
        manager = assignment.manager
        attestation = assignment.attestation
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        notification_text = (
            "<b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b>\n\n"
            f"üîç‚è∫Ô∏è<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n"
            f"üü¢<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {manager.full_name}\n"
            f"üë§ <b>Username:</b> @{manager.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üü¢<b>–î–∞—Ç–∞:</b> {assignment.scheduled_date or ''}\n"
            f"üü¢<b>–í—Ä–µ–º—è:</b> {assignment.scheduled_time or ''}\n\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            "‚ùóÔ∏è<b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏</b>"
        )
        
        await bot.send_message(
            chat_id=trainee.tg_id,
            text=notification_text,
            parse_mode="HTML"
        )
        
        log_user_action(trainee.tg_id, "attestation_assignment_notification_sent", f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ {attestation.name}")
        
    except Exception as e:
        log_user_error(0, "send_attestation_notification_to_trainee_error", str(e))


async def send_attestation_assignment_notification_to_manager(session: AsyncSession, bot, assignment_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞ –Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é (–¢–ó —à–∞–≥ 15)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        assignment = await get_trainee_attestation_by_id(session, assignment_id)
        if not assignment:
            return
            
        trainee = assignment.trainee
        manager = assignment.manager
        attestation = assignment.attestation
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        notification_text = (
            "<b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç–∞–∂—ë—Ä –Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é:</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {trainee.full_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"üë§ <b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üëë <b>–†–æ–ª–∏:</b> {', '.join([role.name for role in trainee.roles])}\n"
            f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìç<b>1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üîç‚è∫Ô∏è<b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è:</b> {attestation.name}\n\n"
            "‚ùóÔ∏è<b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å—Ç–∞–∂–µ—Ä–æ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏</b>"
        )
        
        await bot.send_message(
            chat_id=manager.tg_id,
            text=notification_text,
            parse_mode="HTML"
        )
        
        log_user_action(manager.tg_id, "attestation_assignment_notification_sent", f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞ {trainee.full_name} –Ω–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é")
        
    except Exception as e:
        log_user_error(0, "send_attestation_notification_to_manager_error", str(e))


@router.callback_query(F.data.startswith("toggle_stage:"))
async def callback_toggle_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞ (–æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å)"""
    try:
        await callback.answer()

        parts = callback.data.split(":")
        trainee_id = int(parts[1])
        stage_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞
        trainee_path = await get_trainee_learning_path(session, trainee_id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)
        current_stage_progress = next((sp for sp in stages_progress if sp.stage_id == stage_id), None)
        
        if not current_stage_progress:
            await callback.message.edit_text("–≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞–ø –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å)
        if current_stage_progress.is_completed:
            await callback.answer("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å", show_alert=True)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞
        if current_stage_progress.is_opened:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç—Ç–∞–ø
            from database.models import TraineeStageProgress, TraineeSessionProgress
            await session.execute(
                update(TraineeStageProgress).where(
                    TraineeStageProgress.id == current_stage_progress.id
                ).values(is_opened=False)
            )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞
            await session.execute(
                update(TraineeSessionProgress).where(
                    TraineeSessionProgress.stage_progress_id == current_stage_progress.id
                ).values(is_opened=False)
            )
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–µ—Ä—É –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —ç—Ç–∞–ø–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            # (—Å—Ç–∞–∂–µ—Ä—É –Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —ç—Ç–∞–ø–æ–≤)
            
            action_text = "–∑–∞–∫—Ä—ã—Ç"
        else:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç—Ç–∞–ø
            success = await open_stage_for_trainee(session, trainee_id, stage_id, bot)
            if not success:
                await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç—Ç–∞–ø–∞")
                return
            action_text = "–æ—Ç–∫—Ä—ã—Ç"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞–º–∏
        await update_stages_management_interface(callback, session, trainee_id)
        
        log_user_action(callback.from_user.id, "stage_toggled", f"–≠—Ç–∞–ø {stage_id} {action_text} –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ {trainee_id}")

    except Exception as e:
        log_user_error(callback.from_user.id, "toggle_stage_error", str(e))
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∞–ø–∞")


@router.callback_query(F.data.startswith("stage_available_stub:"))
async def callback_stage_available_stub(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤"""
    await callback.answer("–≠—Ç–∞–ø —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω", show_alert=True)


@router.callback_query(F.data.startswith("stage_completed_stub:"))
async def callback_stage_completed_stub(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤"""
    await callback.answer("–≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω", show_alert=True)


async def update_stages_management_interface(callback: CallbackQuery, session: AsyncSession, trainee_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞–º–∏ (–≤—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–∂–µ—Ä–∞
        trainee_path = await get_trainee_learning_path(session, trainee_id)
        if not trainee_path:
            await callback.message.edit_text("–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ø—ã
        stages_progress = await get_trainee_stage_progress(session, trainee_path.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–ø–∞—Ö
        stages_info = ""
        keyboard_buttons = []

        for stage_progress in stages_progress:
            stage = stage_progress.stage
            status_icon = "üü¢" if stage_progress.is_completed else ("üü°" if stage_progress.is_opened else "‚è∫Ô∏è")
            
            status_text = "–ü—Ä–æ–π–¥–µ–Ω" if stage_progress.is_completed else ("–û—Ç–∫—Ä—ã—Ç" if stage_progress.is_opened else "–ó–∞–∫—Ä—ã—Ç")

            stages_info += f"{status_icon}<b>–≠—Ç–∞–ø {stage.order_number}:</b> {stage.name}\n"
            stages_info += f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Å toggle-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
            if not stage_progress.is_opened:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üîì –û—Ç–∫—Ä—ã—Ç—å —ç—Ç–∞–ø {stage.order_number}",
                        callback_data=f"toggle_stage:{trainee_id}:{stage.id}"
                    )
                ])
            elif stage_progress.is_opened and not stage_progress.is_completed:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —ç—Ç–∞–ø–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å)
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üîí –ó–∞–∫—Ä—ã—Ç—å —ç—Ç–∞–ø {stage.order_number}",
                        callback_data=f"toggle_stage:{trainee_id}:{stage.id}"
                    )
                ])
            elif stage_progress.is_completed:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"‚úÖ –≠—Ç–∞–ø {stage.order_number} –∑–∞–≤–µ—Ä—à–µ–Ω",
                        callback_data=f"stage_completed_stub:{trainee_id}:{stage.id}"
                    )
                ])

        trainee = await get_user_by_id(session, trainee_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        test_results = await get_user_test_results(session, trainee_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó —à–∞–≥ 6
        header_info = (
            f"ü¶∏üèª‚Äç‚ôÇÔ∏è <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"<b>–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è:</b> {trainee_path.learning_path.name if trainee_path else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {trainee.phone_number}\n"
            f"<b>Username:</b> @{trainee.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> #{trainee_id}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {trainee.registration_date.strftime('%d.%m.%Y %H:%M')}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üóÇÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in trainee.groups]) if trainee.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–†–æ–ª—å:</b> {', '.join([role.name for role in trainee.roles])}\n\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n\n"
            "üìç <b>–û–±—ä–µ–∫—Ç:</b>\n"
            f"<b>–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:</b> {trainee.internship_object.name if trainee.internship_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–†–∞–±–æ—Ç—ã:</b> {trainee.work_object.name if trainee.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n\n"
            "üó∫Ô∏è<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π</b>\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        trajectory_progress = generate_trajectory_progress_for_mentor(trainee_path, stages_progress, test_results)
        header_info += trajectory_progress + "\n"
        header_info += "üü° <b>–ö–∞–∫–æ–π —ç—Ç–∞–ø –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞–∂–µ—Ä—É?</b>"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_trainee_for_trajectory:{trainee_id}")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(
            header_info,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        log_user_error(callback.from_user.id, "update_stages_interface_error", str(e))
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")

