from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
import json

from database.db import (
    create_test, get_tests_by_creator, get_all_active_tests,
    add_question_to_test, get_test_questions, get_all_stages,
    update_test, delete_test, get_test_by_id, check_user_permission,
    get_user_by_tg_id, get_test_results_summary, get_user_by_id, get_user_roles,
    get_mentor_trainees, grant_test_access, update_question, delete_question,
    get_question_analytics, get_user_test_result, check_test_access
)
from database.models import InternshipStage, TestQuestion
from sqlalchemy import select
from keyboards.keyboards import (
    get_simple_test_selection_keyboard, get_stage_selection_keyboard,
    get_yes_no_keyboard, get_question_selection_keyboard,
    get_test_actions_keyboard, get_test_filter_keyboard,
    get_question_type_keyboard, get_test_edit_menu,
    get_question_management_keyboard, get_test_settings_keyboard,
    get_finish_options_keyboard, get_test_start_keyboard
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.states import TestCreationStates, TestTakingStates
from utils.logger import log_user_action, log_user_error, logger
from handlers.auth import check_auth

router = Router()

# =================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================

async def get_creator_name(session: AsyncSession, creator_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–µ—Å—Ç–∞"""
    try:
        creator = await get_user_by_id(session, creator_id)
        return creator.full_name if creator else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è {creator_id}: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

# =================================
# –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í
# =================================

@router.message(Command("create_test"))
async def cmd_create_test_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_test"""
    await cmd_create_test(message, state, session)

@router.message(Command("manage_tests"))
async def cmd_manage_tests_command(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_tests"""
    await cmd_list_tests(message, state, session)

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç")
async def cmd_create_test(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return
    
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    has_permission = await check_user_permission(session, user.id, "create_tests")
    if not has_permission:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
        return
    
    await message.answer(
        "üîß <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞</b>\n\n"
        "üìù –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.\n\n"
        "1Ô∏è‚É£ <b>–®–∞–≥ 1:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n"
        "üí° <i>–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤</i>\n\n"
        "üìã <b>–ü—Ä–∏–º–µ—Ä:</b> ¬´–û—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏¬ª –∏–ª–∏ ¬´–¢–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
        ])
    )
    
    await state.set_state(TestCreationStates.waiting_for_test_name)
    await state.update_data(creator_id=user.id)
    
    log_user_action(message.from_user.id, message.from_user.username, "started test creation")

@router.message(F.text.in_(["–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", "–¢–µ—Å—Ç—ã —Å—Ç–∞–∂–µ—Ä–æ–≤ üìù"]))
async def cmd_list_tests(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return

    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –†–µ–∫—Ä—É—Ç–µ—Ä—ã/—É–ø—Ä–∞–≤–ª—è—é—â–∏–µ (—Å –ø—Ä–∞–≤–æ–º create_tests) –ø–æ–ª—É—á–∞—é—Ç –≤—ã–±–æ—Ä
    if await check_user_permission(session, user.id, "create_tests"):
        await message.answer(
            "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
            reply_markup=get_test_filter_keyboard()
        )
        return

    # –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ (–±–µ–∑ –ø—Ä–∞–≤–∞ create_tests) –≤–∏–¥—è—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = await get_all_active_tests(session)
    if not tests:
        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.",
            parse_mode="HTML"
        )
        return

    tests_list = "\n\n".join([
        f"<b>{i+1}. {test.name}</b>\n"
        f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤\n"
        f"   üìÖ –°–æ–∑–¥–∞–Ω: {test.created_date.strftime('%d.%m.%Y')}\n"
        f"   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {await get_creator_name(session, test.creator_id)}"
        for i, test in enumerate(tests)
    ])
    
    await message.answer(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n{tests_list}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:",
        parse_mode="HTML",
        reply_markup=get_simple_test_selection_keyboard(tests)
    )

@router.message(TestCreationStates.waiting_for_test_name)
async def process_test_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_name = message.text.strip()
    
    if len(test_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(test_name=test_name)
    
    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:</b> {test_name}\n\n"
        "2Ô∏è‚É£ <b>–®–∞–≥ 2:</b> –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n"
        "üìö –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–∂–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–∑—É—á–∏—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞?\n\n"
        "üí° <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å:</b>\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∫—É—Ä—Å—ã\n"
        "‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —É—á–µ–±–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n"
        "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É?",
        parse_mode="HTML",
        reply_markup=get_yes_no_keyboard("materials")
    )
    
    await state.set_state(TestCreationStates.waiting_for_materials)

@router.callback_query(TestCreationStates.waiting_for_materials, F.data.startswith("materials:"))
async def process_materials_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    choice = callback.data.split(':')[1]
    
    if choice == "yes":
        await callback.message.edit_text(
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="materials:skip")],
                [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
            ])
        )
    elif choice == "skip":
        await state.update_data(material_link=None)
        await ask_for_description(callback.message, state)
    else:
        await state.update_data(material_link=None)
        await ask_for_description(callback.message, state)
    
    await callback.answer()

@router.message(TestCreationStates.waiting_for_materials)
async def process_materials_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    if message.document:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç
        file_info = f"–§–∞–π–ª: {message.document.file_name}"
        await state.update_data(material_link=file_info, material_file_id=message.document.file_id)
        await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{message.document.file_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ—Å—Ç—É.")
    elif message.text:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await state.update_data(material_link=None)
        else:
            await state.update_data(material_link=message.text.strip())
    else:
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="materials:skip")],
                [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
            ])
        )
        return
    
    await ask_for_description(message, state)

async def ask_for_description(message: Message, state: FSMContext, show_cancel_button: bool = True):
    """–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    keyboard = None
    if show_cancel_button:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="description:skip")],
            [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")]
        ])
    
    await message.answer(
        "3Ô∏è‚É£ <b>–®–∞–≥ 3:</b> –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞–∂–µ—Ä–∞–º –ø–æ–Ω—è—Ç—å:\n"
        "‚Ä¢ –û —á–µ–º —ç—Ç–æ—Ç —Ç–µ—Å—Ç\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è\n"
        "‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–∂–µ—Ä–∞\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä:</b> ¬´–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–º–µ–Ω–∏–µ —Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏¬ª\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.set_state(TestCreationStates.waiting_for_description)

@router.callback_query(TestCreationStates.waiting_for_description, F.data == "description:skip")
async def process_skip_description(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description=None, questions=[], current_question_number=1)
    
    await callback.message.edit_text(
        "üìù <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É.</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø <b>–ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</b>:",
        parse_mode="HTML",
        reply_markup=get_question_type_keyboard(is_creating_test=True)
    )
    await state.set_state(TestCreationStates.waiting_for_question_type)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    description = None if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else message.text.strip()
    await state.update_data(description=description, questions=[], current_question_number=1)
    
    await message.answer(
        "üìù <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É.</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø <b>–ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</b>:",
        parse_mode="HTML",
        reply_markup=get_question_type_keyboard(is_creating_test=True)
    )
    await state.set_state(TestCreationStates.waiting_for_question_type)

@router.callback_query(TestCreationStates.waiting_for_question_type, F.data.startswith("q_type:"))
async def process_question_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    question_type = callback.data.split(':')[1]
    await state.update_data(current_question_type=question_type)
    
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</b>:")
    await state.set_state(TestCreationStates.waiting_for_question_text)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_question_text)
async def process_question_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    await state.update_data(current_question_text=message.text.strip())
    data = await state.get_data()
    q_type = data.get('current_question_type')

    if q_type == 'text':
        await message.answer(
            "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç** (—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É):",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
            ])
        )
        await state.set_state(TestCreationStates.waiting_for_answer)
    elif q_type in ['single_choice', 'multiple_choice']:
        await message.answer(
            "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ **–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç** –æ—Ç–≤–µ—Ç–∞:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
            ])
        )
        await state.update_data(current_options=[])
        await state.set_state(TestCreationStates.waiting_for_option)
    elif q_type == 'yes_no':
        await message.answer(
            "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëç –î–∞", callback_data="answer_bool:–î–∞")],
                [InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="answer_bool:–ù–µ—Ç")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
            ])
        )
        await state.set_state(TestCreationStates.waiting_for_answer)

@router.message(TestCreationStates.waiting_for_option)
async def process_option(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ"""
    data = await state.get_data()
    options = data.get('current_options', [])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if message.text.strip() in options:
        await message.answer("‚ùå –¢–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    options.append(message.text.strip())
    await state.update_data(current_options=options)
    
    current_options_text = "\n".join([f"  <b>{i+1}.</b> {opt}" for i, opt in enumerate(options)])
    
    if len(options) < 2:
        await message.answer(
            f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n\n<b>–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{current_options_text}\n\n–í–≤–µ–¥–∏—Ç–µ **—Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç** –æ—Ç–≤–µ—Ç–∞:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
            ])
        )
    else:
        await message.answer(
            f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n\n<b>–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{current_options_text}\n\n–í–≤–µ–¥–∏—Ç–µ **—Å–ª–µ–¥—É—é—â–∏–π** –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.",
            parse_mode="HTML",
            reply_markup=get_finish_options_keyboard()
        )

@router.callback_query(TestCreationStates.waiting_for_option, F.data == "finish_options")
async def finish_adding_options(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ"""
    data = await state.get_data()
    options = data.get('current_options', [])
    q_type = data.get('current_question_type')
    
    if q_type == 'single_choice':
        # –î–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
        await callback.message.edit_text(
            f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–æ—Ç –æ–Ω–∏:\n\n{options_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä** –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
            ])
        )
        await state.set_state(TestCreationStates.waiting_for_answer)

    elif q_type == 'multiple_choice':
        # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞
        options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
        await callback.message.edit_text(
            f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –í–æ—Ç –æ–Ω–∏:\n\n{options_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä–∞** –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3):",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
            ])
        )
        await state.set_state(TestCreationStates.waiting_for_answer)
    
    await callback.answer()

@router.message(TestCreationStates.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    q_type = data.get('current_question_type')
    
    answer = message.text.strip()
    
    if q_type == 'single_choice':
        try:
            index = int(answer) - 1
            options = data['current_options']
            if not (0 <= index < len(options)):
                raise ValueError
            answer = options[index]
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2):")
            return
    elif q_type == 'multiple_choice':
        try:
            indices = [int(i.strip()) - 1 for i in answer.split(',')]
            options = data['current_options']
            correct_answers = [options[i] for i in indices if 0 <= i < len(options)]
            if not correct_answers:
                raise ValueError
            answer = correct_answers
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3):")
            return

    await state.update_data(current_answer=answer)
    await message.answer(
        "üî¢ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>–¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>0.5</code> –∏–ª–∏ <code>1.5</code>.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_points)

@router.message(TestCreationStates.waiting_for_points)
async def process_points(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π"""
    try:
        points = float(message.text.replace(',', '.').strip())
        if points <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ):")
        return

    data = await state.get_data()
    questions = data.get('questions', [])
    questions.append({
        "type": data.get('current_question_type'),
        "text": data['current_question_text'],
        "options": data.get('current_options'),
        "answer": data['current_answer'],
        "points": points
    })
    
    await state.update_data(questions=questions, current_question_number=data['current_question_number'] + 1)
    
    total_questions = len(questions)
    total_score = sum(q['points'] for q in questions)
    
    await message.answer(
        f"‚úÖ <b>–í–æ–ø—Ä–æ—Å ‚Ññ{total_questions} –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞:\n"
        f" ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
        f" ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {total_score}\n\n"
        "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?",
        parse_mode="HTML",
        reply_markup=get_yes_no_keyboard("more_questions")
    )
    await state.set_state(TestCreationStates.waiting_for_more_questions)

@router.callback_query(TestCreationStates.waiting_for_more_questions, F.data.startswith("more_questions:"))
async def process_more_questions_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å"""
    if callback.data.endswith(":yes"):
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø <b>—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</b>:",
            parse_mode="HTML",
            reply_markup=get_question_type_keyboard(is_creating_test=True)
        )
        await state.set_state(TestCreationStates.waiting_for_question_type)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞
        data = await state.get_data()
        total_score = sum(q['points'] for q in data.get('questions', []))
        
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç: <b>{total_score}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª</b> –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 0.5 –¥–æ {total_score}):",
            parse_mode="HTML"
        )
        await state.set_state(TestCreationStates.waiting_for_threshold)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_threshold)
async def process_threshold_and_create_test(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()
    questions = data.get('questions', [])
    max_score = sum(q['points'] for q in questions)
    
    try:
        threshold_score = float(message.text.replace(',', '.').strip())
        if threshold_score <= 0 or threshold_score > max_score:
            await message.answer(f"‚ùå –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.5 –¥–æ {max_score}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.5 –¥–æ {max_score}:")
        return
    
    # 1. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ—Å—Ç–∞ –≤ –ë–î
    test_data = {
        'name': data['test_name'],
        'description': data.get('description'),
        'threshold_score': threshold_score,
        'max_score': max_score,
        'material_link': data.get('material_link'),
        'material_file_path': data.get('material_file_id'),
        'creator_id': data['creator_id']
    }
    test = await create_test(session, test_data)
    
    if not test:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
        
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–î, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Ç–µ—Å—Ç–æ–º
    for i, q_data in enumerate(questions):
        question_db_data = {
            'test_id': test.id,
            'question_number': i + 1,
            'question_type': q_data['type'],
            'question_text': q_data['text'],
            'options': q_data.get('options'),
            'correct_answer': q_data['answer'],
            'points': q_data['points']
        }
        await add_question_to_test(session, question_db_data)
        
    # 3. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success_rate = (threshold_score / max_score) * 100
    
    await message.answer(
        f"‚úÖ <b>–¢–µ—Å—Ç ¬´{test.name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n"
        f"üìù <b>–í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> {len(questions)}\n"
        f"üìä <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {test.max_score}\n"
        f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {test.threshold_score} ({success_rate:.1f}%)\n\n"
        "üéâ –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É.",
        parse_mode="HTML"
    )
    
    log_user_action(
        message.from_user.id, 
        message.from_user.username, 
        "created test with questions", 
        {"test_id": test.id, "questions_count": len(questions)}
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("test:"))
async def process_test_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    questions = await get_test_questions(session, test_id)
    questions_count = len(questions)
    
    stage_info = ""
    if test.stage_id:
        stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
        stage_obj = stage.scalar_one_or_none()
        if stage_obj:
            stage_info = f"üéØ <b>–≠—Ç–∞–ø:</b> {stage_obj.name}\n"
    
    test_info = f"""üìã <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ</b>

üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {test.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {test.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ùì <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {questions_count}
üé≤ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {test.max_score}
üéØ <b>–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> {test.threshold_score} –±–∞–ª–ª–æ–≤
{stage_info}üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {test.created_date.strftime('%d.%m.%Y %H:%M')}
üîó <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {f"üìé {test.material_link}" if test.material_link else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    user = await get_user_by_tg_id(session, callback.from_user.id)
    user_roles = await get_user_roles(session, user.id)
    role_names = [role.name for role in user_roles]
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    state_data = await state.get_data()
    context = state_data.get('test_context', 'management')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø (—á–µ—Ä–µ–∑ —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    # –ù–æ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç = 'taking' (–∏–∑ "–ú–æ–∏ —Ç–µ—Å—Ç—ã")
    has_access = await check_test_access(session, user.id, test_id)
    is_mentor = "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫" in role_names
    is_recruiter = "–†–µ–∫—Ä—É—Ç–µ—Ä" in role_names
    is_trainee = "–°—Ç–∞–∂–µ—Ä" in role_names
    is_employee = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" in role_names
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if (is_trainee or is_employee or (is_mentor and has_access and context == 'taking')):
        # –î–ª—è —Å—Ç–∞–∂—ë—Ä–æ–≤, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ —Å –¥–æ—Å—Ç—É–ø–æ–º - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ—Å—Ç—É
        
        if not has_access:
            await callback.message.edit_text(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        existing_result = await get_user_test_result(session, user.id, test_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        questions = await get_test_questions(session, test_id)
        questions_count = len(questions)
        
        stage_info = ""
        if test.stage_id:
            stage = await session.execute(select(InternshipStage).where(InternshipStage.id == test.stage_id))
            stage_obj = stage.scalar_one_or_none()
            if stage_obj:
                stage_info = f"üéØ <b>–≠—Ç–∞–ø:</b> {stage_obj.name}\n"
        
        materials_info = ""
        if test.material_link:
            if test.material_file_path:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                materials_info = f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\nüîó {test.material_link}\n\n"
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
                materials_info = f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n{test.material_link}\n\n"
        
        previous_result_info = ""
        if existing_result:
            status = "–ø—Ä–æ–π–¥–µ–Ω" if existing_result.is_passed else "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
            previous_result_info = f"""
üîÑ <b>–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
   ‚Ä¢ –ë–∞–ª–ª—ã: {existing_result.score}/{existing_result.max_possible_score}
   ‚Ä¢ –î–∞—Ç–∞: {existing_result.created_date.strftime('%d.%m.%Y %H:%M')}

"""
        
        test_info_for_user = f"""üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ</b>

üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {test.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {test.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
{stage_info}‚ùì <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {questions_count}
üéØ <b>–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> {test.threshold_score} –∏–∑ {test.max_score} –±–∞–ª–ª–æ–≤
{materials_info}{previous_result_info}"""
        
        await callback.message.edit_text(
            test_info_for_user,
            parse_mode="HTML",
            reply_markup=get_test_start_keyboard(test_id, bool(existing_result))
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
        await state.update_data(selected_test_id=test_id)
        await state.set_state(TestTakingStates.waiting_for_test_start)
    else:
        # –î–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        can_edit = await check_user_permission(session, user.id, "edit_tests")
        user_role = "creator" if can_edit else "mentor"
        
        await callback.message.edit_text(
            test_info,
            parse_mode="HTML",
            reply_markup=get_test_actions_keyboard(test_id, user_role)
        )
        
    await callback.answer()
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "viewed test details", 
        {"test_id": test_id}
    )

@router.callback_query(F.data.startswith("grant_access_to_test:"))
async def process_grant_access_to_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É —Å—Ç–∞–∂–µ—Ä–∞–º"""
    test_id = int(callback.data.split(':')[1])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í!
    has_permission = await check_user_permission(session, user.id, "grant_test_access")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
    trainees = await get_mentor_trainees(session, user.id)
    
    if not trainees:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞–∂–µ—Ä–æ–≤.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_tests")]
            ])
        )
        await callback.answer()
        return
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–∂–µ—Ä–æ–≤
    keyboard = []
    for trainee in trainees:
        keyboard.append([InlineKeyboardButton(
            text=f"üë§ {trainee.full_name}",
            callback_data=f"grant_to_trainee:{test_id}:{trainee.id}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")])
    
    await callback.message.edit_text(
        f"üîê <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É</b>\n\n"
        f"üë§ <b>–¢–µ—Å—Ç:</b> {test.name}\n"
        f"üë• <b>–í–∞—à–∏ —Å—Ç–∞–∂–µ—Ä—ã:</b> {len(trainees)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("grant_to_trainee:"))
async def process_grant_to_trainee(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç–∞–∂–µ—Ä—É"""
    parts = callback.data.split(':')
    test_id = int(parts[1])
    trainee_id = int(parts[2])
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    test = await get_test_by_id(session, test_id)
    trainee = await get_user_by_id(session, trainee_id)
    
    if not all([user, test, trainee]):
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success = await grant_test_access(session, trainee_id, test_id, user.id, bot)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n"
            f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {test.threshold_score}/{test.max_score}\n\n"
            f"üì¨ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n"
            f"–°—Ç–∞–∂–µ—Ä {trainee.full_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–µ—Å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥—Ä—É–≥–æ–º—É —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"grant_access_to_test:{test_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_tests")]
            ])
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "granted test access", 
            {"test_id": test_id, "trainee_id": trainee_id}
        )
    else:
        await callback.message.edit_text(
            f"‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø —É–∂–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω</b>\n\n"
            f"üë§ <b>–°—Ç–∞–∂–µ—Ä:</b> {trainee.full_name}\n"
            f"üìã <b>–¢–µ—Å—Ç:</b> {test.name}\n\n"
            f"–≠—Ç–æ—Ç —Å—Ç–∞–∂–µ—Ä —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥—Ä—É–≥–æ–º—É —Å—Ç–∞–∂–µ—Ä—É", callback_data=f"grant_access_to_test:{test_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("edit_test:"))
async def process_edit_test_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í!
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    has_permission = await check_user_permission(session, user.id, "edit_tests")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: ¬´{test.name}¬ª</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_test_meta:"))
async def process_edit_test_meta(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    await state.update_data(test_id_to_edit=test_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–µ—Å—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_new_test_name)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_new_test_name)
async def process_new_test_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(new_test_name=message.text.strip())
    await message.answer(
        "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="edit_description:skip")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_new_test_description)

@router.callback_query(TestCreationStates.waiting_for_new_test_description, F.data == "edit_description:skip")
async def process_skip_edit_description(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    
    update_data = {
        "name": data['new_test_name'],
        "description": None
    }
    
    await update_test(session, test_id, update_data)
    
    test = await get_test_by_id(session, test_id)
    await callback.message.edit_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await state.clear()
    await callback.answer()

@router.message(TestCreationStates.waiting_for_new_test_description)
async def process_new_test_description(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    description = None if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else message.text.strip()
    
    update_data = {
        "name": data['new_test_name'],
        "description": description
    }
    
    await update_test(session, test_id, update_data)
    
    test = await get_test_by_id(session, test_id)
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_test_threshold:"))
async def process_edit_threshold(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await state.update_data(test_id_to_edit=test_id)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: <b>{test.threshold_score}</b> –∏–∑ <b>{test.max_score}</b>.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (–æ—Ç 0.5 –¥–æ {test.max_score}):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_new_threshold)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_new_threshold)
async def process_new_threshold(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    test = await get_test_by_id(session, test_id)
    
    try:
        new_threshold = float(message.text.replace(',', '.').strip())
        if not (0 < new_threshold <= test.max_score):
            await message.answer(f"‚ùå –ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ {test.max_score}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
        
    await update_test(session, test_id, {"threshold_score": new_threshold})
    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–ª—è —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{new_threshold}</b>.",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_test_questions:"))
async def process_manage_questions(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    test_id = int(callback.data.split(':')[1])
    questions = await get_test_questions(session, test_id)
    
    if not questions:
        await callback.message.edit_text(
            "–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"add_q_to_test:{test_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")]
            ])
        )
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    buttons = []
    for q in questions:
        text += f"<b>{q.question_number}.</b> {q.question_text[:50]}... ({q.points} –±.)\n"
        buttons.append([InlineKeyboardButton(
            text=f"–í–æ–ø—Ä–æ—Å {q.question_number}",
            callback_data=f"select_question_for_edit:{q.id}"
        )])
        
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()


@router.callback_query(F.data.startswith("select_question_for_edit:"))
async def select_question_for_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    question_id = int(callback.data.split(':')[1])
    question = await session.get(TestQuestion, question_id)
    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await state.update_data(question_id_to_edit=question_id, test_id_to_edit=question.test_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
    questions = await get_test_questions(session, question.test_id)
    is_first = question.question_number == 1
    is_last = question.question_number == len(questions)

    options_text = ""
    if question.options:
        options_text = "\n".join([f"  - {opt}" for opt in question.options])
        options_text = f"\n<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{options_text}"

    await callback.message.edit_text(
        f"<b>–í–æ–ø—Ä–æ—Å {question.question_number}:</b> {question.question_text}\n"
        f"<b>–¢–∏–ø:</b> {question.question_type}\n"
        f"{options_text}\n"
        f"<b>–û—Ç–≤–µ—Ç:</b> {question.correct_answer}\n"
        f"<b>–ë–∞–ª–ª—ã:</b> {question.points}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_question_management_keyboard(question_id, is_first, is_last)
    )
    await state.set_state(TestCreationStates.waiting_for_question_action)
    await callback.answer()


@router.callback_query(F.data.startswith("move_q_"))
async def move_question(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑"""
    direction = callback.data.split(':')[0].split('_')[2]
    question_id = int(callback.data.split(':')[1])
    
    question = await session.get(TestQuestion, question_id)
    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    test_id = question.test_id
    questions = await get_test_questions(session, test_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    current_index = -1
    for i, q in enumerate(questions):
        if q.id == question_id:
            current_index = i
            break
            
    if direction == "up" and current_index > 0:
        questions[current_index], questions[current_index - 1] = questions[current_index - 1], questions[current_index]
    elif direction == "down" and current_index < len(questions) - 1:
        questions[current_index], questions[current_index + 1] = questions[current_index + 1], questions[current_index]
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
    for i, q in enumerate(questions):
        q.question_number = i + 1
        await session.commit()
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    fake_callback = type('FakeCallback', (), {
        'message': callback.message,
        'data': f"edit_test_questions:{test_id}",
        'answer': lambda: None
    })()
    await process_manage_questions(fake_callback, session)
    await callback.answer("–ü–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑–º–µ–Ω–µ–Ω")


@router.callback_query(F.data.startswith("q_stats:"))
async def question_statistics(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
    question_id = int(callback.data.split(':')[1])
    question = await session.get(TestQuestion, question_id)
    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    stats = await get_question_analytics(session, question_id)
    
    total = stats.get("total_answers", 0)
    correct = stats.get("correct_answers", 0)
    success_rate = (correct / total * 100) if total > 0 else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    test = await get_test_by_id(session, question.test_id)
    test_name = test.name if test else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç"
    
    if total == 0:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ —è–≤–Ω–æ
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É ‚Ññ{question.question_number}</b>

üß™ <b>–¢–µ—Å—Ç:</b> {test_name}
üìù <b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b> {question.question_text[:100]}{'...' if len(question.question_text) > 100 else ''}

üìà <b>–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
 üìä –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>0</b>
 ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>0</b>
 üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>0%</b>
 ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</b>

üí° <b>–°—Ç–∞—Ç—É—Å:</b> –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
‚ÑπÔ∏è <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å—Ç–∞–∂–µ—Ä—ã –Ω–∞—á–Ω—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.</i>"""
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É ‚Ññ{question.question_number}</b>

üß™ <b>–¢–µ—Å—Ç:</b> {test_name}
üìù <b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b> {question.question_text[:100]}{'...' if len(question.question_text) > 100 else ''}

üìà <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>
 üìä –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>{total}</b>
 ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{correct}</b> ({success_rate:.1f}%)
 ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{total - correct}</b>
 ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: <b>{stats.get("avg_time_seconds", 0):.1f}</b> —Å–µ–∫.

üí° <b>–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b>
{'üü¢ –õ–µ–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å' if success_rate >= 80 else 'üü° –°—Ä–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å' if success_rate >= 60 else 'üî¥ –°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å'}"""

    await callback.message.edit_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É", callback_data=f"select_question_for_edit:{question_id}")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_q_text:"))
async def process_edit_question_text(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"""
    question_id = int(callback.data.split(':')[1])
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_question_for_edit:{question_id}")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_question_edit)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_question_edit)
async def save_new_question_text(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    question_id = data['question_id_to_edit']
    await update_question(session, question_id, {"question_text": message.text.strip()})
    
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    fake_callback = type('FakeCallback', (), {
        'message': type('FakeMessage', (), {
            'edit_text': message.answer,
            'answer': lambda: None
        })(),
        'data': f"select_question_for_edit:{question_id}",
        'answer': lambda: None
    })()
    await select_question_for_edit(fake_callback, state, session)


@router.callback_query(F.data.startswith("edit_q_answer:"))
async def process_edit_question_answer(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    question_id = int(callback.data.split(':')[1])
    await state.update_data(question_id_to_edit=question_id)
    question = await session.get(TestQuestion, question_id)

    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    back_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_question_for_edit:{question_id}")]
    ])

    if question.question_type in ['text', 'number']:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b>:",
            parse_mode="HTML",
            reply_markup=back_button
        )
        await state.set_state(TestCreationStates.waiting_for_answer_edit)
    elif question.question_type in ['single_choice', 'multiple_choice', 'yes_no']:
        options_text = "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(question.options)])
        prompt = "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä** –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:"
        if question.question_type == 'multiple_choice':
            prompt = "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä–∞** –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä: 1, 3):"
        
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}\n\n{prompt}",
            parse_mode="HTML",
            reply_markup=back_button
        )
        await state.set_state(TestCreationStates.waiting_for_answer_edit)

    await callback.answer()


@router.message(TestCreationStates.waiting_for_answer_edit)
async def save_new_question_answer(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    question_id = data['question_id_to_edit']
    question = await session.get(TestQuestion, question_id)
    new_answer = message.text.strip()

    if question.question_type == 'multiple_choice':
        try:
            indices = [int(i.strip()) - 1 for i in new_answer.split(',')]
            options = question.options
            correct_answers = [options[i] for i in indices if 0 <= i < len(options)]
            if not correct_answers: raise ValueError
            new_answer = json.dumps(correct_answers)
        except (ValueError, IndexError):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3):")
            return
    elif question.question_type == 'single_choice':
        try:
            index = int(new_answer) - 1
            if not (0 <= index < len(question.options)): raise ValueError
            new_answer = question.options[index]
        except (ValueError, IndexError):
            await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(question.options)}.")
            return

    await update_question(session, question_id, {"correct_answer": new_answer})
    
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
    fake_callback = type('FakeCallback', (), {
        'message': type('FakeMessage', (), {
            'edit_text': message.answer,
            'answer': lambda: None
        })(),
        'data': f"select_question_for_edit:{question_id}",
        'answer': lambda: None
    })()
    await select_question_for_edit(fake_callback, state, session)


@router.callback_query(F.data.startswith("edit_q_points:"))
async def process_edit_question_points(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å"""
    question_id = int(callback.data.split(':')[1])
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>–±–∞–ª–ª–æ–≤</b> –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ).\n\n"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —à—Ç—Ä–∞—Ñ–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>-0.5</code>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_question_for_edit:{question_id}")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_points_edit)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_points_edit)
async def save_new_question_points(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤"""
    data = await state.get_data()
    question_id = data['question_id_to_edit']
    
    try:
        points = float(message.text.replace(',', '.').strip())
        if points == 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        penalty = 0
        if points < 0:
            penalty = abs(points)
            points = 0
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await update_question(session, question_id, {"points": points, "penalty_points": penalty})
    
    await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.")
    fake_callback = type('FakeCallback', (), {
        'message': type('FakeMessage', (), {
            'edit_text': message.answer,
            'answer': lambda: None
        })(),
        'data': f"select_question_for_edit:{question_id}",
        'answer': lambda: None
    })()
    await select_question_for_edit(fake_callback, state, session)


@router.callback_query(F.data.startswith("delete_q:"))
async def process_delete_question(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–£–¥–∞–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å"""
    question_id = int(callback.data.split(':')[1])
    
    question = await session.get(TestQuestion, question_id)
    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    test_id = question.test_id
    await delete_question(session, question_id)
    
    await callback.message.edit_text(
        f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ{question.question_number} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω.",
        parse_mode="HTML"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    fake_callback = type('FakeCallback', (), {
        'message': callback.message,
        'data': f"edit_test_questions:{test_id}",
        'answer': lambda: None
    })()
    await process_manage_questions(fake_callback, session)
    await callback.answer()


@router.callback_query(F.data == "back_to_q_list")
async def back_to_question_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    fake_callback = type('FakeCallback', (), {
        'message': callback.message,
        'data': f"edit_test_questions:{test_id}",
        'answer': lambda: None
    })()
    await process_manage_questions(fake_callback, session)
    await callback.answer()


@router.callback_query(F.data.startswith("test_results:"))
async def process_test_results(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    results = await get_test_results_summary(session, test_id)
    
    if not results:
        await callback.message.edit_text(
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b> {test.name}\n\n"
            "üìã –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —ç—Ç–æ—Ç —Ç–µ—Å—Ç.\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å—Ç–∞–∂–µ—Ä—ã –Ω–∞—á–Ω—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_tests")]
            ])
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_attempts = len(results)
        passed_count = sum(1 for r in results if r.is_passed)
        average_score = sum(r.score for r in results) / total_attempts
        
        results_text = f"""üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b> {test.name}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏: {passed_count} ({passed_count/total_attempts*100:.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score:.1f}

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i, result in enumerate(results[:5]):
            user = await get_user_by_id(session, result.user_id)
            status = "‚úÖ" if result.is_passed else "‚ùå"
            results_text += f"\n{status} {user.full_name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}: {result.score}/{result.max_possible_score} –±–∞–ª–ª–æ–≤"
        
        if total_attempts > 5:
            results_text += f"\n... –∏ –µ—â–µ {total_attempts - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        await callback.message.edit_text(
            results_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_tests")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("delete_test:"))
async def process_delete_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í!
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    has_permission = await check_user_permission(session, user.id, "edit_tests")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç <b>¬´{test.name}¬ª</b>?\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_test:{test_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"test:{test_id}")]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_test:"))
async def process_confirm_delete_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í!
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    has_permission = await check_user_permission(session, user.id, "edit_tests")
    if not has_permission:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    success = await delete_test(session, test_id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"–¢–µ—Å—Ç <b>¬´{test.name}¬ª</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_tests")]
            ])
        )
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "deleted test", 
            {"test_id": test_id, "test_name": test.name}
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("test_filter:"))
async def process_test_filter(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    filter_type = callback.data.split(':')[1]
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º broadcast - –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ broadcast.py
    if filter_type == "broadcast":
        return
    
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if filter_type == "my":
        tests = await get_tests_by_creator(session, user.id)
        list_title = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤</b>"
        empty_message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
    else:  # all
        tests = await get_all_active_tests(session)
        list_title = "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</b>"
        empty_message = "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."

    if not tests:
        await callback.message.edit_text(
            f"{list_title}\n\n{empty_message}",
            parse_mode="HTML",
            reply_markup=get_test_filter_keyboard()
        )
    else:
        tests_list = "\n\n".join([
            f"<b>{i+1}. {test.name}</b>\n"
            f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤\n"
            f"   üìÖ –°–æ–∑–¥–∞–Ω: {test.created_date.strftime('%d.%m.%Y')}\n"
            f"   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {await get_creator_name(session, test.creator_id)}"
            for i, test in enumerate(tests)
        ])
        
        await callback.message.edit_text(
            f"{list_title}\n\n{tests_list}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=get_simple_test_selection_keyboard(tests)
        )
    await callback.answer()

@router.callback_query(F.data == "back_to_tests")
async def process_back_to_tests(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤ (–∏–ª–∏ –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–∞)"""
    user = await get_user_by_tg_id(session, callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –†–µ–∫—Ä—É—Ç–µ—Ä—ã/—É–ø—Ä–∞–≤–ª—è—é—â–∏–µ (—Å –ø—Ä–∞–≤–æ–º create_tests) –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–∞
    if await check_user_permission(session, user.id, "create_tests"):
        await callback.message.edit_text(
            "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
            reply_markup=get_test_filter_keyboard()
        )
    # –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ (–±–µ–∑ –ø—Ä–∞–≤–∞ create_tests) –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    else:
        tests = await get_all_active_tests(session)
        if not tests:
            await callback.message.edit_text(
                "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.",
                parse_mode="HTML"
            )
        else:
            tests_list = "\n\n".join([
                f"<b>{i+1}. {test.name}</b>\n"
                f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω: {test.created_date.strftime('%d.%m.%Y')}\n"
                f"   üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {await get_creator_name(session, test.creator_id)}"
                for i, test in enumerate(tests)
            ])
            await callback.message.edit_text(
                f"üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n{tests_list}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:",
                parse_mode="HTML",
                reply_markup=get_simple_test_selection_keyboard(tests)
            )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
@router.callback_query(F.data.startswith("materials:no"))
async def process_no_materials(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    await state.update_data(material_link=None)
    await ask_for_description(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def process_cancel_test_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("edit_test_stage:"))
async def process_edit_test_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    test_id = int(callback.data.split(':')[1])
    stages = await get_all_stages(session)
    if not stages:
        await callback.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã —ç—Ç–∞–ø—ã —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.", show_alert=True)
        return

    await state.update_data(test_id_to_edit=test_id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —ç—Ç–∞–ø –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞:",
        reply_markup=get_stage_selection_keyboard(stages)
    )
    await state.set_state(TestCreationStates.waiting_for_new_stage)
    await callback.answer()

@router.callback_query(TestCreationStates.waiting_for_new_stage, F.data.startswith("stage:"))
async def save_new_test_stage(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —ç—Ç–∞–ø –¥–ª—è —Ç–µ—Å—Ç–∞"""
    stage_id_str = callback.data.split(':')[1]
    stage_id = int(stage_id_str) if stage_id_str != 'none' else None
    
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    
    await update_test(session, test_id, {"stage_id": stage_id})
    
    test = await get_test_by_id(session, test_id)
    stage_name = (await session.get(InternshipStage, stage_id)).name if stage_id else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    await callback.message.edit_text(
        f"‚úÖ –≠—Ç–∞–ø –¥–ª—è —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>¬´{stage_name}¬ª</b>.",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("preview_test:"))
async def preview_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    questions = await get_test_questions(session, test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    if not questions:
        await callback.message.edit_text(
            f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞: ¬´{test.name}¬ª</b>\n\n"
            "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> " + (test.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ") + "\n"
            f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {test.threshold_score} –∏–∑ {test.max_score} –±–∞–ª–ª–æ–≤\n"
            f"üîó <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> {'–ï—Å—Ç—å' if test.material_link else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}\n\n"
            "‚ùì <b>–í–æ–ø—Ä–æ—Å—ã:</b> –ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏¬ª, —á—Ç–æ–±—ã —Ç–µ—Å—Ç —Å—Ç–∞–ª –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"add_q_to_test:{test_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_test:{test_id}")]
            ])
        )
        await callback.answer()
        return

    preview_text = f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞: ¬´{test.name}¬ª</b>\n\n"
    for q in questions:
        preview_text += f"<b>–í–æ–ø—Ä–æ—Å {q.question_number} ({q.points} –±. / —à—Ç—Ä–∞—Ñ: {q.penalty_points} –±.):</b> {q.question_text}\n"
        if q.options:
            for i, opt in enumerate(q.options):
                prefix = "‚úîÔ∏è" if opt == q.correct_answer else "‚ûñ"
                preview_text += f"  {prefix} {opt}\n"
        else:
            preview_text += f"  <i>(–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q.correct_answer})</i>\n"
        preview_text += "\n"

    await callback.message.edit_text(
        preview_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_test:{test_id}")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_test_materials:"))
async def process_edit_test_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await state.update_data(test_id_to_edit=test_id)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {test.material_link or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å':",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="edit_materials:delete")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_new_materials)
    await callback.answer()

@router.callback_query(TestCreationStates.waiting_for_new_materials, F.data == "edit_materials:delete")
async def process_delete_materials(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    
    update_data = {
        "material_link": None,
        "material_file_path": None
    }
    
    await update_test(session, test_id, update_data)
    
    test = await get_test_by_id(session, test_id)
    await callback.message.edit_text(
        f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await state.clear()
    await callback.answer()

@router.message(TestCreationStates.waiting_for_new_materials)
async def save_new_materials(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    
    update_data = {}
    
    if message.document:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç
        file_info = f"–§–∞–π–ª: {message.document.file_name}"
        update_data = {
            "material_link": file_info,
            "material_file_path": message.document.file_id
        }
        await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{message.document.file_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ—Å—Ç—É.")
    elif message.text:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        if message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
            update_data = {
                "material_link": None,
                "material_file_path": None
            }
        else:
            update_data = {
                "material_link": message.text.strip(),
                "material_file_path": None
            }
    else:
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å'."
        )
        return
    
    await update_test(session, test_id, update_data)
    
    test = await get_test_by_id(session, test_id)
    await message.answer(
        f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=get_test_edit_menu(test_id)
    )
    await state.clear()

@router.callback_query(F.data.startswith("edit_test_settings:"))
async def process_test_settings(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.",
        parse_mode="HTML",
        reply_markup=get_test_settings_keyboard(test.id, test.shuffle_questions, test.max_attempts)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_shuffle:"))
async def toggle_shuffle_questions(callback: CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    new_shuffle_state = not test.shuffle_questions
    await update_test(session, test_id, {"shuffle_questions": new_shuffle_state})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç
    test.shuffle_questions = new_shuffle_state # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    
    shuffle_status = "‚úÖ <b>–í–∫–ª—é—á–µ–Ω–æ:</b> –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ." if test.shuffle_questions else "‚òëÔ∏è <b>–í—ã–∫–ª—é—á–µ–Ω–æ:</b> –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É."
    
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞</b>\n\n"
        f"<b>–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n{shuffle_status}\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.",
        parse_mode="HTML",
        reply_markup=get_test_settings_keyboard(test.id, test.shuffle_questions, test.max_attempts)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("answer_bool:"))
async def process_bool_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –î–∞/–ù–µ—Ç"""
    answer = callback.data.split(':')[1]
    await state.update_data(current_answer=answer)
    await callback.message.edit_text(
        "üî¢ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_points)
    await callback.answer()

@router.callback_query(F.data.startswith("edit_attempts:"))
async def process_edit_attempts(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await state.update_data(test_id_to_edit=test_id)
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{'–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ' if test.max_attempts == 0 else test.max_attempts}</b>.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–æ—Ç 1 –¥–æ 10). "
        "–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test_settings:{test_id}")]
        ])
    )
    await state.set_state(TestCreationStates.waiting_for_new_attempts)
    await callback.answer()

@router.message(TestCreationStates.waiting_for_new_attempts)
async def save_new_attempts(message: Message, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"""
    data = await state.get_data()
    test_id = data['test_id_to_edit']
    
    try:
        attempts = int(message.text.strip())
        if not (0 <= attempts <= 10):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
        
    await update_test(session, test_id, {"max_attempts": attempts})
    
    test = await get_test_by_id(session, test_id)
    await message.answer(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞ <b>¬´{test.name}¬ª</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"edit_test_settings:{test_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_test:{test_id}")]
        ])
    )
    await state.clear()

@router.callback_query(F.data.startswith("add_q_to_test:"))
async def add_question_to_test_handler(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É"""
    test_id = int(callback.data.split(':')[1])
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    questions = await get_test_questions(session, test_id)
    
    await state.update_data(
        test_id_to_edit=test_id, 
        questions=questions, 
        current_question_number=len(questions) + 1
    )
    
    await callback.message.edit_text(
        "–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_question_type_keyboard(is_creating_test=False)
    )
    await state.set_state(TestCreationStates.waiting_for_question_type)
    await callback.answer()

# =================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö "–ù–ê–ó–ê–î" –î–õ–Ø –§–û–†–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
# =================================

@router.callback_query(F.data.startswith("edit_test:"), TestCreationStates.waiting_for_new_test_name)
async def cancel_test_name_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split(':')[1])
    await state.clear()
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await process_edit_test_menu(callback, state, session)

@router.callback_query(F.data.startswith("edit_test:"), TestCreationStates.waiting_for_new_threshold)
async def cancel_threshold_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞"""
    test_id = int(callback.data.split(':')[1])
    await state.clear()
    await process_edit_test_menu(callback, state, session)

@router.callback_query(F.data.startswith("edit_test:"), TestCreationStates.waiting_for_new_materials)
async def cancel_materials_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    test_id = int(callback.data.split(':')[1])
    await state.clear()
    await process_edit_test_menu(callback, state, session)

@router.callback_query(F.data.startswith("edit_test_settings:"), TestCreationStates.waiting_for_new_attempts)
async def cancel_attempts_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"""
    test_id = int(callback.data.split(':')[1])
    await state.clear()
    await process_test_settings(callback, session)

@router.callback_query(F.data.startswith("select_question_for_edit:"), TestCreationStates.waiting_for_question_edit)
async def cancel_question_text_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    question_id = int(callback.data.split(':')[1])
    await state.clear()
    await select_question_for_edit(callback, state, session)

@router.callback_query(F.data.startswith("select_question_for_edit:"), TestCreationStates.waiting_for_points_edit)
async def cancel_question_points_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å"""
    question_id = int(callback.data.split(':')[1])
    await state.clear()
    await select_question_for_edit(callback, state, session)

@router.callback_query(F.data.startswith("select_question_for_edit:"), TestCreationStates.waiting_for_answer_edit)
async def cancel_question_answer_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    question_id = int(callback.data.split(':')[1])
    await state.clear()
    await select_question_for_edit(callback, state, session)

@router.callback_query(F.data == "cancel_current_question")
async def cancel_current_question_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    test_id = data.get('test_id_to_edit')
    questions = data.get('questions', [])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await state.update_data(
        current_question_type=None,
        current_question_text=None,
        current_options=None,
        current_answer=None
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if test_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
        context_text = "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Ç–µ—Å—Ç—É"
        is_creating_test = False
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
        context_text = "—Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
        is_creating_test = True
    
    await callback.message.edit_text(
        f"‚ùå <b>–û—Ç–º–µ–Ω–∞ {context_text}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_question_type_keyboard(is_creating_test=is_creating_test)
    )
    await state.set_state(TestCreationStates.waiting_for_question_type)
    await callback.answer()

@router.callback_query(F.data == "cancel_question")
async def cancel_question_creation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    test_id = data.get('test_id_to_edit')
    questions = data.get('questions', [])
    
    if test_id:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
        await state.clear()
        new_callback_data = f"edit_test_questions:{test_id}"
        fake_callback = type('FakeCallback', (), {
            'message': callback.message,
            'data': f"edit_test_questions:{test_id}",
            'answer': lambda: None
        })()
        await process_manage_questions(fake_callback, session)
    elif questions:
        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –∏ —É–∂–µ –µ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - 
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É: –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
        total_questions = len(questions)
        total_score = sum(q['points'] for q in questions)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await state.update_data(
            current_question_type=None,
            current_question_text=None,
            current_options=None,
            current_answer=None
        )
        
        await callback.message.edit_text(
            f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>\n\n"
            f"üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!</b>\n\n"
            f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞:\n"
            f" ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
            f" ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {total_score}\n\n"
            "‚ùì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞?",
            parse_mode="HTML",
            reply_markup=get_yes_no_keyboard("more_questions")
        )
        await state.set_state(TestCreationStates.waiting_for_more_questions)
    else:
        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –∏ –µ—â–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ - –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        await callback.message.edit_text(
            "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>\n\n"
            "–¢–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤. "
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.",
            parse_mode="HTML"
        )
        await state.clear()
    
    await callback.answer()

@router.callback_query(F.data.startswith("view_materials:"))
async def process_view_materials_admin(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞/–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    test_id = int(callback.data.split(':')[1])
    
    test = await get_test_by_id(session, test_id)
    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    if not test.material_link:
        await callback.message.edit_text(
            f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É: ¬´{test.name}¬ª</b>\n\n"
            "–ö —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
            ])
        )
        await callback.answer()
        return
    
    if test.material_file_path:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        try:
            await callback.message.answer_document(
                document=test.material_file_path,
                caption=f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É: ¬´{test.name}¬ª</b>\n\n"
                       f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.",
                parse_mode="HTML"
            )
            await callback.message.edit_text(
                f"‚úÖ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É: ¬´{test.name}¬ª</b>\n\n"
                f"üìé –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.\n\n"
                f"‚ÑπÔ∏è –°—Ç–∞–∂–µ—Ä—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫ —Ç–µ—Å—Ç—É.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
                ])
            )
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ Telegram.\n\n"
                f"üìå <b>–¢–µ—Å—Ç:</b> {test.name}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
                ])
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        await callback.message.edit_text(
            f"üìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —Ç–µ—Å—Ç—É: ¬´{test.name}¬ª</b>\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n{test.material_link}\n\n"
            f"‚ÑπÔ∏è –°—Ç–∞–∂–µ—Ä—ã —É–≤–∏–¥—è—Ç —ç—Ç—É –∂–µ —Å—Å—ã–ª–∫—É –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫ —Ç–µ—Å—Ç—É.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
            ])
        )
    
    await callback.answer()