"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (Task 7).
–í–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Ä–æ–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, change_trainee_to_employee, check_user_permission,
    get_employee_tests_from_recruiter, get_user_test_result
)
from handlers.auth import check_auth
from keyboards.keyboards import get_keyboard_by_role
from utils.logger import log_user_action, log_user_error

router = Router()


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Task 7: –ü–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞–∂–µ—Ä–∞ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# ===============================

@router.callback_query(F.data == "become_employee")
async def callback_become_employee(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º' –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–¢–ó —à–∞–≥ 12-5)"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç–∞–∂–µ—Ä
        user_roles = [role.name for role in user.roles]
        if "–°—Ç–∞–∂–µ—Ä" not in user_roles:
            await callback.message.edit_text("‚ùå –¢–æ–ª—å–∫–æ —Å—Ç–∞–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.")
            return
            
        # –ú–µ–Ω—è–µ–º —Ä–æ–ª—å —Å—Ç–∞–∂–µ—Ä–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        success = await change_trainee_to_employee(session, user.id, None)  # attestation_result_id –Ω–µ –Ω—É–∂–µ–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        
        if not success:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
            
        await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –õ–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 12-8)
        await show_employee_profile(callback, session, show_congratulation=True)
        
        log_user_action(callback.from_user.id, "became_employee", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —Å—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        log_user_error(callback.from_user.id, "become_employee_error", str(e))


async def show_employee_profile(callback: CallbackQuery, session: AsyncSession, show_congratulation: bool = False):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó (—à–∞–≥ 12-8)
    show_congratulation - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        profile_text = (
            "<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {user.full_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"üÜî <b>Telegram ID:</b> {user.tg_id}\n"
            f"üë§ <b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üëë <b>–†–æ–ª–∏:</b> {', '.join([role.name for role in user.roles])}\n"
            f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in user.groups]) if user.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {user.work_object.name if user.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üé±<b>–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user.id}"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –õ–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="knowledge_base")]
        ])
        
        await callback.message.edit_text(
            profile_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if show_congratulation:
            # –û–±–Ω–æ–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee_keyboard = get_keyboard_by_role(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫"])

            await callback.message.answer(
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!",
                parse_mode="HTML",
                reply_markup=employee_keyboard
            )
        
        log_user_action(callback.from_user.id, "employee_profile_shown", "–ü–æ–∫–∞–∑–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        log_user_error(callback.from_user.id, "show_employee_profile_error", str(e))


# –£–î–ê–õ–ï–ù–û: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ handlers/knowledge_base.py


@router.callback_query(F.data == "back_to_employee_profile")
async def callback_back_to_employee_profile(callback: CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        await show_employee_profile(callback, session, show_congratulation=False)

    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é")
        log_user_error(callback.from_user.id, "back_to_profile_error", str(e))


@router.message(F.text == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def cmd_employee_profile(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ' –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        user_roles = [role.name for role in user.roles]
        if "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" not in user_roles:
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            "<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"üßë <b>–§–ò–û:</b> {user.full_name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"üÜî <b>Telegram ID:</b> {user.tg_id}\n"
            f"üë§ <b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üëë <b>–†–æ–ª–∏:</b> {', '.join([role.name for role in user.roles])}\n"
            f"üóÇÔ∏è<b>–ì—Ä—É–ø–ø–∞:</b> {', '.join([group.name for group in user.groups]) if user.groups else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìç<b>2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã:</b> {user.work_object.name if user.work_object else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üé±<b>–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user.id}"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –õ–ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="knowledge_base")]
        ])

        await message.answer(
            profile_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        log_user_action(user.tg_id, "employee_data_viewed", "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        log_user_error(message.from_user.id, "employee_profile_error", str(e))


@router.message(F.text == "–ú–æ–∏ —Ç–µ—Å—Ç—ã")
async def cmd_employee_tests(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ú–æ–∏ —Ç–µ—Å—Ç—ã' –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        is_auth = await check_auth(message, state, session)
        if not is_auth:
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        has_permission = await check_user_permission(session, user.id, "take_tests")
        if not has_permission:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¢–û–õ–¨–ö–û –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å–¥–∞—á–∏)
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä –ü–û–°–õ–ï –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        # –° –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏
        available_tests = await get_employee_tests_from_recruiter(session, user.id, exclude_completed=False)
        
        if not available_tests:
            await message.answer(
                "üìã <b>–ú–æ–∏ —Ç–µ—Å—Ç—ã</b>\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞.\n\n"
                "üìù <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç—ã:</b>\n"
                "‚Ä¢ –†–µ–∫—Ä—É—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
                "‚Ä¢ –¢–µ—Å—Ç—ã –æ—Ç –≤—Ä–µ–º–µ–Ω —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è\n"
                "‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞.",
                parse_mode="HTML"
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å–¥–∞—á–∏)
        tests_list = []
        for i, test in enumerate(available_tests, 1):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            test_result = await get_user_test_result(session, user.id, test.id)
            if test_result and test_result.is_passed:
                status = f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω ({test_result.score}/{test_result.max_possible_score} –±–∞–ª–ª–æ–≤)"
                action_text = "–ü–µ—Ä–µ—Å–¥–∞—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
            else:
                status = "üìã –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"
                action_text = "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
            
            tests_list.append(
                f"<b>{i}. {test.name}</b>\n"
                f"   üéØ –ü–æ—Ä–æ–≥: {test.threshold_score}/{test.max_score} –±–∞–ª–ª–æ–≤\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"   üìù {test.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )
        
        tests_display = "\n\n".join(tests_list)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ—Å–¥–∞—á—É)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for test in available_tests:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            test_result = await get_user_test_result(session, user.id, test.id)
            if test_result and test_result.is_passed:
                button_text = f"üîÑ –ü–µ—Ä–µ—Å–¥–∞—Ç—å: {test.name}"
            else:
                button_text = f"üöÄ –ü—Ä–æ–π—Ç–∏: {test.name}"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"take_test:{test.id}"
                )
            ])
        
        await message.answer(
            f"üìã <b>–ú–æ–∏ —Ç–µ—Å—Ç—ã</b>\n\n"
            f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {user.full_name}\n"
            f"üìä <b>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</b> {len(available_tests)}\n\n"
            f"{tests_display}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        log_user_action(user.tg_id, "employee_tests_viewed", f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: {len(available_tests)}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        log_user_error(message.from_user.id, "employee_tests_error", str(e))
