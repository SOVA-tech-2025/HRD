"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º.
–í–∫–ª—é—á–∞–µ—Ç workflow –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏, –≥—Ä—É–ø–ø—ã, –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã.
"""

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, get_unactivated_users, get_all_roles, 
    get_all_groups, get_all_objects, activate_user,
    get_user_by_id, check_user_permission
)
from keyboards.keyboards import get_main_menu_keyboard
from states.states import UserActivationStates
from utils.logger import log_user_action, log_user_error
from utils.bot_commands import set_bot_commands
from handlers.auth import check_auth

router = Router()

@router.message(F.text == "–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def cmd_new_users_list(message: Message, state: FSMContext, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    is_auth = await check_auth(message, state, session)
    if not is_auth:
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    user = await get_user_by_tg_id(session, message.from_user.id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if not await check_user_permission(session, user.id, "manage_groups"):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    unactivated_users = await get_unactivated_users(session)
    
    if not unactivated_users:
        await message.answer(
            "üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –Ω–µ—Ç.",
            parse_mode="HTML"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for user_item in unactivated_users:
        registration_date = user_item.registration_date.strftime('%d.%m.%Y') if user_item.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        button_text = f"{user_item.full_name} ({registration_date})"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"activate_user:{user_item.id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await message.answer(
        "üìã <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await state.set_state(UserActivationStates.waiting_for_user_selection)
    log_user_action(message.from_user.id, message.from_user.username, "viewed new users list")


@router.callback_query(UserActivationStates.waiting_for_user_selection, F.data.startswith("activate_user:"))
async def process_user_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    user_id = int(callback.data.split(':')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_by_id(session, user_id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user.is_activated:
        await callback.message.edit_text(
            f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üôã‚Äç‚ôÇÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"üìä–°—Ç–∞—Ç—É—Å: –£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            parse_mode="HTML"
        )
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_user_id=user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è)
    all_roles = await get_all_roles(session)
    available_roles = all_roles
    
    if not available_roles:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for role in available_roles:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=role.name,
                callback_data=f"select_role:{role.name}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"üÜï–£–∫–∞–∂–∏—Ç–µ üëë<b>—Ä–æ–ª—å</b> –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚¨áÔ∏è\n"
        f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}",
        reply_markup=keyboard
    )
    
    await state.set_state(UserActivationStates.waiting_for_role_selection)
    await callback.answer()


@router.callback_query(UserActivationStates.waiting_for_role_selection, F.data.startswith("select_role:"))
async def process_role_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role_name = callback.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_role=role_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state_data = await state.get_data()
    user_id = state_data['selected_user_id']
    user = await get_user_by_id(session, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    groups = await get_all_groups(session)
    
    if not groups:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã.")
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for group in groups:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=group.name,
                callback_data=f"select_group:{group.id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"üÜï–í—ã–±–µ—Ä–∏—Ç–µ üóÇÔ∏è<b>–≥—Ä—É–ø–ø—É</b> –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚¨áÔ∏è\n"
        f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"üëë–†–æ–ª—å: {role_name}",
        reply_markup=keyboard
    )
    
    await state.set_state(UserActivationStates.waiting_for_group_selection)
    await callback.answer()


@router.callback_query(UserActivationStates.waiting_for_group_selection, F.data.startswith("select_group:"))
async def process_group_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split(':')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_group_id=group_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_id = state_data['selected_user_id']
    role_name = state_data['selected_role']
    
    user = await get_user_by_id(session, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    from database.db import get_group_by_id
    group = await get_group_by_id(session, group_id)
    group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    objects = await get_all_objects(session)
    
    if not objects:
        await callback.message.edit_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã.")
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for obj in objects:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=obj.name,
                callback_data=f"select_internship_object:{obj.id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"üÜï–í—ã–±–µ—Ä–∏—Ç–µ üìç<b>–æ–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏</b> –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚¨áÔ∏è\n"
        f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"üëë–†–æ–ª—å: {role_name}\n"
        f"üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {group_name}",
        reply_markup=keyboard
    )
    
    await state.set_state(UserActivationStates.waiting_for_internship_object_selection)
    await callback.answer()


@router.callback_query(UserActivationStates.waiting_for_internship_object_selection, F.data.startswith("select_internship_object:"))
async def process_internship_object_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"""
    internship_object_id = int(callback.data.split(':')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_internship_object_id=internship_object_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_id = state_data['selected_user_id']
    role_name = state_data['selected_role']
    group_id = state_data['selected_group_id']
    
    user = await get_user_by_id(session, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    from database.db import get_group_by_id, get_object_by_id
    group = await get_group_by_id(session, group_id)
    internship_object = await get_object_by_id(session, internship_object_id)
    
    group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    internship_object_name = internship_object.name if internship_object else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    objects = await get_all_objects(session)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for obj in objects:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=obj.name,
                callback_data=f"select_work_object:{obj.id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"üÜï–í—ã–±–µ—Ä–∏—Ç–µ üìç<b>–æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã</b> –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚¨áÔ∏è\n"
        f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"üëë–†–æ–ª—å: {role_name}\n"
        f"üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"üìç1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ {internship_object_name}",
        reply_markup=keyboard
    )
    
    await state.set_state(UserActivationStates.waiting_for_work_object_selection)
    await callback.answer()


@router.callback_query(UserActivationStates.waiting_for_work_object_selection, F.data.startswith("select_work_object:"))
async def process_work_object_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    work_object_id = int(callback.data.split(':')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_work_object_id=work_object_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_id = state_data['selected_user_id']
    role_name = state_data['selected_role']
    group_id = state_data['selected_group_id']
    internship_object_id = state_data['selected_internship_object_id']
    
    user = await get_user_by_id(session, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    from database.db import get_group_by_id, get_object_by_id
    group = await get_group_by_id(session, group_id)
    internship_object = await get_object_by_id(session, internship_object_id)
    work_object = await get_object_by_id(session, work_object_id)
    
    group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    internship_object_name = internship_object.name if internship_object else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    work_object_name = work_object.name if work_object else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_activation")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_activation")]
    ])
    
    registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"üÜï–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?üÜï\n"
        f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"üëë–†–æ–ª—å: {role_name}\n"
        f"üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"üìç1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ {internship_object_name}\n"
        f"üìç2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã {work_object_name}",
        reply_markup=keyboard
    )
    
    await state.set_state(UserActivationStates.waiting_for_activation_confirmation)
    await callback.answer()


@router.callback_query(UserActivationStates.waiting_for_activation_confirmation, F.data == "confirm_activation")
async def process_activation_confirmation(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_id = state_data['selected_user_id']
    role_name = state_data['selected_role']
    group_id = state_data['selected_group_id']
    internship_object_id = state_data['selected_internship_object_id']
    work_object_id = state_data['selected_work_object_id']
    
    user = await get_user_by_id(session, user_id)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await activate_user(
        session, user_id, role_name, group_id, 
        internship_object_id, work_object_id, bot
    )
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
        from database.db import get_group_by_id, get_object_by_id
        group = await get_group_by_id(session, group_id)
        internship_object = await get_object_by_id(session, internship_object_id)
        work_object = await get_object_by_id(session, work_object_id)
        
        group_name = group.name if group else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        internship_object_name = internship_object.name if internship_object else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        work_object_name = work_object.name if work_object else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        await callback.message.edit_text(
            f"‚úÖ–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç-–±–æ—Ç—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
            f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
            f"üëë–†–æ–ª—å: {role_name}\n"
            f"üóÇÔ∏è–ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üìç1Ô∏è‚É£–û–±—ä–µ–∫—Ç —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ {internship_object_name}\n"
            f"üìç2Ô∏è‚É£–û–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç—ã {work_object_name}",
            reply_markup=get_main_menu_keyboard()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await set_bot_commands(bot)
        except Exception as e:
            log_user_error(callback.from_user.id, callback.from_user.username, "bot commands update error", str(e))
        
        log_user_action(
            callback.from_user.id, 
            callback.from_user.username, 
            "activated user", 
            {
                "activated_user_id": user_id, 
                "role": role_name, 
                "group_id": group_id,
                "internship_object_id": internship_object_id,
                "work_object_id": work_object_id
            }
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        
        log_user_error(
            callback.from_user.id, 
            callback.from_user.username, 
            "user activation failed", 
            {"user_id": user_id}
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(UserActivationStates.waiting_for_activation_confirmation, F.data == "cancel_activation")
async def process_activation_cancellation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state_data = await state.get_data()
    user_id = state_data['selected_user_id']
    user = await get_user_by_id(session, user_id)
    
    registration_date = user.registration_date.strftime('%d.%m.%Y %H:%M') if user.registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"‚ùå–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"üôã‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
        f"üóìÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É\n"
        f"¬´–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π¬ª",
        reply_markup=get_main_menu_keyboard()
    )
    
    log_user_action(
        callback.from_user.id, 
        callback.from_user.username, 
        "cancelled user activation", 
        {"user_id": user_id}
    )
    
    await state.clear()
    await callback.answer()
