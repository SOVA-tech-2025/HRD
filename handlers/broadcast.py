"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º (Task 8).
–í–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞, –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import (
    get_user_by_tg_id, check_user_permission, get_all_active_tests,
    get_test_by_id, get_all_groups, get_group_by_id, broadcast_test_to_groups,
    get_employees_in_group
)
from handlers.auth import check_auth
from states.states import BroadcastStates
from keyboards.keyboards import (
    get_broadcast_test_selection_keyboard, get_broadcast_groups_selection_keyboard,
    get_broadcast_success_keyboard, get_main_menu_keyboard, get_keyboard_by_role
)
from utils.logger import log_user_action, log_user_error

router = Router()


# ===============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Task 8: –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤
# ===============================

@router.message(F.text.in_(["–†–∞—Å—Å—ã–ª–∫–∞ ‚úàÔ∏è", "–†–∞—Å—Å—ã–ª–∫–∞"]))
async def cmd_broadcast(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–∞—Å—Å—ã–ª–∫–∞ ‚úàÔ∏è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
        user = await get_user_by_tg_id(session, message.from_user.id)
        if not user:
            await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã)
        has_permission = await check_user_permission(session, user.id, "create_tests")
        if not has_permission:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await get_all_active_tests(session)
        
        if not tests:
            await message.answer(
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –®–∞–≥ 4 –¢–ó: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
        await message.answer(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üü°<b>–ö–∞–∫–æ–π —Ç–µ—Å—Ç —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>\n\n"
            "üìù <b>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, —Å—Ç–∞–∂–µ—Ä–∞–º –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞üëá",
            parse_mode="HTML",
            reply_markup=get_broadcast_test_selection_keyboard(tests)
        )
        
        await state.set_state(BroadcastStates.selecting_test)
        log_user_action(user.tg_id, "broadcast_started", "–ù–∞—á–∞—Ç–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(message.from_user.id, "broadcast_start_error", str(e))


@router.callback_query(F.data == "test_filter:broadcast")
async def callback_start_broadcast(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–®–∞–≥ 3 –¢–ó: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä—ã)
        has_permission = await check_user_permission(session, user.id, "create_tests")
        if not has_permission:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Å—Ç–æ–≤.\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = await get_all_active_tests(session)
        
        if not tests:
            await callback.message.edit_text(
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –®–∞–≥ 4 –¢–ó: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            "üü°<b>–ö–∞–∫–æ–π —Ç–µ—Å—Ç —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>\n\n"
            "üìù <b>–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, —Å—Ç–∞–∂–µ—Ä–∞–º –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞üëá",
            parse_mode="HTML",
            reply_markup=get_broadcast_test_selection_keyboard(tests)
        )
        
        await state.set_state(BroadcastStates.selecting_test)
        log_user_action(user.tg_id, "broadcast_started", "–ù–∞—á–∞—Ç–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(callback.from_user.id, "broadcast_start_error", str(e))


@router.callback_query(F.data.startswith("broadcast_test:"), BroadcastStates.selecting_test)
async def callback_select_broadcast_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–®–∞–≥ 5-6 –¢–ó: –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø"""
    try:
        await callback.answer()
        
        test_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        test = await get_test_by_id(session, test_id)
        if not test:
            await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        await state.update_data(selected_test_id=test_id, selected_groups=[])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = await get_all_groups(session)
        
        if not groups:
            await callback.message.edit_text(
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                f"üü¢<b>–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {test.name}\n\n"
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –®–∞–≥ 6 –¢–ó: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø
        await callback.message.edit_text(
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            f"üü¢<b>–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>  {test.name}\n"
            "üü°<b>–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Çüëá</b>",
            parse_mode="HTML",
            reply_markup=get_broadcast_groups_selection_keyboard(groups, [])
        )
        
        await state.set_state(BroadcastStates.selecting_groups)
        log_user_action(callback.from_user.id, "broadcast_test_selected", f"–í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {test.name}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ—Å—Ç–∞")
        log_user_error(callback.from_user.id, "broadcast_test_select_error", str(e))


@router.callback_query(F.data.startswith("broadcast_group:"), BroadcastStates.selecting_groups)
async def callback_toggle_broadcast_group(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–®–∞–≥ 7-10 –¢–ó: –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        await callback.answer()
        
        group_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        selected_test_id = data.get("selected_test_id")
        selected_groups = data.get("selected_groups", [])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –∏ –≥—Ä—É–ø–ø–µ
        test = await get_test_by_id(session, selected_test_id)
        group = await get_group_by_id(session, group_id)
        
        if not test or not group:
            await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        if group_id in selected_groups:
            selected_groups.remove(group_id)
        else:
            selected_groups.append(group_id)
        
        await state.update_data(selected_groups=selected_groups)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        selected_group_names = []
        for gid in selected_groups:
            g = await get_group_by_id(session, gid)
            if g:
                selected_group_names.append(g.name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        groups_text = "; ".join(selected_group_names) if selected_group_names else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        all_groups = await get_all_groups(session)
        
        if selected_group_names:
            # –®–∞–≥–∏ 8-10 –¢–ó: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
            message_text = (
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                f"üü¢<b>–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>  {test.name}\n"
                f"üü¢<b>–ì—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {groups_text}\n\n"
                "üü°<b>–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≥—Ä—É–ø–ø—É –∫ –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ?</b>\n"
                "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µüëá"
            )
        else:
            # –®–∞–≥ 6 –¢–ó: –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
            message_text = (
                "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
                f"üü¢<b>–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>  {test.name}\n"
                "üü°<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Çüëá</b>"
            )
        
        await callback.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=get_broadcast_groups_selection_keyboard(all_groups, selected_groups)
        )
        
        log_user_action(callback.from_user.id, "broadcast_group_toggled", 
                       f"–ì—Ä—É–ø–ø–∞ {group.name} {'–¥–æ–±–∞–≤–ª–µ–Ω–∞' if group_id in selected_groups else '—É–±—Ä–∞–Ω–∞'}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")
        log_user_error(callback.from_user.id, "broadcast_group_toggle_error", str(e))


@router.callback_query(F.data == "broadcast_send", BroadcastStates.selecting_groups)
async def callback_send_broadcast(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """–®–∞–≥ 11-13 –¢–ó: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        data = await state.get_data()
        selected_test_id = data.get("selected_test_id")
        selected_groups = data.get("selected_groups", [])
        
        if not selected_test_id or not selected_groups:
            await callback.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—ã", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_tg_id(session, callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –®–∞–≥ 12 –¢–ó: –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        result = await broadcast_test_to_groups(
            session, selected_test_id, selected_groups, user.id, bot
        )
        
        if not result["success"]:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                parse_mode="HTML",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test = await get_test_by_id(session, selected_test_id)
        groups_text = "; ".join(result["group_names"])
        
        # –®–∞–≥ 13 –¢–ó: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        success_message = (
            "‚úâÔ∏è<b>–†–ï–î–ê–ö–¢–û–† –†–ê–°–°–´–õ–ö–ò</b>‚úâÔ∏è\n\n"
            f"üü¢<b>–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>  {test.name}\n"
            f"üü¢<b>–ì—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {groups_text}\n\n"
            "‚úÖ<b>–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö: {result['total_users']}\n"
            f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['total_sent']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result['failed_sends']}"
        )
        
        await callback.message.edit_text(
            success_message,
            parse_mode="HTML",
            reply_markup=get_broadcast_success_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        log_user_action(callback.from_user.id, "broadcast_completed", 
                       f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Ç–µ—Å—Ç {test.name}, –≥—Ä—É–ø–ø—ã {groups_text}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['total_sent']}")
        
    except Exception as e:
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")
        log_user_error(callback.from_user.id, "broadcast_send_error", str(e))


