from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton


def get_contact_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


def get_role_selection_keyboard() -> InlineKeyboardMarkup:
    import os
    allow_auto_role = os.getenv("ALLOW_AUTO_ROLE_ASSIGNMENT", "false").lower() == "true"
    default_role = os.getenv("DEFAULT_ROLE", "–°—Ç–∞–∂–µ—Ä")
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
    all_roles = [
        ("–°—Ç–∞–∂—ë—Ä", "–°—Ç–∞–∂–µ—Ä"),
        ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"), 
        ("–†–µ–∫—Ä—É—Ç–µ—Ä", "–†–µ–∫—Ä—É—Ç–µ—Ä")
    ]
    
    keyboard_buttons = []
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ä–æ–ª—å –≤–≤–µ—Ä—Ö—É
    if allow_auto_role:
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üöÄ {default_role} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ä–æ–ª—å)", 
            callback_data=f"role:{default_role}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π
    for display_name, role_name in all_roles:
        if not (allow_auto_role and role_name == default_role):
            keyboard_buttons.append([InlineKeyboardButton(text=display_name, callback_data=f"role:{role_name}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def get_trainee_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton(text="–ú–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_recruiter_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"), KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤")],
            [KeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –°—Ç–∞–∂–µ—Ä–æ–≤")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_employee_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–ú–æ–∏ —Å—Ç–∞–∂–µ—Ä—ã")],
            [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_manager_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –°—Ç–∞–∂–µ—Ä–æ–≤")],
            [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–µ–π")],
            [KeyboardButton(text="–ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_user_selection_keyboard(users: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    keyboard = []
    
    for user in users:
        button = InlineKeyboardButton(
            text=f"{user.full_name} ({user.username or '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})",
            callback_data=f"user:{user.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_user_action_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data=f"change_role:{user_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_users")]
        ]
    )
    return keyboard


def get_role_change_keyboard(user_id: int, roles: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    keyboard = []
    
    for role in roles:
        button = InlineKeyboardButton(
            text=role.name,
            callback_data=f"set_role:{user_id}:{role.name}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_role_change:{user_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_confirmation_keyboard(user_id: int, role_name: str, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{action}:{user_id}:{role_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_role_change:{user_id}")]
        ]
    )
    return keyboard


def get_keyboard_by_role(role_name: str) -> ReplyKeyboardMarkup:
    if role_name == "–°—Ç–∞–∂–µ—Ä":
        return get_trainee_keyboard()
    elif role_name == "–†–µ–∫—Ä—É—Ç–µ—Ä":
        return get_recruiter_keyboard()
    elif role_name == "–°–æ—Ç—Ä—É–¥–Ω–∏–∫":
        return get_employee_keyboard()
    elif role_name == "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π":
        return get_manager_keyboard()
    else:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–ü–æ–º–æ—â—å")]],
            resize_keyboard=True
        )


def get_role_management_keyboard(roles: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏, —á—å–∏ –ø—Ä–∞–≤–∞ –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è"""

    keyboard = []
    
    for role in roles:
        button = InlineKeyboardButton(
            text=role.name,
            callback_data=f"manage_role_permissions:{role.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_permission_action_keyboard(role_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–∏ """

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–∞—Å—à–∏—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏", callback_data=f"add_permission:{role_id}")],
            [InlineKeyboardButton(text="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏", callback_data=f"remove_permission:{role_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π", callback_data="back_to_roles")]
        ]
    )
    return keyboard


def get_permission_selection_keyboard(permissions: list, role_id: int, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∞ """

    keyboard = []
    
    for permission in permissions:
        button = InlineKeyboardButton(
            text=f"{permission.description}",
            callback_data=f"select_permission:{action}:{role_id}:{permission.name}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_permission_selection:{role_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_permission_confirmation_keyboard(role_id: int, permission_name: str, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤"""
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_permission:{action}:{role_id}:{permission_name}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_permission_confirmation:{role_id}:{permission_name}")]
        ]
    )
    return keyboard


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–°–¢–ê–ú–ò
# =================================

def get_yes_no_keyboard(prefix: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç"""
    keyboard_buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}:yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"{prefix}:no")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    if prefix in ["more_questions", "materials"]:
        keyboard_buttons.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def get_question_type_keyboard(is_creating_test: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard_buttons = [
        [InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç)", callback_data="q_type:text")],
        [InlineKeyboardButton(text="–í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", callback_data="q_type:single_choice")],
        [InlineKeyboardButton(text="–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", callback_data="q_type:multiple_choice")],
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç '–î–∞' –∏–ª–∏ '–ù–µ—Ç'", callback_data="q_type:yes_no")]
    ]
    
    # –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if is_creating_test:
        keyboard_buttons.append([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞", callback_data="cancel")])
    else:
        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_question")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard


def get_test_edit_menu(test_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ/–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_meta:{test_id}"),
                InlineKeyboardButton(text="üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"edit_test_materials:{test_id}")
            ],
            [
                InlineKeyboardButton(text="‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data=f"edit_test_questions:{test_id}"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"edit_test_settings:{test_id}")
            ],
            [InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_test:{test_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É", callback_data=f"test:{test_id}")]
        ]
    )
    return keyboard


def get_test_filter_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóÇÔ∏è –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="test_filter:my"),
                InlineKeyboardButton(text="üìö –í—Å–µ —Ç–µ—Å—Ç—ã", callback_data="test_filter:all")
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
    )
    return keyboard


def get_test_selection_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"{test.name} (–º–∞–∫—Å. {test.max_score} –±–∞–ª–ª–æ–≤)",
            callback_data=f"test:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_question_edit_keyboard(question_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", callback_data=f"edit_question_text:{question_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_question_answer:{question_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"edit_question_points:{question_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_question:{question_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_questions")]
        ]
    )
    return keyboard


def get_stage_selection_keyboard(stages: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"""
    keyboard = []
    
    for stage in stages:
        button = InlineKeyboardButton(
            text=f"{stage.order_number}. {stage.name}",
            callback_data=f"stage:{stage.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="üîì –¢–µ—Å—Ç –±–µ–∑ —ç—Ç–∞–ø–∞", callback_data="stage:none")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_actions_keyboard(test_id: int, user_role: str = "creator") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    keyboard = []
    
    if user_role == "creator":
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–µ—Å—Ç–∞ (—Ä–µ–∫—Ä—É—Ç–µ—Ä–∞)
        keyboard.extend([
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_test:{test_id}")],
            [InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"view_materials:{test_id}")],
            [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"test_results:{test_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_test:{test_id}")]
        ])
    else:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
        keyboard.extend([
            [InlineKeyboardButton(text="üîê –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å—Ç–∞–∂–µ—Ä–∞–º", callback_data=f"grant_access_to_test:{test_id}")],
            [InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"view_materials:{test_id}")],
            [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"test_results:{test_id}")]
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tests")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_question_selection_keyboard(questions: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    keyboard = []
    
    for question in questions:
        button = InlineKeyboardButton(
            text=f"–í–æ–ø—Ä–æ—Å {question.question_number}",
            callback_data=f"question:{question.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ù–ê–°–¢–ê–í–ù–ò–ß–ï–°–¢–í–ê
# =================================

def get_trainee_selection_keyboard(trainees: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤"""
    keyboard = []
    
    for trainee in trainees:
        button = InlineKeyboardButton(
            text=f"{trainee.full_name}",
            callback_data=f"trainee:{trainee.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mentor_selection_keyboard(mentors: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤"""
    keyboard = []
    
    for mentor in mentors:
        button = InlineKeyboardButton(
            text=f"{mentor.full_name}",
            callback_data=f"mentor:{mentor.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_assignment_confirmation_keyboard(mentor_id: int, trainee_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_assignment:{mentor_id}:{trainee_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_assignment")]
        ]
    )
    return keyboard


def get_trainee_actions_keyboard(trainee_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"add_test_access:{trainee_id}")],
            [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", callback_data=f"trainee_results:{trainee_id}")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"trainee_profile:{trainee_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trainees")]
        ]
    )
    return keyboard


def get_test_access_keyboard(tests: list, trainee_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"{test.name}",
            callback_data=f"grant_access:{trainee_id}:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–û–í
# =================================

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_test_start_keyboard —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º

def get_test_navigation_keyboard(current_question: int, total_questions: int, test_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç—É"""
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if current_question > 1:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_question:{test_id}"))
    if current_question < total_questions:
        nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"next_question:{test_id}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if current_question == total_questions:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"finish_test:{test_id}")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"cancel_test:{test_id}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# =================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
# =================================

def get_unassigned_trainees_keyboard(trainees: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–∂–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"""
    keyboard = []
    
    for trainee in trainees:
        button = InlineKeyboardButton(
            text=f"{trainee.full_name}",
            callback_data=f"unassigned_trainee:{trainee.id}"
        )
        keyboard.append([button])
    
    if not trainees:
        keyboard.append([InlineKeyboardButton(text="‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤", callback_data="info")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_start_keyboard(test_id: int, has_previous_result: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    start_text = "üîÑ –ü—Ä–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ" if has_previous_result else "üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
    keyboard.append([InlineKeyboardButton(text=start_text, callback_data=f"start_test:{test_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    keyboard.append([InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"view_materials:{test_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="back_to_test_list")
    ]
    keyboard.append(navigation_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_selection_for_taking_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"üìã {test.name}",
            callback_data=f"test:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_question_management_keyboard(question_id: int, is_first: bool, is_last: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º"""
    nav_buttons = []
    if not is_first:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data=f"move_q_up:{question_id}"))
    if not is_last:
        nav_buttons.append(InlineKeyboardButton(text="‚¨áÔ∏è", callback_data=f"move_q_down:{question_id}"))

    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_q_text:{question_id}")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_q_answer:{question_id}")],
        [InlineKeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"edit_q_points:{question_id}")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"q_stats:{question_id}")],
        nav_buttons,
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_q:{question_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_q_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_test_settings_keyboard(test_id: int, shuffle: bool, attempts: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞"""
    shuffle_text = "‚úÖ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã" if shuffle else "‚òëÔ∏è –ù–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã"
    
    if attempts == 0:
        attempts_text = "‚ôæÔ∏è –ü–æ–ø—ã—Ç–∫–∏: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ"
    else:
        attempts_text = f"üî¢ –ü–æ–ø—ã—Ç–∫–∏: {attempts}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=shuffle_text, callback_data=f"toggle_shuffle:{test_id}")],
            [InlineKeyboardButton(text=attempts_text, callback_data=f"edit_attempts:{test_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit_test:{test_id}")]
        ]
    )
    return keyboard


def get_finish_options_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", callback_data="finish_options")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞", callback_data="cancel_current_question")]
        ]
    )
    return keyboard


def format_help_message(role_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–∏"""
    base_text = "ü§ñ <b>–°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ HRD-–±–æ—Ç–∞</b>\n\n"
    
    role_specific_help = {
        "–°—Ç–∞–∂–µ—Ä": """üéì <b>–í—ã ‚Äî —Å—Ç–∞–∂–µ—Ä.</b>
–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –≤–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/my_tests</code> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º —Ç–µ—Å—Ç—ã.
‚Ä¢ <code>/my_results</code> ‚Äî —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.
‚Ä¢ <code>/my_mentor</code> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ.
""",
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": """üë®‚Äçüè´ <b>–í—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.</b>
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–º –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/my_trainees</code> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.
‚Ä¢ <code>/all_tests</code> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Ö —Å—Ç–∞–∂–µ—Ä–∞–º.
""",
        "–†–µ–∫—Ä—É—Ç–µ—Ä": """üëî <b>–í—ã ‚Äî —Ä–µ–∫—Ä—É—Ç–µ—Ä.</b>
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (—Ç–µ—Å—Ç—ã) –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/create_test</code> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞.
‚Ä¢ <code>/manage_tests</code> ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å, —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É).
‚Ä¢ <code>/assign_mentor</code> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –Ω–æ–≤–æ–º—É —Å—Ç–∞–∂–µ—Ä—É.
""",
        "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π": """üîß <b>–í—ã ‚Äî —É–ø—Ä–∞–≤–ª—è—é—â–∏–π.</b>
–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã, –≤–∫–ª—é—á–∞—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
""",
        "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π": """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>
–í—ã –µ—â–µ –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/register</code> ‚Äî –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
‚Ä¢ <code>/login</code> ‚Äî –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.
"""
    }
    
    base_text += role_specific_help.get(role_name, "–î–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.")
    base_text += "\n\n‚Ä¢ <code>/profile</code> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n‚Ä¢ <code>/help</code> ‚Äî –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
    
    return base_text 

def get_tests_for_access_keyboard(tests: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    keyboard = []
    
    for test in tests:
        button = InlineKeyboardButton(
            text=f"üìã {test.name}",
            callback_data=f"grant_access_to_test:{test.id}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 